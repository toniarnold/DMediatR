{
  "api/DMediatR.Bing.html": {
    "href": "api/DMediatR.Bing.html",
    "title": "Class Bing | DMediatR",
    "keywords": "Class Bing Namespace DMediatR Assembly DMediatR.dll Broadcast Ping as MediatR INotification. public class Bing : SerializationCountMessage, ICorrelatedNotification, INotification Inheritance object SerializationCountMessage Bing Implements ICorrelatedNotification INotification Inherited Members SerializationCountMessage.Message SerializationCountMessage.Count object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Bing() public Bing() Bing(string) public Bing(string message) Parameters message string Properties CorrelationGuid To be implemented as public Guid CorrelationGuid { get; init; } = Guid.NewGuid(); public Guid CorrelationGuid { get; init; } Property Value Guid"
  },
  "api/DMediatR.CertificateOptions.html": {
    "href": "api/DMediatR.CertificateOptions.html",
    "title": "Class CertificateOptions | DMediatR",
    "keywords": "Class CertificateOptions Namespace DMediatR Assembly DMediatR.dll X509 certificate specification, inheriting the password. public sealed class CertificateOptions : PasswordOptions Inheritance object PasswordOptions CertificateOptions Inherited Members PasswordOptions.SectionName PasswordOptions.Password object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ClientCertificateValidDays [Range(typeof(int), \"1\", \"9125\")] public int? ClientCertificateValidDays { get; set; } Property Value int? FilePath [Required] public string? FilePath { get; set; } Property Value string FilenamePrefix [Required] public string? FilenamePrefix { get; set; } Property Value string HostName [Required] public string? HostName { get; set; } Property Value string IntermediateCertificateValidDays [Range(typeof(int), \"1\", \"9125\")] public int? IntermediateCertificateValidDays { get; set; } Property Value int? RenewBeforeExpirationDays [Required] [Range(typeof(int), \"0\", \"9125\")] public int? RenewBeforeExpirationDays { get; set; } Property Value int? RenewFirewallEnabled Defaults to True. If the firewall is explicitly disabled, any node on the network can publish two RenewRootCertificateNotification messages in a row to bring down the entire network, which may not be desirable. public bool RenewFirewallEnabled { get; set; } Property Value bool RootCertificateValidDays [Range(typeof(int), \"1\", \"9125\")] public int? RootCertificateValidDays { get; set; } Property Value int? ServerCertificateValidDays [Range(typeof(int), \"1\", \"9125\")] public int? ServerCertificateValidDays { get; set; } Property Value int? ValidDays Default validity period, overridable by optional values for specific certificates. The upper limit is set to 25 years, but DMediatR encourages short-lived certificates. [Required] [Range(typeof(int), \"1\", \"9125\")] public int? ValidDays { get; set; } Property Value int?"
  },
  "api/DMediatR.Certificates.html": {
    "href": "api/DMediatR.Certificates.html",
    "title": "Class Certificates | DMediatR",
    "keywords": "Class Certificates Namespace DMediatR Assembly DMediatR.dll Utility to create a valid initial X509 certificate chain offline to be distributed to all gRPC nodes. public class Certificates Inheritance object Certificates Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Certificates(IServiceProvider) public Certificates(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Methods SetUpInitialChain() Generate or renew the certificate chain by directly using the local services. public void SetUpInitialChain() SetUpInitialChainAsync(CancellationToken) Generate or renew the certificate chain by directly using the local services. public Task SetUpInitialChainAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task"
  },
  "api/DMediatR.CustomSerializer-1.html": {
    "href": "api/DMediatR.CustomSerializer-1.html",
    "title": "Class CustomSerializer<T> | DMediatR",
    "keywords": "Class CustomSerializer<T> Namespace DMediatR Assembly DMediatR.dll Generic custom binary serializer to inherit from when implementing a concrete custom serializer for a specific type T. Types deriving from T will also use that serializer. public abstract class CustomSerializer<T> : Serializer, ISerializer Type Parameters T The concrete type to serialize. Inheritance object Serializer CustomSerializer<T> Implements ISerializer Inherited Members Serializer._serviceProvider Serializer.Serialize(object) Serializer.Deserialize<T>(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CustomSerializer(IServiceProvider) public CustomSerializer(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Properties Type Use this type of the serialized object as key for services.AddKeyedSingleton(). public static Type Type { get; } Property Value Type Methods CheckType(Type) Throws an ArgumentException if the given object is not derived of type T of the generic class. protected void CheckType(Type givenType) Parameters givenType Type Exceptions ArgumentException Deserialize(Type, byte[]) public override object Deserialize(Type type, byte[] bytes) Parameters type Type bytes byte[] Returns object Deserialize(Type, byte[], bool) protected object Deserialize(Type type, byte[] bytes, bool checkType) Parameters type Type bytes byte[] checkType bool Returns object Serialize(Type, object) public override byte[] Serialize(Type type, object obj) Parameters type Type obj object Returns byte[] Serialize(Type, object, bool) public byte[] Serialize(Type type, object obj, bool checkType = true) Parameters type Type obj object checkType bool Returns byte[]"
  },
  "api/DMediatR.Dto.html": {
    "href": "api/DMediatR.Dto.html",
    "title": "Class Dto | DMediatR",
    "keywords": "Class Dto Namespace DMediatR Assembly DMediatR.dll One data transfer object class for any type. [DataContract] public class Dto Inheritance object Dto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Bytes The binary serialized object. [DataMember(Order = 2)] public byte[] Bytes { get; set; } Property Value byte[] Type The type of the serialized object. [DataMember(Order = 1)] public Type Type { get; set; } Property Value Type"
  },
  "api/DMediatR.DtoService.html": {
    "href": "api/DMediatR.DtoService.html",
    "title": "Class DtoService | DMediatR",
    "keywords": "Class DtoService Namespace DMediatR Assembly DMediatR.dll Dto consumer to be used in the gRPC server. public class DtoService : IDtoService Inheritance object DtoService Implements IDtoService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DtoService(IMediator, ISerializer, IMemoryCache, IOptions<CertificateOptions>, IOptions<GrpcOptions>) public DtoService(IMediator mediator, ISerializer serializer, IMemoryCache cache, IOptions<CertificateOptions> certOptions, IOptions<GrpcOptions> grpcOptions) Parameters mediator IMediator serializer ISerializer cache IMemoryCache certOptions IOptions<CertificateOptions> grpcOptions IOptions<GrpcOptions> Methods PublishAsync(Dto, CallContext) Send the deserialized notification to the local handlers including NotificationForwarder. De-duplicates notifications received in multiple copies over different network paths. Also ignores certificate RenewNotification messages if RenewFirewallEnabled is true in CertificateOptions (default). public Task PublishAsync(Dto notificationDto, CallContext context = default) Parameters notificationDto Dto context CallContext Returns Task SendAsync(Dto, CallContext) Send the deserialized request to the local handler. public Task<Dto> SendAsync(Dto requestDto, CallContext context = default) Parameters requestDto Dto context CallContext Returns Task<Dto>"
  },
  "api/DMediatR.GrpcOptions.html": {
    "href": "api/DMediatR.GrpcOptions.html",
    "title": "Class GrpcOptions | DMediatR",
    "keywords": "Class GrpcOptions Namespace DMediatR Assembly DMediatR.dll Optional gRPC configuration Facade aligning client and server configuration with single values. public class GrpcOptions Inheritance object GrpcOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SectionName public const string SectionName = \"DMediatR:Grpc\" Field Value string Properties EnableDetailedErrors GrpcServiceOptions.EnableDetailedErrors public bool? EnableDetailedErrors { get; set; } Property Value bool? MaxLatency Duration the CorrelationGuid of a ICorrelatedNotification should stay in the cache. Required to prevent it from indefinitely growing. Afterwards, received duplicate copies of a notifications can no more be correlated and thus ignored. Defaults to 1 day, but can be adjusted to specific workloads here. public TimeSpan? MaxLatency { get; set; } Property Value TimeSpan? MaxMessageSize Aligns GrpcServiceOptions.MaxReceiveMessageSize GrpcServiceOptions.MaxSendMessageSize GrpcChannelOptions.MaxReceiveMessageSize GrpcChannelOptions.MaxSendMessageSize public int? MaxMessageSize { get; set; } Property Value int? MessagePackCompression Proxy for static MessagePack.MessagePackCompression. Ensure that all clients and servers are configured for compression or omit it on all nodes to avoid a MessagePackSerializationException. Enum values: None|Lz4Block|Lz4BlockArray public static MessagePackCompression? MessagePackCompression { get; set; } Property Value MessagePackCompression? ResponseCompressionAlgorithm Header grpc-accept-encoding compression algorithm natively supported: gzip public string? ResponseCompressionAlgorithm { get; set; } Property Value string ResponseCompressionLevel The compress level used to compress messages sent from the server. public CompressionLevel? ResponseCompressionLevel { get; set; } Property Value CompressionLevel?"
  },
  "api/DMediatR.GrpcPort.html": {
    "href": "api/DMediatR.GrpcPort.html",
    "title": "Enum GrpcPort | DMediatR",
    "keywords": "Enum GrpcPort Namespace DMediatR Assembly DMediatR.dll Port resp. SSL certificate to use. public enum GrpcPort Fields UseDefault = 0 Use the configured default port with the current certificate. UseRenew = 1 Use the configured OldPort with the old certificate."
  },
  "api/DMediatR.GrpcServer.html": {
    "href": "api/DMediatR.GrpcServer.html",
    "title": "Class GrpcServer | DMediatR",
    "keywords": "Class GrpcServer Namespace DMediatR Assembly DMediatR.dll Utility for creating a gRPC service WebApplicationBuilder and WebApplication in a DMediatR node. public static class GrpcServer Inheritance object GrpcServer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IntermediateCrt The intermediate certificate client and server certificates are validated against. public static X509Certificate2? IntermediateCrt { get; } Property Value X509Certificate2 IntermediateCrtOld The old intermediate certificate client and server certificates were validated against. Used for certificate renewal public static X509Certificate2? IntermediateCrtOld { get; } Property Value X509Certificate2 Logger public static ILogger<X509Chain>? Logger { get; } Property Value ILogger<X509Chain> Methods CreateWebApp(WebApplicationBuilder, GrpcPort) public static WebApplication CreateWebApp(WebApplicationBuilder builder, GrpcPort usePort = GrpcPort.UseDefault) Parameters builder WebApplicationBuilder usePort GrpcPort Returns WebApplication CreateWebAppBuilder(string[], GrpcPort) public static WebApplicationBuilder CreateWebAppBuilder(string[] args, GrpcPort usePort = GrpcPort.UseDefault) Parameters args string[] usePort GrpcPort Returns WebApplicationBuilder GetHostOptions(string) Get the Host options outside of the WebApplicationBuilder. public static HostOptions GetHostOptions(string environment) Parameters environment string Returns HostOptions LoadIntermediateCertificates(IServiceProvider) Used only for validation, thus take the .crt file and ignore RenewBeforeExpirationDays. public static void LoadIntermediateCertificates(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Exceptions Exception RunRestartWebAppAsync(string[], GrpcPort, Action<WebApplicationBuilder>?, CancellationToken) Build and run the WebApplication, repeat after it was stopped with IHostApplicationLifetime.StopApplication(). public static Task RunRestartWebAppAsync(string[] args, GrpcPort usePort, Action<WebApplicationBuilder>? builderCfg, CancellationToken cancellationToken) Parameters args string[] usePort GrpcPort builderCfg Action<WebApplicationBuilder> Optional callback for additional configuration of the WebApplicationBuilder, such as adding a concrete logger. cancellationToken CancellationToken Returns Task SetUpInitialCertificateChain(Action<ILoggingBuilder>) Generate or renew the certificate chain by directly using the local services. public static string SetUpInitialCertificateChain(Action<ILoggingBuilder> configureLogging) Parameters configureLogging Action<ILoggingBuilder> Returns string FilePath where the certificate chain was saved."
  },
  "api/DMediatR.HostOptions.html": {
    "href": "api/DMediatR.HostOptions.html",
    "title": "Class HostOptions | DMediatR",
    "keywords": "Class HostOptions Namespace DMediatR Assembly DMediatR.dll Specification of a DMediatR node host. Also used for specifying the remotes in RemotesOptions. public sealed class HostOptions Inheritance object HostOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields SectionName public const string SectionName = \"DMediatR:Host\" Field Value string Properties Host [Required] public string? Host { get; set; } Property Value string OldPort [Required] [Range(typeof(int), \"1\", \"65535\")] public int? OldPort { get; set; } Property Value int? Port [Required] [Range(typeof(int), \"1\", \"65535\")] public int? Port { get; set; } Property Value int?"
  },
  "api/DMediatR.ICorrelatedNotification.html": {
    "href": "api/DMediatR.ICorrelatedNotification.html",
    "title": "Interface ICorrelatedNotification | DMediatR",
    "keywords": "Interface ICorrelatedNotification Namespace DMediatR Assembly DMediatR.dll Multiple DMediatR nodes can have cyclic dependencies or there might be indirect diamonds in the configured dependency graph. In such cases a single node receives and would forward the same INotification in multiple duplicate copies. To handle them only once as in a monolith correlate these remote Notifications with a Guid. public interface ICorrelatedNotification : INotification Properties CorrelationGuid To be implemented as public Guid CorrelationGuid { get; init; } = Guid.NewGuid(); Guid CorrelationGuid { get; init; } Property Value Guid"
  },
  "api/DMediatR.IDtoService.html": {
    "href": "api/DMediatR.IDtoService.html",
    "title": "Interface IDtoService | DMediatR",
    "keywords": "Interface IDtoService Namespace DMediatR Assembly DMediatR.dll Code-first gRPC service for sending a MediatR IRequest to the remote IRequestHandler. [ServiceContract] public interface IDtoService Methods PublishAsync(Dto, CallContext) [OperationContract] Task PublishAsync(Dto notification, CallContext context = default) Parameters notification Dto context CallContext Returns Task SendAsync(Dto, CallContext) [OperationContract] Task<Dto> SendAsync(Dto request, CallContext context = default) Parameters request Dto context CallContext Returns Task<Dto>"
  },
  "api/DMediatR.IGrpcChannelPool.html": {
    "href": "api/DMediatR.IGrpcChannelPool.html",
    "title": "Interface IGrpcChannelPool | DMediatR",
    "keywords": "Interface IGrpcChannelPool Namespace DMediatR Assembly DMediatR.dll Its internal implementation provides a cache for long-lived gRPC channels, one instance per address. public interface IGrpcChannelPool : IDisposable Inherited Members IDisposable.Dispose() Methods ForAddress(string, GrpcChannelOptions, HttpClientHandler) GrpcChannel ForAddress(string address, GrpcChannelOptions options, HttpClientHandler handler) Parameters address string options GrpcChannelOptions handler HttpClientHandler Returns GrpcChannel Remove(string) bool Remove(string address) Parameters address string Returns bool"
  },
  "api/DMediatR.ILock.html": {
    "href": "api/DMediatR.ILock.html",
    "title": "Interface ILock | DMediatR",
    "keywords": "Interface ILock Namespace DMediatR Assembly DMediatR.dll Requests resp. notifications can recursively issue the same requests resp. notifications again. Attempting to lock a second time when the handler already holds a lock on that semaphore would cause a deadlock, therefore remember the locks already held for that message chain in the HasLocked set. public interface ILock Extension Methods LockExtension.Lock(ILock, SemaphoreSlim, CancellationToken) Properties HasLocked To be implemented as public HashSet<SemaphoreSlim>? HasLocked { get; set; } = []; HashSet<SemaphoreSlim>? HasLocked { get; set; } Property Value HashSet<SemaphoreSlim>"
  },
  "api/DMediatR.ILockISerializedInterface.html": {
    "href": "api/DMediatR.ILockISerializedInterface.html",
    "title": "Class ILockISerializedInterface | DMediatR",
    "keywords": "Class ILockISerializedInterface Namespace DMediatR Assembly DMediatR.dll public class ILockISerializedInterface : SerializedInterface<ILock>, ISerializedInterface Inheritance object SerializedInterface<ILock> ILockISerializedInterface Implements ISerializedInterface Inherited Members SerializedInterface<ILock>.Dehydrate(object) SerializedInterface<ILock>.Rehydrate(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Dehydrate(ILock) protected override void Dehydrate(ILock obj) Parameters obj ILock Rehydrate(ILock) protected override void Rehydrate(ILock obj) Parameters obj ILock"
  },
  "api/DMediatR.IRemote.html": {
    "href": "api/DMediatR.IRemote.html",
    "title": "Interface IRemote | DMediatR",
    "keywords": "Interface IRemote Namespace DMediatR Assembly DMediatR.dll Inherit from IRemote and inject Remote to add the SendRemote extension. public interface IRemote Extension Methods RemoteExtension.PublishRemote(IRemote, ICorrelatedNotification, CancellationToken) RemoteExtension.SendRemote<TResponse>(IRemote, IRequest<TResponse>, CancellationToken) Properties Remote Remote Remote { get; } Property Value Remote"
  },
  "api/DMediatR.ISerializedInterface.html": {
    "href": "api/DMediatR.ISerializedInterface.html",
    "title": "Interface ISerializedInterface | DMediatR",
    "keywords": "Interface ISerializedInterface Namespace DMediatR Assembly DMediatR.dll Interface for adding concrete SerializedInterface<T> classes with services.TryAddKeyedSingleton() public interface ISerializedInterface Methods Dehydrate(object) void Dehydrate(object obj) Parameters obj object Rehydrate(object) void Rehydrate(object obj) Parameters obj object"
  },
  "api/DMediatR.ISerializer.html": {
    "href": "api/DMediatR.ISerializer.html",
    "title": "Interface ISerializer | DMediatR",
    "keywords": "Interface ISerializer Namespace DMediatR Assembly DMediatR.dll Interface for the base serializer and all specialized serializers. Use it for injecting an alternate base BinarySerializer implementation with services.AddKeyedSingleton<ISerializer, BinarySerializer>(typeof(object)); Its pluggable default implementation is a tiny wrapper around MessagePackSerializer.Typeless. public interface ISerializer Methods Deserialize(Type, byte[]) object Deserialize(Type type, byte[] bytes) Parameters type Type bytes byte[] Returns object Deserialize<T>(byte[]) T Deserialize<T>(byte[] bytes) Parameters bytes byte[] Returns T Type Parameters T Serialize(object) byte[] Serialize(object obj) Parameters obj object Returns byte[] Serialize(Type, object) byte[] Serialize(Type type, object obj) Parameters type Type obj object Returns byte[]"
  },
  "api/DMediatR.LocalAttribute.html": {
    "href": "api/DMediatR.LocalAttribute.html",
    "title": "Class LocalAttribute | DMediatR",
    "keywords": "Class LocalAttribute Namespace DMediatR Assembly DMediatR.dll Marks the handlers in this class as local double of a [Remote] class. [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public class LocalAttribute : Attribute Inheritance object Attribute LocalAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LocalAttribute(string) public LocalAttribute(string remoteName) Parameters remoteName string Methods RemoteName(Type) The reference name matching the remote double of the class. public static string? RemoteName(Type t) Parameters t Type Returns string"
  },
  "api/DMediatR.LockExtension.html": {
    "href": "api/DMediatR.LockExtension.html",
    "title": "Class LockExtension | DMediatR",
    "keywords": "Class LockExtension Namespace DMediatR Assembly DMediatR.dll public static class LockExtension Inheritance object LockExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Lock(ILock, SemaphoreSlim, CancellationToken) Lock the given semaphore only once in a call chain to avoid deadlocks. It is the responsibility of the issuer of a message to relay the HasLocked HashSet of the ILockingMessage down to potentially recursive successive messages. public static Task<bool> Lock(this ILock message, SemaphoreSlim semaphore, CancellationToken cancellationToken) Parameters message ILock semaphore SemaphoreSlim SemaphoreSlim(1,1) object of the handler class. cancellationToken CancellationToken Returns Task<bool> True if a lock has been acquired on the semaphore that finally must be released by the caller."
  },
  "api/DMediatR.PasswordOptions.html": {
    "href": "api/DMediatR.PasswordOptions.html",
    "title": "Class PasswordOptions | DMediatR",
    "keywords": "Class PasswordOptions Namespace DMediatR Assembly DMediatR.dll X509 certificate password. public class PasswordOptions Inheritance object PasswordOptions Derived CertificateOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SectionName public const string SectionName = \"DMediatR:Certificate\" Field Value string Properties Password [Required] public string? Password { get; set; } Property Value string"
  },
  "api/DMediatR.Ping.html": {
    "href": "api/DMediatR.Ping.html",
    "title": "Class Ping | DMediatR",
    "keywords": "Class Ping Namespace DMediatR Assembly DMediatR.dll Simple MediatR IRequest for diagnosis. public class Ping : SerializationCountMessage, IRequest<Pong>, IBaseRequest Inheritance object SerializationCountMessage Ping Implements IRequest<Pong> IBaseRequest Inherited Members SerializationCountMessage.Message SerializationCountMessage.Count object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Ping() public Ping() Ping(string) public Ping(string message) Parameters message string Properties Payload Payload for performance testing. public byte[] Payload { get; set; } Property Value byte[]"
  },
  "api/DMediatR.Pong.html": {
    "href": "api/DMediatR.Pong.html",
    "title": "Class Pong | DMediatR",
    "keywords": "Class Pong Namespace DMediatR Assembly DMediatR.dll Response to a Ping request. Echoes the Ping message and the name of the corresponding host if it is not handled locally. public class Pong : SerializationCountMessage Inheritance object SerializationCountMessage Pong Inherited Members SerializationCountMessage.Message SerializationCountMessage.Count object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Payload Payload for performance testing. public byte[] Payload { get; set; } Property Value byte[]"
  },
  "api/DMediatR.Remote.html": {
    "href": "api/DMediatR.Remote.html",
    "title": "Class Remote | DMediatR",
    "keywords": "Class Remote Namespace DMediatR Assembly DMediatR.dll Public composite object injecting all internal dependencies required for RemoteExtension.SendRemote(). public class Remote Inheritance object Remote Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Remote(IServiceProvider, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IOptions<GrpcOptions>, IMediator, ISerializer, IGrpcChannelPool, ILogger<Remote>) public Remote(IServiceProvider serviceProvider, IOptions<CertificateOptions> certOptions, IOptions<RemotesOptions> remotesOptions, IOptions<GrpcOptions> grpcOptions, IMediator mediator, ISerializer serializer, IGrpcChannelPool channel, ILogger<Remote> logger) Parameters serviceProvider IServiceProvider certOptions IOptions<CertificateOptions> remotesOptions IOptions<RemotesOptions> grpcOptions IOptions<GrpcOptions> mediator IMediator serializer ISerializer channel IGrpcChannelPool logger ILogger<Remote>"
  },
  "api/DMediatR.RemoteAttribute.html": {
    "href": "api/DMediatR.RemoteAttribute.html",
    "title": "Class RemoteAttribute | DMediatR",
    "keywords": "Class RemoteAttribute Namespace DMediatR Assembly DMediatR.dll Marks the handlers in this class as calling a gRPC endpoint (as opposed to calling locally). [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public class RemoteAttribute : Attribute Inheritance object Attribute RemoteAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RemoteAttribute(string) public RemoteAttribute(string name) Parameters name string Methods Name(Type) The reference name to be used in the \"Remotes\" configuration section. public static string? Name(Type t) Parameters t Type Returns string"
  },
  "api/DMediatR.RemoteExtension.html": {
    "href": "api/DMediatR.RemoteExtension.html",
    "title": "Class RemoteExtension | DMediatR",
    "keywords": "Class RemoteExtension Namespace DMediatR Assembly DMediatR.dll IRemote extension methods for connecting to a Dto gRPC service from a MediatR handler. public static class RemoteExtension Inheritance object RemoteExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PublishRemote(IRemote, ICorrelatedNotification, CancellationToken) Publish the notification to all distinct connected remote nodes. public static Task PublishRemote(this IRemote provider, ICorrelatedNotification notification, CancellationToken cancellationToken) Parameters provider IRemote The class providing a MediatR handler notification ICorrelatedNotification The MediatR ICorrelatedNotification. cancellationToken CancellationToken Returns Task SendRemote<TResponse>(IRemote, IRequest<TResponse>, CancellationToken) Send a MediatR IRequest to a remote node and receive a TResponse. public static Task<TResponse> SendRemote<TResponse>(this IRemote provider, IRequest<TResponse> request, CancellationToken cancellationToken) Parameters provider IRemote The class providing a MediatR handler. request IRequest<TResponse> The MediatR IRequest. cancellationToken CancellationToken Returns Task<TResponse> The MediatR TResponse. Type Parameters TResponse"
  },
  "api/DMediatR.RemotesOptions.html": {
    "href": "api/DMediatR.RemotesOptions.html",
    "title": "Class RemotesOptions | DMediatR",
    "keywords": "Class RemotesOptions Namespace DMediatR Assembly DMediatR.dll Dictionary of HostOptions declaring the configured remotes for that DMediatR node. public sealed class RemotesOptions : Dictionary<string, HostOptions>, IDictionary<string, HostOptions>, ICollection<KeyValuePair<string, HostOptions>>, IReadOnlyDictionary<string, HostOptions>, IReadOnlyCollection<KeyValuePair<string, HostOptions>>, IEnumerable<KeyValuePair<string, HostOptions>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable Inheritance object Dictionary<string, HostOptions> RemotesOptions Implements IDictionary<string, HostOptions> ICollection<KeyValuePair<string, HostOptions>> IReadOnlyDictionary<string, HostOptions> IReadOnlyCollection<KeyValuePair<string, HostOptions>> IEnumerable<KeyValuePair<string, HostOptions>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable Inherited Members Dictionary<string, HostOptions>.Add(string, HostOptions) Dictionary<string, HostOptions>.Clear() Dictionary<string, HostOptions>.ContainsKey(string) Dictionary<string, HostOptions>.ContainsValue(HostOptions) Dictionary<string, HostOptions>.EnsureCapacity(int) Dictionary<string, HostOptions>.GetEnumerator() Dictionary<string, HostOptions>.OnDeserialization(object) Dictionary<string, HostOptions>.Remove(string) Dictionary<string, HostOptions>.Remove(string, out HostOptions) Dictionary<string, HostOptions>.TrimExcess() Dictionary<string, HostOptions>.TrimExcess(int) Dictionary<string, HostOptions>.TryAdd(string, HostOptions) Dictionary<string, HostOptions>.TryGetValue(string, out HostOptions) Dictionary<string, HostOptions>.Comparer Dictionary<string, HostOptions>.Count Dictionary<string, HostOptions>.this[string] Dictionary<string, HostOptions>.Keys Dictionary<string, HostOptions>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields SectionName public const string SectionName = \"DMediatR:Remotes\" Field Value string Properties ValidatedValues [ValidateEnumeratedItems] public IEnumerable<HostOptions> ValidatedValues { get; } Property Value IEnumerable<HostOptions>"
  },
  "api/DMediatR.RenewClientCertificateNotification.html": {
    "href": "api/DMediatR.RenewClientCertificateNotification.html",
    "title": "Class RenewClientCertificateNotification | DMediatR",
    "keywords": "Class RenewClientCertificateNotification Namespace DMediatR Assembly DMediatR.dll Renew the client certificates on all reachable nodes acting as client. public class RenewClientCertificateNotification : RenewNotification, ILock, ICorrelatedNotification, INotification Inheritance object SerializationCountMessage RenewNotification RenewClientCertificateNotification Implements ILock ICorrelatedNotification INotification Inherited Members RenewNotification.CorrelationGuid RenewNotification.HasLocked SerializationCountMessage.Message SerializationCountMessage.Count object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods LockExtension.Lock(ILock, SemaphoreSlim, CancellationToken)"
  },
  "api/DMediatR.RenewIntermediateCertificateNotification.html": {
    "href": "api/DMediatR.RenewIntermediateCertificateNotification.html",
    "title": "Class RenewIntermediateCertificateNotification | DMediatR",
    "keywords": "Class RenewIntermediateCertificateNotification Namespace DMediatR Assembly DMediatR.dll Renew the intermediate certificate on the node which has it stored. public class RenewIntermediateCertificateNotification : RenewNotification, ILock, ICorrelatedNotification, INotification Inheritance object SerializationCountMessage RenewNotification RenewIntermediateCertificateNotification Implements ILock ICorrelatedNotification INotification Inherited Members RenewNotification.CorrelationGuid RenewNotification.HasLocked SerializationCountMessage.Message SerializationCountMessage.Count object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods LockExtension.Lock(ILock, SemaphoreSlim, CancellationToken)"
  },
  "api/DMediatR.RenewNotification.html": {
    "href": "api/DMediatR.RenewNotification.html",
    "title": "Class RenewNotification | DMediatR",
    "keywords": "Class RenewNotification Namespace DMediatR Assembly DMediatR.dll Base class for MediatR notifications enforcing certificate renewal. Requires explicitly setting \"RenewFirewallEnabled\": \"False\" in the \"Certificate\" configuration section, otherwise it is ignored. public abstract class RenewNotification : SerializationCountMessage, ILock, ICorrelatedNotification, INotification Inheritance object SerializationCountMessage RenewNotification Implements ILock ICorrelatedNotification INotification Derived RenewClientCertificateNotification RenewIntermediateCertificateNotification RenewRootCertificateNotification RenewServerCertificateNotification Inherited Members SerializationCountMessage.Message SerializationCountMessage.Count object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods LockExtension.Lock(ILock, SemaphoreSlim, CancellationToken) Properties CorrelationGuid To be implemented as public Guid CorrelationGuid { get; init; } = Guid.NewGuid(); public Guid CorrelationGuid { get; init; } Property Value Guid HasLocked To be implemented as public HashSet<SemaphoreSlim>? HasLocked { get; set; } = []; public HashSet<SemaphoreSlim>? HasLocked { get; set; } Property Value HashSet<SemaphoreSlim>"
  },
  "api/DMediatR.RenewRootCertificateNotification.html": {
    "href": "api/DMediatR.RenewRootCertificateNotification.html",
    "title": "Class RenewRootCertificateNotification | DMediatR",
    "keywords": "Class RenewRootCertificateNotification Namespace DMediatR Assembly DMediatR.dll Renew the root certificate on the node which has it stored. public class RenewRootCertificateNotification : RenewNotification, ILock, ICorrelatedNotification, INotification Inheritance object SerializationCountMessage RenewNotification RenewRootCertificateNotification Implements ILock ICorrelatedNotification INotification Inherited Members RenewNotification.CorrelationGuid RenewNotification.HasLocked SerializationCountMessage.Message SerializationCountMessage.Count object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods LockExtension.Lock(ILock, SemaphoreSlim, CancellationToken)"
  },
  "api/DMediatR.RenewServerCertificateNotification.html": {
    "href": "api/DMediatR.RenewServerCertificateNotification.html",
    "title": "Class RenewServerCertificateNotification | DMediatR",
    "keywords": "Class RenewServerCertificateNotification Namespace DMediatR Assembly DMediatR.dll Renew the server certificates on all nodes acting as server. public class RenewServerCertificateNotification : RenewNotification, ILock, ICorrelatedNotification, INotification Inheritance object SerializationCountMessage RenewNotification RenewServerCertificateNotification Implements ILock ICorrelatedNotification INotification Inherited Members RenewNotification.CorrelationGuid RenewNotification.HasLocked SerializationCountMessage.Message SerializationCountMessage.Count object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods LockExtension.Lock(ILock, SemaphoreSlim, CancellationToken)"
  },
  "api/DMediatR.SerializationCountMessage.html": {
    "href": "api/DMediatR.SerializationCountMessage.html",
    "title": "Class SerializationCountMessage | DMediatR",
    "keywords": "Class SerializationCountMessage Namespace DMediatR Assembly DMediatR.dll Base class for tracing the number of hops a DMediatR message (IRequest or INotification) has taken. Its Count property gets incremented whenever it gets serialized. public abstract class SerializationCountMessage Inheritance object SerializationCountMessage Derived Bing Ping Pong RenewNotification Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count Number of times the message has been serialized. public uint Count { get; set; } Property Value uint Message The Message payload. public string? Message { get; set; } Property Value string"
  },
  "api/DMediatR.SerializedInterface-1.html": {
    "href": "api/DMediatR.SerializedInterface-1.html",
    "title": "Class SerializedInterface<T> | DMediatR",
    "keywords": "Class SerializedInterface<T> Namespace DMediatR Assembly DMediatR.dll Interface custom serialization is orthogonal to a CustomSerializer class hierarchy: Serializable classes can implement multiple interfaces, which in turn require e.g. specific members which must be dehydrated before serialization. public abstract class SerializedInterface<T> : ISerializedInterface Type Parameters T Inheritance object SerializedInterface<T> Implements ISerializedInterface Derived ILockISerializedInterface Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Dehydrate(object) public void Dehydrate(object obj) Parameters obj object Dehydrate(T) protected virtual void Dehydrate(T obj) Parameters obj T Rehydrate(object) public void Rehydrate(object obj) Parameters obj object Rehydrate(T) protected virtual void Rehydrate(T obj) Parameters obj T"
  },
  "api/DMediatR.Serializer.html": {
    "href": "api/DMediatR.Serializer.html",
    "title": "Class Serializer | DMediatR",
    "keywords": "Class Serializer Namespace DMediatR Assembly DMediatR.dll General serializer gathering required specialized serializers from the ServiceCollection. public class Serializer : ISerializer Inheritance object Serializer Implements ISerializer Derived CustomSerializer<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Serializer(IServiceProvider) public Serializer(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Fields _serviceProvider protected readonly IServiceProvider _serviceProvider Field Value IServiceProvider Methods Deserialize(Type, byte[]) public virtual object Deserialize(Type type, byte[] bytes) Parameters type Type bytes byte[] Returns object Deserialize<T>(byte[]) public T Deserialize<T>(byte[] bytes) Parameters bytes byte[] Returns T Type Parameters T Serialize(object) public byte[] Serialize(object obj) Parameters obj object Returns byte[] Serialize(Type, object) public virtual byte[] Serialize(Type type, object obj) Parameters type Type obj object Returns byte[]"
  },
  "api/DMediatR.ServiceCollectionExtension.html": {
    "href": "api/DMediatR.ServiceCollectionExtension.html",
    "title": "Class ServiceCollectionExtension | DMediatR",
    "keywords": "Class ServiceCollectionExtension Namespace DMediatR Assembly DMediatR.dll Provides services.AddDMediatR() as a drop-in replacement for AddMediatR(). public static class ServiceCollectionExtension Inheritance object ServiceCollectionExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDMediatR(IServiceCollection, IConfiguration, Action<MediatRServiceConfiguration>) A drop-in replacement for MediatR.AddMediatR adding services for distribution. public static IServiceCollection AddDMediatR(this IServiceCollection services, IConfiguration config, Action<MediatRServiceConfiguration> mediatrCfg) Parameters services IServiceCollection config IConfiguration mediatrCfg Action<MediatRServiceConfiguration> Returns IServiceCollection"
  },
  "api/DMediatR.TestSetUp.html": {
    "href": "api/DMediatR.TestSetUp.html",
    "title": "Class TestSetUp | DMediatR",
    "keywords": "Class TestSetUp Namespace DMediatR Assembly DMediatR.dll Helper methods for setting up a DMediatR environment in functional unit tests without a dependency to a specific test framework. public static class TestSetUp Inheritance object TestSetUp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ServerStartTimeout public const int ServerStartTimeout = 1 Field Value int Properties CertificateOptions public static CertificateOptions CertificateOptions { get; } Property Value CertificateOptions ServerProcesses public static List<Process> ServerProcesses { get; } Property Value List<Process> ServiceProvider public static ServiceProvider ServiceProvider { get; } Property Value ServiceProvider Methods AssertServersStarted(Action<Process, string>) public static void AssertServersStarted(Action<Process, string> processAssert) Parameters processAssert Action<Process, string> DeployCertificate(string, string) public static void DeployCertificate(string certificate, string node) Parameters certificate string node string GetConfiguration(string) public static IConfiguration GetConfiguration(string environment) Parameters environment string Returns IConfiguration GetHttpClientAsync() Side-effect free HTTPS client using the client certificate. public static Task<HttpClient> GetHttpClientAsync() Returns Task<HttpClient> GetProcessProfile(Process) Extracts the profile name out of a StartInfo string like FileName = \"C:\\Program Files\\dotnet\\dotnet.exe\", Arguments = \"run --no-build --project DMediatRNode.csproj --launch-profile Monolith\", WorkingDirectory = ... public static string GetProcessProfile(Process process) Parameters process Process Returns string SetUpDMediatRServices(string?, Action<MediatRServiceConfiguration>, Func<IServiceCollection, IServiceCollection>?) Instantiate the ServiceProvider with appsettings[.environment].json public static void SetUpDMediatRServices(string? environment, Action<MediatRServiceConfiguration> mediatrCfg, Func<IServiceCollection, IServiceCollection>? serviceCollectionAction = null) Parameters environment string mediatrCfg Action<MediatRServiceConfiguration> serviceCollectionAction Func<IServiceCollection, IServiceCollection> SetUpInitialCertificates() Create an initial valid X509 certificate chain in the directory configured in the Certificate section. public static void SetUpInitialCertificates() StartServer(string, string, string, int, int) Start the gRPC server project with the launch profile. public static void StartServer(string workingDirectory, string serverProject, string launchProfile, int port, int oldPort) Parameters workingDirectory string The server project directory. serverProject string The .csproj file of the server project. launchProfile string Defined in its Properties\\launchSettings.json. port int The main port to wait for accepting TCP connections. oldPort int he TCP renewal port to wait for accepting TCP connections. StopAllServers() public static void StopAllServers() WaitForServerPort(int, int) Poll for a successful TCP connection at the given port public static void WaitForServerPort(int port, int timeout = 1) Parameters port int port to listen on timeout int expected duration of all tests in sec"
  },
  "api/DMediatR.html": {
    "href": "api/DMediatR.html",
    "title": "Namespace DMediatR | DMediatR",
    "keywords": "Namespace DMediatR Classes Bing Broadcast Ping as MediatR INotification. CertificateOptions X509 certificate specification, inheriting the password. Certificates Utility to create a valid initial X509 certificate chain offline to be distributed to all gRPC nodes. CustomSerializer<T> Generic custom binary serializer to inherit from when implementing a concrete custom serializer for a specific type T. Types deriving from T will also use that serializer. Dto One data transfer object class for any type. DtoService Dto consumer to be used in the gRPC server. GrpcOptions Optional gRPC configuration Facade aligning client and server configuration with single values. GrpcServer Utility for creating a gRPC service WebApplicationBuilder and WebApplication in a DMediatR node. HostOptions Specification of a DMediatR node host. Also used for specifying the remotes in RemotesOptions. ILockISerializedInterface LocalAttribute Marks the handlers in this class as local double of a [Remote] class. LockExtension PasswordOptions X509 certificate password. Ping Simple MediatR IRequest for diagnosis. Pong Response to a Ping request. Echoes the Ping message and the name of the corresponding host if it is not handled locally. Remote Public composite object injecting all internal dependencies required for RemoteExtension.SendRemote(). RemoteAttribute Marks the handlers in this class as calling a gRPC endpoint (as opposed to calling locally). RemoteExtension IRemote extension methods for connecting to a Dto gRPC service from a MediatR handler. RemotesOptions Dictionary of HostOptions declaring the configured remotes for that DMediatR node. RenewClientCertificateNotification Renew the client certificates on all reachable nodes acting as client. RenewIntermediateCertificateNotification Renew the intermediate certificate on the node which has it stored. RenewNotification Base class for MediatR notifications enforcing certificate renewal. Requires explicitly setting \"RenewFirewallEnabled\": \"False\" in the \"Certificate\" configuration section, otherwise it is ignored. RenewRootCertificateNotification Renew the root certificate on the node which has it stored. RenewServerCertificateNotification Renew the server certificates on all nodes acting as server. SerializationCountMessage Base class for tracing the number of hops a DMediatR message (IRequest or INotification) has taken. Its Count property gets incremented whenever it gets serialized. SerializedInterface<T> Interface custom serialization is orthogonal to a CustomSerializer class hierarchy: Serializable classes can implement multiple interfaces, which in turn require e.g. specific members which must be dehydrated before serialization. Serializer General serializer gathering required specialized serializers from the ServiceCollection. ServiceCollectionExtension Provides services.AddDMediatR() as a drop-in replacement for AddMediatR(). TestSetUp Helper methods for setting up a DMediatR environment in functional unit tests without a dependency to a specific test framework. Interfaces ICorrelatedNotification Multiple DMediatR nodes can have cyclic dependencies or there might be indirect diamonds in the configured dependency graph. In such cases a single node receives and would forward the same INotification in multiple duplicate copies. To handle them only once as in a monolith correlate these remote Notifications with a Guid. IDtoService Code-first gRPC service for sending a MediatR IRequest to the remote IRequestHandler. IGrpcChannelPool Its internal implementation provides a cache for long-lived gRPC channels, one instance per address. ILock Requests resp. notifications can recursively issue the same requests resp. notifications again. Attempting to lock a second time when the handler already holds a lock on that semaphore would cause a deadlock, therefore remember the locks already held for that message chain in the HasLocked set. IRemote Inherit from IRemote and inject Remote to add the SendRemote extension. ISerializedInterface Interface for adding concrete SerializedInterface<T> classes with services.TryAddKeyedSingleton() ISerializer Interface for the base serializer and all specialized serializers. Use it for injecting an alternate base BinarySerializer implementation with services.AddKeyedSingleton<ISerializer, BinarySerializer>(typeof(object)); Its pluggable default implementation is a tiny wrapper around MessagePackSerializer.Typeless. Enums GrpcPort Port resp. SSL certificate to use."
  },
  "docs/debugging.html": {
    "href": "docs/debugging.html",
    "title": "Debugging | DMediatR",
    "keywords": "Debugging Since DMediatR is bootstrapped in the sense that it is implemented by passing certificates around as MediatR IResponse objects, the tools used to debug it can also be applied to projects that just use DMediatR as a library. The VS debugger can only be attached to one process at a time, so debugging a distributed system presents some challenges. To make debugging easier, there are two scripts in the root directory: Script Arguments Usage Example start.ps1 profile1 [profile2 ...] ./start Monolith test.ps1 [test selection] ./test test =~ /GetRemoteServerCert/ start.ps1 Tests of category Integration expect one or more running DMediatRNode instances to talk to. They start these by themselves with SetUp.StartServer(). But these instances are automatically terminated by the [OneTimeTearDown] method, and its output disappears - at least unless there’s a breakpoint before its SetUp.StopAllServers();. The ./start.ps1 script starts nodes with the specified --launch-profile separately and leaves them running until Ctrl+C is pressed. After commenting out StartServer in e.g. ServerTest.cs: SetUp.StartServer(\"Monolith\", 18001, 18002); // or ./start Monolith SetUp.AssertServersStarted(); and recompiling, the client tests can be debugged from within VS after running ./start Monolith. test.ps1 To debug a DMediatRNode instance itself in the VS debugger, the tests must be run from another process. The ./test.ps1 script executes NUnit tests with the specified NUnit.Where test selection1. It is assumed that the selected test executed by the script expects a DMediatRNode with a matching configuration profile running in the VS debugger. Running e.g. test test =~ /Test1/ in the VS Developer-PowerShell eliminates the need to attempt to teach tools like Postman to talk binary gRPC MediatR. NUnit Test Selection Language↩"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | DMediatR",
    "keywords": "Getting Started Install and run the DMediatRNodeTemplate To get started quickly, install the current DMediatRNodeTemplate1 NuGet template with the .NET CLI command with the exact preview version shown on its webpage. Then, in an empty folder, create the solution e.g. with the name: dotnet new DMediatRNode -n Grpc This template creates the following directory structure: cert/ ← Directory for the generated X509 certificates src/Grpc/ ← DMediatR gRPC node project test/Grpc.Test/ ← Integration tests for above project Grpc.sln ← Solution file for VS 2022 README.md start.ps1 ← Script for starting up gRPC nodes by launchSettings profile names test.ps1 ← Script for running a test by NUnit Test Selection Language Open and build the solution. Open the Test-Explorer2 and run all tests. Several .NET process windows will pop up and disappear quickly. Inspect the console output To view the console log, prevent the process windows from closing by setting a breakpoint on SetUp.StopAllServers(); e.g. in the PingRedBlueTest.cs test file, as this uses two nodes Red and Blue, which can be identified by the window title (the \"RedPingBlue\" combo indicates that the Red node is configured to forward Ping to Blue): DMediatR RedPingBlue on localhost:18005 DMediatR Blue on localhost:18003 Ignore the X509 certificate warnings from AspNetCore itself, as DMediatR uses a self-signed root certificate3 that can't be verified: warn: Microsoft.AspNetCore.Authentication.Certificate.CertificateAuthenticationHandler[2] Certificate validation failed, subject was CN=ClientCertifier. NotSignatureValid (...) The interesting part comes after the certificate warning with the DMediatR tracing Ping-Pong4: Red info: DMediatR.BingHandler[0] Handling Bing from NUnit dbug: DMediatR.NotificationForwarder[0] Handling/Forwarding Bing info: DMediatR.NotificationForwarder[0] Handling/Forwarding Bing Bing 1 hops from NUnit via RedPingBlue dbug: DMediatR.Remote[0] Forwarding Bing to localhost:18003 info: DMediatR.BingHandler[0] Handling Bing 1 hops from NUnit via RedPingBlue dbug: DMediatR.NotificationForwarder[0] Handling/Forwarding Bing info: DMediatR.NotificationForwarder[0] Handling/Forwarding Bing Bing 2 hops from NUnit via RedPingBlue via RedPingBlue dbug: DMediatR.Remote[0] Forwarding Bing to localhost:18003 dbug: DMediatR.Remote[0] Send Ping to https://localhost:18003/ info: DMediatR.PingHandlerRemote[0] Pong 3 hops from NUnit via RedPingBlue via Blue via RedPingBlue Blue info: DMediatR.BingHandler[0] Handling Bing 1 hops from NUnit via RedPingBlue dbug: DMediatR.NotificationForwarder[0] Handling/Forwarding Bing info: DMediatR.NotificationForwarder[0] Handling/Forwarding Bing Bing 2 hops from NUnit via RedPingBlue via Blue info: DMediatR.BingHandler[0] Handling Bing 2 hops from NUnit via RedPingBlue via Blue dbug: DMediatR.NotificationForwarder[0] Handling/Forwarding Bing info: DMediatR.NotificationForwarder[0] Handling/Forwarding Bing Bing 2 hops from NUnit via RedPingBlue via Blue via Blue info: DMediatR.PingHandler[0] Ping 2 hops from NUnit via RedPingBlue via Blue Pong 3 hops from NUnit via RedPingBlue via Blue via RedPingBlue The Bing broadcast MediatR INotification published by the NUnit test runner first reaches Red on the BingHandler (\"Handling Bing from NUnit\") and is immediately forwarded by the NotificationForwarder to Blue (\"Forwarding Bing to localhost:18003\"), which receives it on the BingHandler (\"Handling Bing 1 hops from NUnit via RedPingBlue\"). The Ping message is configured to be sent from the NUnit test-runner directly to Red, which in turn is configured to forward it to Blue (\"Forwarding Bing to localhost:18003\"). After being routed back to the NUnit test-runner, the message is logged as having taken 4 hops, as can be seen in the VS Test output window: Information: Pong 4 hops from NUnit via RedPingBlue via Blue via RedPingBlue via localhost:8081 Instead of setting a breakpoint, the start.ps1 resp test.ps1 scripts can be used as explained in the debugging chapter5. DMediatRNodeTemplate NuGet package↩ https://learn.microsoft.com/en-us/visualstudio/test/run-unit-tests-with-test-explorer?view=vs-2022#run-tests-in-test-explorer↩ DMediatR uses the same trust model as ancient WCF 4.0: In that framework at that time, a self-signed server certificate was disallowed as insecure, but as soon as a client certificate was also required, WCF accepted the whole as secure enough. In DMediatR, trust is built on the concrete intermediate certificate: If a responding server's certificate was issued by the same intermediate certifier, it is considered trustworthy. The server in turn validates the required client certificate against the intermediate certificate.↩ DMediatR Ping-Pong and Bing↩ DMediatR Debugging↩"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | DMediatR",
    "keywords": "Introduction"
  },
  "docs/iot.html": {
    "href": "docs/iot.html",
    "title": "IoT | DMediatR",
    "keywords": "IoT The IoT use case is an example of the way DMediatR is opinionated: Encourage the distribution of the same monolith across all nodes of a microservice architecture - it is the responsibility of the RPC caller to use only a node that actually provides the desired service. In this case, querying the CPU temperature on a Windows machine throws the exception \"Iot.Device.CpuTemperature is not available on this device\". The Iot sample node The Iot sample host can be published from VS with the RuntimeIdentifier linux-arm641. The included limux-arm64.pubxml points to an SMB share Z: connected via USB to the target Raspberry PI. After deployment, it can be started there locally with ./Iot. The developer certificate Important Although it is in fact not used at all, the dynamic late certificate assignment causes the server to require a developer certificate installed during startup. To avoid having to install the dotnet SDK2 despite publishing it as self-contained app3, you can copy a developer certificate manually to its directory created with mkdir -p ~/.dotnet/corefx/cryptography/x509stores/my The smoke test The appsettings.Iot.json in DMediatR.Tests points to the Raspberry PI host named rpi. It is written with a trailing dot to force Windows to actually query the DNS server (a Pi-hole4 with its /etc/hosts): \"Remotes\": { \"CpuTemp\": { \"Host\": \"rpi.\", \"Port\": 18001, \"OldPort\": 18002 } The certificate path in the DMediatR:Certificate:FilePath points to the cert directory in the IoT application. If you create the initial certificate chain on the Raspberry Pi with .\\Iot init, manually copy it over to that directory. The first of the two test methods in IotTest.cs simply sends a GET request like a web browser would and asserts having received the same response: [Test] public async Task CpuTempReachable() { using var httpClient = await TestSetUp.GetHttpClientAsync(); var response = await httpClient.GetStringAsync(Remote.Remotes[\"CpuTemp\"].Address); Assert.That(response, Is.EqualTo(\"DMediatR gRPC endpoint\")); } [Test] public async Task GetRemoteTemp() { var temperature = await this.SendRemote(new TempRequest(), CancellationToken.None); TestContext.WriteLine($\"CpuTemp of {Remote.Remotes[\"CpuTemp\"].Address} is {temperature,0:f1} ℃.\"); } The second one actually uses the DMediatR infrastructure and sends a serialized MediatR IRequest to remotely query the CPU temperature of the Raspberry PI using the Iot.Device.Bindings NuGet package5. On the PI, the request is handled locally in the TempHandler.cs and the result is sent back. Then, for plausibility, this temperature can manually be compared to what e.g. the PI-hole admin page reports: CpuTemp of https://rpi.:18001/ is 46.7 ℃. It's been a long way from the days when the special Windows distribution designed to run .NET on a Raspberry PI 3 refused to boot on a 3+ because of the \"+\"…↩ ./dotnet-install.sh --channel 8.0 with a scripted install↩ Deploying a self-contained app↩ https://pi-hole.net↩ Iot.Device.Bindings↩"
  },
  "docs/misc.html": {
    "href": "docs/misc.html",
    "title": "Misc | DMediatR",
    "keywords": "Misc Lock: async reentrant locking DMEdiatR's certificate generation operates on a single external resource: the cert folder on the filesystem. During an operation, concurring certificate requests are blocked from access with a SemaphoreSlim.WaitAsync(). As certificate requests of different kind are implemented recursively in DMediatR, a recursive request hitting the lock would cause a deadlock. To avoid that, the locking messages carry with them a HasLocked set of locked SemaphoreSlim instances to avoid attempting to lock it twice.. The ILock extension encapsulates that logic. Its simplest form e.g. in the RootCertificateRequest handler of the RootCertificateProvider acquires the lock and releases it only if it was acquired before: var locked = await request.Lock(_fileLock, cancellationToken); try { return await RequestCertificate(request, cancellationToken); } finally { if (locked) _fileLock.Release(); } But the RenewRootCertificateNotification causes the dependent certificates to be renewed, too. This entails recursively publishing subsequent messages through MediatR. The HasLocked property has to be carried along manually, as in the RenewRootCertificateNotification handler: var locked = await notification.Lock(_fileLock, cancellationToken); try { if (File.Exists(FileNamePfx)) { _logger.LogDebug(\"{notification}: renew existing certificate\", notification.GetType().Name); var newcert = Generate(new RootCertificateRequest() { Renew = true, HasLocked = notification.HasLocked }); await Save(newcert, cancellationToken); // Only renewing the root certificate would leave the system // in an inconsistent state, thus transitively renew the // dependent child certificates immediately. await Remote.Mediator.Publish(new RenewIntermediateCertificateNotification() { HasLocked = notification.HasLocked }, cancellationToken); } } finally { if (locked) _fileLock.Release(); } Unexpected deadlocks are often caused by not handling down the HasLocked property. Remote certificate renewal firewall There is an optional RenewFirewallEnabled setting in the Certificate section of the DMediatR configuration which defaults to True. If the firewall is explicitly disabled, any node on the network can publish two RenewRootCertificateNotification messages in a row to bring down the entire network, which may not be desirable. Chicago-style functional unit testing is one use case for disabling the firewall. Another one might be, in a highly trusted IoT scenario, some kind of intrusion detection on a remote node that declares the entire network to be potentially compromised and thus requiring manual recertification. It would have been security by obscurity to just hide the recertification messages as internal: Any malicious client can construct a serialized (supposedly) internal-only object which the target node will happily deserialize and execute. This was the reason for not hiding these messages, but making them public along with the aforementioned firewall."
  },
  "docs/performance.html": {
    "href": "docs/performance.html",
    "title": "Performance | DMediatR",
    "keywords": "Performance All performance measurements are based on an on a Intel(R) Xeon(R) CPU E3-1270 v5 @ 3.60GHz. As a baseline the performance of the gRPC client and server of the official tutorial1 without SSL being run single-threaded for 5 seconds is about 3’400 requests/sec, configuration Debug vs. Release has virtually no effect. The performance of DMediatR currently is considerably lower at about 40 requests/sec for unknown reasons. The DMediatR PerformanceMeters uses Ping messages with a binary Payload property which gets mirrored on the Pong reply to measure both compression and decompression performance on the server. PerformanceMeter Test Setup The PerformanceMeter implements IRemote to talk to a remote DMediatRNode: [Category(\"Performance\")] [Remote(\"Ping\")] public class PerformanceMeter : IRemote { public Remote Remote { get; set; } = default!; This enables this simple SendRemote extension method for the first request which will negotiate SSL and only then establishes the connection: await this.SendRemote(new Ping(\"Connect\"), CancellationToken.None); The concrete Remote named \"Ping\" to connect to is configured in appsettings.RemotePing.json for the test fixture: \"Remotes\": { \"Ping\": { \"Host\": \"localhost\", \"Port\": 18007, \"OldPort\": 18008 } } The one \"Ping\" Remote section is identical to the configured \"Host\" section of the server. Zero Payload The 0 byte \"overhead only\" datapoint yields the mentioned 40 requests/sec when run with 8 parallel tasks for 5 seconds: GrpcRaw Text Data: 0 B/Sec Pings: 41.80/Sec Count:216 10 MB payload As the request overhead appears to be very high, the opposite extreme for the 10 MB payload datapoint is most relevant for evaluating the compression options. As the defaults are lower, the MaxMessageSize must globally be increased on both the client and the server: \"Grpc\": { \"MaxMessageSize\": 11000000 } The measurement is performed with three types of payloads: \"Bloated\" with a byte array consisting only of zeros (Zero), \"Compressible\" with textual content (Text) and \"Incompressible\" with only random bytes (Rand). The highest data throughput rate when using no compression is due to the fact that network bandwidth is not throttled. Without compression The 10 MB datapoint yields the following result when using no compression - gRPC seems to require a very long warm-up time: GrpcRaw Zero Data: 162.06 MB/Sec Pings: 15.46/Sec Count:80 GrpcRaw Text Data: 189.96 MB/Sec Pings: 18.12/Sec Count:96 GrpcRaw Rand Data: 196.03 MB/Sec Pings: 18.70/Sec Count:96 gzip Gzip with the grpc-accept-encoding header is enabled only server-side in appsettings.Gzip.json: \"Grpc\": { \"ResponseCompressionAlgorithm\": \"gzip\", \"ResponseCompressionLevel\": \"Optimal\" } GrpcGzip Zero Data: 144.06 MB/Sec Pings: 13.74/Sec Count:72 GrpcGzip Text Data: 89.34 MB/Sec Pings: 8.52/Sec Count:48 GrpcGzip Rand Data: 77.59 MB/Sec Pings: 7.40/Sec Count:40 LZ4 For using MessagePack's LZ4 compression instead of gRPC's Content-Encoding gzip, it must be configured on both sides, here the server in appsettings.Lz4BlockArray.json: \"Grpc\": { \"MessagePackCompression\": \"Lz4BlockArray\" } GrpcLz4 Zero Data: 291.77 MB/Sec Pings: 27.83/Sec Count:144 GrpcLz4 Text Data: 148.18 MB/Sec Pings: 14.13/Sec Count:72 GrpcLz4 Rand Data: 164.1 MB/Sec Pings: 15.65/Sec Count:80 Tutorial: Create a gRPC client and server in ASP.NET Core↩"
  },
  "docs/ping-pong-bing.html": {
    "href": "docs/ping-pong-bing.html",
    "title": "Ping-Pong and Bing | DMediatR",
    "keywords": "Ping-Pong and Bing MediatR itself uses the classes Ping and Pong1 as examples for IRequest request/response messages that are dispatched to a single handler. It also uses Ping for notification messages sent to multiple handlers. To distinguish it, DMediatR calls its built-in diagnostic INotification message Bing for \"Broadcast Ping\". In a distributed scenario, Ping gets sent to a specific remote node when configured so. Bing messages get transitively forwarded to all configured remotes and the respective remotes of the remote. It is the responsibility of the receiving INotificationHandler to decide whether that particular node is responsible for handling it. Hops Tracing When a Ping message is handled locally, its message string remains unchanged as in plain MediatR. But when it's handled remotely, it gets serialized and then deserialized at the receiving node and vice versa the corresponding Pong response. As they are based on the SerializationCountSerializer2, the number of hops the message has taken gets counted and appended to its message. When a message is received from a remote node, an information console log entry gets written with tracing information: Ping The receiving node of a Ping sent with: await Mediator.Send(new Ping(\"from NUnit\")); ... logs the number of hops, which is always 1 on the remote node: info: DMediatR.PingHandler[0] Ping 1 hops from NUnit ... and 2 on the calling node which also logs the name of the remote node: info: DMediatR.PingHandlerRemote[0] Pong 2 hops from NUnit via ClientCertifier Bing The receiving node of a multi-hop Bing sent with: await Mediator.Publish(new Bing(\"from NUnit\")); ... logs the number of hops and the nodes it has traversed: info: DMediatR.NotificationForwarder[0] Forwarding Bing 2 hops from NUnit via ClientCertifier via IntermediateCertifier MediatR Wiki↩ DMediatR Serializer↩"
  },
  "docs/serializer.html": {
    "href": "docs/serializer.html",
    "title": "Serializer | DMediatR",
    "keywords": "Serializer DMediatR uses typed binary serialization with pluggable custom serializers to transmit MediatR IRequest/IResponse messages over gRPC. Custom serializers for specific types can be added to the service collection. There are two internal custom serializers: One for serializing X509Certificate2 objects and one for tracing purposes counting the number of times the object has been serialized. Injecting Custom Serializers DMediatR leverages keyed dependency injection, introduced in .NET 8, to look up custom serializers for a particular type. This excerpt from the ServiceCollectionExtension registers, along with the required infrastructure, the two custom serializers SerializationCountSerializer and X509CertificateSerializer: services.TryAddSingleton<ISerializer, Serializer>(); services.TryAddSingleton<TypedSerializer>(); services.TryAddKeyedSingleton<ISerializer, BinarySerializer>(typeof(object)); // recursion base case for TypedSerializer services.TryAddKeyedSingleton<ISerializer, SerializationCountSerializer>(SerializationCountSerializer.Type); services.TryAddKeyedSingleton<ISerializer, X509CertificateSerializer>(X509CertificateSerializer.Type); services.TryAddKeyedSingleton<ISerializedInterface, ILockISerializedInterface>(typeof(ILock)); The ILockSerializedInterface is a special case, as it is declared for the ILock interface and not a concrete class, as multiple class hierarchies can implement the same interface. Custom Serializer Implementation Custom serializers inherit from the generic class CustomSerializer<T> with the class to register the serializer for as type parameter. They can override one or both of the Serialize and Deserialize methods. This can be used e.g. for dehydrating an object by nulling out non-serializable members before serialization and then for rehydrating it after deserialization by setting the members again with instances from DI on the destination node. The SerializationCountSerializer is used to trace the number of node hops a DMediatR message (IRequest or INotification) has taken by incrementing the object's Count property: namespace DMediatR { internal class SerializationCountSerializer : CustomSerializer<SerializationCountMessage> { public SerializationCountSerializer(IServiceProvider serviceProvider) : base(serviceProvider) { } public override byte[] Serialize(Type type, object obj) { CheckType(type); ((SerializationCountMessage)obj).Count++; return base.Serialize(type, obj, checkType: false); } } } The X509CertificateSerializer needs the injected password from configuration to decrypt the .pfx binary for deserialization and uses plain byte[] serialization for the data exported by the X509Certificate2 object: using Microsoft.Extensions.Options; using System.Security.Cryptography.X509Certificates; namespace DMediatR { internal class X509CertificateSerializer : CustomSerializer<X509Certificate2> { private readonly PasswordOptions _options; public X509CertificateSerializer(IServiceProvider serviceProvider, IOptions<PasswordOptions> options) : base(serviceProvider) { _options = options.Value; } public override byte[] Serialize(Type type, object obj) { CheckType(type); var cert = (X509Certificate2)obj; var bytes = cert.Export(X509ContentType.Pkcs12, _options.Password); return base.Serialize(typeof(byte[]), bytes, checkType: false); } public override object Deserialize(Type type, byte[] bytes) { CheckType(type); var rawData = (byte[])base.Deserialize(typeof(byte[]), bytes, checkType: false); var cert = new X509Certificate2(rawData, _options.Password, X509KeyStorageFlags.Exportable); return cert; } } } When de- resp. rehydrating is required by an interface requiring a non-serializable member, a CustomSerializer<T> based on a class hierarchy is not appropriate, as interface custom serialization is orthogonal to the class hierarchy: Serializable classes can implement multiple interfaces, which in turn require e.g. specific members which must be dehydrated before serialization for each interface implemented. The ILockSerializedInterface is defined for the interface ILock and overrides the two Dehydrate/Rehydrate hooks called by the general Serializer class: namespace DMediatR { public class ILockISerializedInterface : SerializedInterface<ILock> { protected override void Dehydrate(ILock obj) { obj.HasLocked = null; // SemaphoreSlim is not serializable } protected override void Rehydrate(ILock obj) { obj.HasLocked = []; } } } Serialization Classes Context for serializing Ping objects This diagram exemplifies the context for serializing of the Ping class deriving from SerializationCountSerializer: MessagePackSerializer Typeless Serialize(obj) Deserialize(bytes) ISerializer Serialize(obj) Serialize(type, obj) Deserialize<T>(bytes) Deserialize(type, bytes) Serializer _typedSerializer Serialize(obj) Serialize(type, obj) Deserialize<T>(bytes) Deserialize(type, bytes) BinarySerializer Serialize(obj) Serialize(type, obj) Deserialize<T>(bytes) Deserialize(type, bytes) TypedSerializer _serviceProvider Serialize(type, obj) Deserialize(type, bytes) GetSerializer(type) CustomSerializer T Type CheckType(givenType) SerializationCountSerializer Serialize(type, obj) IRequest TResponse INotification SerializationCountMessage Count Ping Message Pong Message Bing Message Serialization Sequence for Ping The corresponding sequence diagram hints at the serialization class dispatch mechanism: Serializer TypedSerializer SerializationCountSerializer BinarySerializer RemoteExtension Serializer TypedSerializer SerializationCountSerializer BinarySerializer RemoteExtension RemoteExtension Serializer Serializer TypedSerializer TypedSerializer SerializationCountSerializer SerializationCountSerializer BinarySerializer BinarySerializer Serializer TypedSerializer SerializationCountSerializer BinarySerializer Serialize(obj) Serialize(type, obj) Serialize(type, obj) GetSerializer(type) Serialize(type, obj) GetSerializer(type) Serialize(type, obj) Serialize(type, obj) GetSerializer(type) Serialize(type, obj) byte[] byte[] byte[] byte[]"
  },
  "index.html": {
    "href": "index.html",
    "title": "DMediatR | DMediatR",
    "keywords": "DMediatR Distributed MediatR over gRPC with auto-renewing X509 client certificate TLS."
  }
}