{
  "api/DMediatR.CertificateOptions.html": {
    "href": "api/DMediatR.CertificateOptions.html",
    "title": "Class CertificateOptions | DMediatR",
    "keywords": "Class CertificateOptions Namespace DMediatR Assembly DMediatR.dll X509 certificate specification, including the password. public sealed class CertificateOptions Inheritance object CertificateOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields SectionName public const string SectionName = \"Certificate\" Field Value string Properties FilePath [Required] public string? FilePath { get; set; } Property Value string FilenamePrefix [Required] public string? FilenamePrefix { get; set; } Property Value string HostName [Required] public string? HostName { get; set; } Property Value string Password [Required] public string? Password { get; set; } Property Value string RenewBeforeExpirationDays [Required] [Range(typeof(int), \"0\", \"3650\")] public int? RenewBeforeExpirationDays { get; set; } Property Value int? ValidDays [Required] [Range(typeof(int), \"1\", \"3650\")] public int? ValidDays { get; set; } Property Value int?"
  },
  "api/DMediatR.CertificateProvider.html": {
    "href": "api/DMediatR.CertificateProvider.html",
    "title": "Class CertificateProvider | DMediatR",
    "keywords": "Class CertificateProvider Namespace DMediatR Assembly DMediatR.dll public abstract class CertificateProvider Inheritance object CertificateProvider Derived ChainedCertificateProvider RootCertificateProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CertificateProvider(IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate) protected CertificateProvider(IOptions<HostOptions> hostOptions, IOptions<CertificateOptions> certOptions, IOptions<RemotesOptions> remotesOptions, IMediator mediator, ISerializer serializer, IGrpcChannelPool channel, ImportExportCertificate ioCert) Parameters hostOptions IOptions<HostOptions> certOptions IOptions<CertificateOptions> remotesOptions IOptions<RemotesOptions> mediator IMediator serializer ISerializer channel IGrpcChannelPool ioCert ImportExportCertificate Fields _certOptions protected readonly CertificateOptions _certOptions Field Value CertificateOptions _grpcChannelProvider protected readonly IGrpcChannelPool _grpcChannelProvider Field Value IGrpcChannelPool _hostOptions protected readonly HostOptions _hostOptions Field Value HostOptions _importExportCertificate protected readonly ImportExportCertificate _importExportCertificate Field Value ImportExportCertificate _mediator protected readonly IMediator _mediator Field Value IMediator _remotes protected readonly RemotesOptions _remotes Field Value RemotesOptions _serializer protected readonly ISerializer _serializer Field Value ISerializer Properties ChannelPool public IGrpcChannelPool ChannelPool { get; } Property Value IGrpcChannelPool Mediator public IMediator Mediator { get; } Property Value IMediator Options public CertificateOptions Options { get; } Property Value CertificateOptions RemoteName protected string? RemoteName { get; } Property Value string Remotes public RemotesOptions Remotes { get; } Property Value RemotesOptions Serializer public ISerializer Serializer { get; } Property Value ISerializer Methods TryLoad(CancellationToken) public Task<(bool, X509Certificate2?)> TryLoad(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task<(bool, X509Certificate2)>"
  },
  "api/DMediatR.CertificateRequest.html": {
    "href": "api/DMediatR.CertificateRequest.html",
    "title": "Class CertificateRequest | DMediatR",
    "keywords": "Class CertificateRequest Namespace DMediatR Assembly DMediatR.dll public abstract class CertificateRequest : IRequest<X509Certificate2>, IBaseRequest Inheritance object CertificateRequest Implements IRequest<X509Certificate2> IBaseRequest Derived ChainedCertificateRequest RootCertificateRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IRequestExtension.GetResponseType(IBaseRequest)"
  },
  "api/DMediatR.Certificates.html": {
    "href": "api/DMediatR.Certificates.html",
    "title": "Class Certificates | DMediatR",
    "keywords": "Class Certificates Namespace DMediatR Assembly DMediatR.dll Utility to create a valid initial X509 certificate chain offline to be distributed to all gRPC nodes. public class Certificates Inheritance object Certificates Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Certificates(IServiceProvider) public Certificates(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Methods SetUpInitialChain() Generate or renew the certificate chain by directly using the local services public void SetUpInitialChain() SetUpInitialChainAsync(CancellationToken) Generate or renew the certificate chain by directly using the local services public Task SetUpInitialChainAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task"
  },
  "api/DMediatR.ChainedCertificateProvider.html": {
    "href": "api/DMediatR.ChainedCertificateProvider.html",
    "title": "Class ChainedCertificateProvider | DMediatR",
    "keywords": "Class ChainedCertificateProvider Namespace DMediatR Assembly DMediatR.dll public abstract class ChainedCertificateProvider : CertificateProvider Inheritance object CertificateProvider ChainedCertificateProvider Derived ClientCertificateProvider IntermediateCertificateProvider ServerCertificateProvider Inherited Members CertificateProvider._hostOptions CertificateProvider._certOptions CertificateProvider._remotes CertificateProvider._mediator CertificateProvider._serializer CertificateProvider._grpcChannelProvider CertificateProvider._importExportCertificate CertificateProvider.Mediator CertificateProvider.Serializer CertificateProvider.ChannelPool CertificateProvider.Options CertificateProvider.Remotes CertificateProvider.RemoteName CertificateProvider.TryLoad(CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChainedCertificateProvider(IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate) public ChainedCertificateProvider(IOptions<HostOptions> hostOptions, IOptions<CertificateOptions> certOptions, IOptions<RemotesOptions> remotesOptions, IMediator mediator, ISerializer serializer, IGrpcChannelPool channel, ImportExportCertificate ioCert) Parameters hostOptions IOptions<HostOptions> certOptions IOptions<CertificateOptions> remotesOptions IOptions<RemotesOptions> mediator IMediator serializer ISerializer channel IGrpcChannelPool ioCert ImportExportCertificate Methods Generate(ChainedCertificateRequest, CancellationToken) protected Task<X509Certificate2> Generate(ChainedCertificateRequest request, CancellationToken cancellationToken) Parameters request ChainedCertificateRequest cancellationToken CancellationToken Returns Task<X509Certificate2> RequestCertificate(ChainedCertificateRequest, CancellationToken) protected Task<X509Certificate2> RequestCertificate(ChainedCertificateRequest request, CancellationToken cancellationToken) Parameters request ChainedCertificateRequest cancellationToken CancellationToken Returns Task<X509Certificate2>"
  },
  "api/DMediatR.ChainedCertificateRequest.html": {
    "href": "api/DMediatR.ChainedCertificateRequest.html",
    "title": "Class ChainedCertificateRequest | DMediatR",
    "keywords": "Class ChainedCertificateRequest Namespace DMediatR Assembly DMediatR.dll public abstract class ChainedCertificateRequest : CertificateRequest, IRequest<X509Certificate2>, IBaseRequest Inheritance object CertificateRequest ChainedCertificateRequest Implements IRequest<X509Certificate2> IBaseRequest Derived ClientCertificateRequest IntermediateCertificateRequest ServerCertificateRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IRequestExtension.GetResponseType(IBaseRequest) Properties ParentCertificateRequest public abstract CertificateRequest ParentCertificateRequest { get; } Property Value CertificateRequest"
  },
  "api/DMediatR.ClientCertificateProvider.html": {
    "href": "api/DMediatR.ClientCertificateProvider.html",
    "title": "Class ClientCertificateProvider | DMediatR",
    "keywords": "Class ClientCertificateProvider Namespace DMediatR Assembly DMediatR.dll [Local(\"ClientCertifier\")] public class ClientCertificateProvider : ChainedCertificateProvider, IRequestHandler<ClientCertificateRequest, X509Certificate2>, INotificationHandler<RenewClientCertificateNotification> Inheritance object CertificateProvider ChainedCertificateProvider ClientCertificateProvider Implements IRequestHandler<ClientCertificateRequest, X509Certificate2> INotificationHandler<RenewClientCertificateNotification> Derived ClientCertificateProviderRemote Inherited Members ChainedCertificateProvider.RequestCertificate(ChainedCertificateRequest, CancellationToken) ChainedCertificateProvider.Generate(ChainedCertificateRequest, CancellationToken) CertificateProvider._hostOptions CertificateProvider._certOptions CertificateProvider._remotes CertificateProvider._mediator CertificateProvider._serializer CertificateProvider._grpcChannelProvider CertificateProvider._importExportCertificate CertificateProvider.Mediator CertificateProvider.Serializer CertificateProvider.ChannelPool CertificateProvider.Options CertificateProvider.Remotes CertificateProvider.RemoteName CertificateProvider.TryLoad(CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ClientCertificateProvider(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate) public ClientCertificateProvider(CreateCertificatesClientServerAuth createCert, IOptions<HostOptions> hostOptions, IOptions<CertificateOptions> certOptions, IOptions<RemotesOptions> remotesOptions, IMediator mediator, ISerializer serializer, IGrpcChannelPool channel, ImportExportCertificate ioCert) Parameters createCert CreateCertificatesClientServerAuth hostOptions IOptions<HostOptions> certOptions IOptions<CertificateOptions> remotesOptions IOptions<RemotesOptions> mediator IMediator serializer ISerializer channel IGrpcChannelPool ioCert ImportExportCertificate Methods Handle(ClientCertificateRequest, CancellationToken) Handles a request public virtual Task<X509Certificate2> Handle(ClientCertificateRequest request, CancellationToken cancellationToken) Parameters request ClientCertificateRequest The request cancellationToken CancellationToken Cancellation token Returns Task<X509Certificate2> Response from the request"
  },
  "api/DMediatR.ClientCertificateProviderRemote.html": {
    "href": "api/DMediatR.ClientCertificateProviderRemote.html",
    "title": "Class ClientCertificateProviderRemote | DMediatR",
    "keywords": "Class ClientCertificateProviderRemote Namespace DMediatR Assembly DMediatR.dll [Remote(\"ClientCertifier\")] public class ClientCertificateProviderRemote : ClientCertificateProvider, IRequestHandler<ClientCertificateRequest, X509Certificate2>, INotificationHandler<RenewClientCertificateNotification>, IRemote Inheritance object CertificateProvider ChainedCertificateProvider ClientCertificateProvider ClientCertificateProviderRemote Implements IRequestHandler<ClientCertificateRequest, X509Certificate2> INotificationHandler<RenewClientCertificateNotification> IRemote Inherited Members ChainedCertificateProvider.RequestCertificate(ChainedCertificateRequest, CancellationToken) ChainedCertificateProvider.Generate(ChainedCertificateRequest, CancellationToken) CertificateProvider._hostOptions CertificateProvider._certOptions CertificateProvider._remotes CertificateProvider._mediator CertificateProvider._serializer CertificateProvider._grpcChannelProvider CertificateProvider._importExportCertificate CertificateProvider.Mediator CertificateProvider.Serializer CertificateProvider.ChannelPool CertificateProvider.Options CertificateProvider.Remotes CertificateProvider.RemoteName CertificateProvider.TryLoad(CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods RemoteExtension.PublishRemote(IRemote, INotification, CancellationToken) RemoteExtension.SendRemote<TResponse>(IRemote, IRequest<TResponse>, CancellationToken) Constructors ClientCertificateProviderRemote(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate) public ClientCertificateProviderRemote(CreateCertificatesClientServerAuth createCert, IOptions<HostOptions> hostOptions, IOptions<CertificateOptions> certOptions, IOptions<RemotesOptions> remotesOptions, IMediator mediator, ISerializer serializer, IGrpcChannelPool channel, ImportExportCertificate ioCert) Parameters createCert CreateCertificatesClientServerAuth hostOptions IOptions<HostOptions> certOptions IOptions<CertificateOptions> remotesOptions IOptions<RemotesOptions> mediator IMediator serializer ISerializer channel IGrpcChannelPool ioCert ImportExportCertificate Methods Handle(ClientCertificateRequest, CancellationToken) Handles a request public override Task<X509Certificate2> Handle(ClientCertificateRequest request, CancellationToken cancellationToken) Parameters request ClientCertificateRequest The request cancellationToken CancellationToken Cancellation token Returns Task<X509Certificate2> Response from the request"
  },
  "api/DMediatR.ClientCertificateRequest.html": {
    "href": "api/DMediatR.ClientCertificateRequest.html",
    "title": "Class ClientCertificateRequest | DMediatR",
    "keywords": "Class ClientCertificateRequest Namespace DMediatR Assembly DMediatR.dll public class ClientCertificateRequest : ChainedCertificateRequest, IRequest<X509Certificate2>, IBaseRequest Inheritance object CertificateRequest ChainedCertificateRequest ClientCertificateRequest Implements IRequest<X509Certificate2> IBaseRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IRequestExtension.GetResponseType(IBaseRequest) Properties ParentCertificateRequest public override CertificateRequest ParentCertificateRequest { get; } Property Value CertificateRequest"
  },
  "api/DMediatR.Dto.html": {
    "href": "api/DMediatR.Dto.html",
    "title": "Class Dto | DMediatR",
    "keywords": "Class Dto Namespace DMediatR Assembly DMediatR.dll One data transfer object class for any type. [DataContract] public class Dto Inheritance object Dto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Bytes The binary serialized object. [DataMember(Order = 2)] public byte[] Bytes { get; set; } Property Value byte[] Type The type of the serialized object. [DataMember(Order = 1)] public Type Type { get; set; } Property Value Type"
  },
  "api/DMediatR.DtoService.html": {
    "href": "api/DMediatR.DtoService.html",
    "title": "Class DtoService | DMediatR",
    "keywords": "Class DtoService Namespace DMediatR Assembly DMediatR.dll Dto consumer to be used in the gRPC server. public class DtoService : IDtoService Inheritance object DtoService Implements IDtoService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DtoService(IServiceProvider, IMediator, ISerializer) public DtoService(IServiceProvider serviceProvider, IMediator mediator, ISerializer serializer) Parameters serviceProvider IServiceProvider mediator IMediator serializer ISerializer Methods PublishAsync(Dto, CallContext) Send the deserialized notification to the local handlers and to all configured remotws. public Task PublishAsync(Dto notificationDto, CallContext context = default) Parameters notificationDto Dto context CallContext Returns Task SendAsync(Dto, CallContext) Send the deserialized request to the local handler. public Task<Dto> SendAsync(Dto requestDto, CallContext context = default) Parameters requestDto Dto context CallContext Returns Task<Dto>"
  },
  "api/DMediatR.GrpcChannelPool.html": {
    "href": "api/DMediatR.GrpcChannelPool.html",
    "title": "Class GrpcChannelPool | DMediatR",
    "keywords": "Class GrpcChannelPool Namespace DMediatR Assembly DMediatR.dll Implements a cache for long-lived gRPC channels, one instance per address. public class GrpcChannelPool : IGrpcChannelPool, IDisposable Inheritance object GrpcChannelPool Implements IGrpcChannelPool IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ForAddress(string, HttpClientHandler) public GrpcChannel ForAddress(string address, HttpClientHandler handler) Parameters address string handler HttpClientHandler Returns GrpcChannel Remove(string) public void Remove(string address) Parameters address string"
  },
  "api/DMediatR.GrpcPort.html": {
    "href": "api/DMediatR.GrpcPort.html",
    "title": "Enum GrpcPort | DMediatR",
    "keywords": "Enum GrpcPort Namespace DMediatR Assembly DMediatR.dll Port resp. SSL certificate to use. public enum GrpcPort Fields UseDefault = 0 Use the configured default port with the current certificate. UseRenew = 1 Use the configured OldPort with the old certificate."
  },
  "api/DMediatR.GrpcServer.html": {
    "href": "api/DMediatR.GrpcServer.html",
    "title": "Class GrpcServer | DMediatR",
    "keywords": "Class GrpcServer Namespace DMediatR Assembly DMediatR.dll Utility for creating a gRPC service WebApplicationBuilder and WebApplication in a DMediatR node. public static class GrpcServer Inheritance object GrpcServer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateWebApp(WebApplicationBuilder, GrpcPort) public static WebApplication CreateWebApp(WebApplicationBuilder builder, GrpcPort usePort = GrpcPort.UseDefault) Parameters builder WebApplicationBuilder usePort GrpcPort Returns WebApplication CreateWebAppBuilder(string[]) public static WebApplicationBuilder CreateWebAppBuilder(string[] args) Parameters args string[] Returns WebApplicationBuilder RunRestartWebAppAsync(string[], GrpcPort, CancellationToken) Build and run the WebApplication, repeat after it was stopped with IHostApplicationLifetime.StopApplication() public static Task RunRestartWebAppAsync(string[] args, GrpcPort usePort, CancellationToken cancellationToken) Parameters args string[] usePort GrpcPort cancellationToken CancellationToken Returns Task"
  },
  "api/DMediatR.HostOptions.html": {
    "href": "api/DMediatR.HostOptions.html",
    "title": "Class HostOptions | DMediatR",
    "keywords": "Class HostOptions Namespace DMediatR Assembly DMediatR.dll Specification of a DMediatR node host. Also used for specifying the remotes in RemotesOptions. public sealed class HostOptions Inheritance object HostOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields SectionName public const string SectionName = \"Host\" Field Value string Properties GrpcPort Programmatically set during WebApplication configuration, not bound from config public GrpcPort GrpcPort { get; set; } Property Value GrpcPort Host [Required] public string? Host { get; set; } Property Value string OldPort [Required] [Range(typeof(int), \"1\", \"65535\")] public string? OldPort { get; set; } Property Value string Port [Required] [Range(typeof(int), \"1\", \"65535\")] public string? Port { get; set; } Property Value string"
  },
  "api/DMediatR.ICorrelatedNotification.html": {
    "href": "api/DMediatR.ICorrelatedNotification.html",
    "title": "Interface ICorrelatedNotification | DMediatR",
    "keywords": "Interface ICorrelatedNotification Namespace DMediatR Assembly DMediatR.dll Multiple DMediatR nodes can have cyclic dependencies or there might be indirect diamonds in the configured dependency graph. In such cases a single node receives and would forward the same Notification in multiple duplicate copies. To handle them only once as in a monolith correlate these remote Notifications with a Guid. public interface ICorrelatedNotification : INotification Properties CorrelationGuid To be implemented as public Guid CorrelationGuid { get; init; } = Guid.NewGuid(); Guid CorrelationGuid { get; init; } Property Value Guid"
  },
  "api/DMediatR.IDtoService.html": {
    "href": "api/DMediatR.IDtoService.html",
    "title": "Interface IDtoService | DMediatR",
    "keywords": "Interface IDtoService Namespace DMediatR Assembly DMediatR.dll Code-first gRPC service for sending a MediatR IRequest to the remote IRequestHandler. [ServiceContract] public interface IDtoService Methods PublishAsync(Dto, CallContext) [OperationContract] Task PublishAsync(Dto notification, CallContext context = default) Parameters notification Dto context CallContext Returns Task SendAsync(Dto, CallContext) [OperationContract] Task<Dto> SendAsync(Dto request, CallContext context = default) Parameters request Dto context CallContext Returns Task<Dto>"
  },
  "api/DMediatR.IGrpcChannelPool.html": {
    "href": "api/DMediatR.IGrpcChannelPool.html",
    "title": "Interface IGrpcChannelPool | DMediatR",
    "keywords": "Interface IGrpcChannelPool Namespace DMediatR Assembly DMediatR.dll Interface for injecting alternate gRPC channel pool implementations. public interface IGrpcChannelPool : IDisposable Inherited Members IDisposable.Dispose() Methods ForAddress(string, HttpClientHandler) GrpcChannel ForAddress(string address, HttpClientHandler handler) Parameters address string handler HttpClientHandler Returns GrpcChannel Remove(string) void Remove(string address) Parameters address string"
  },
  "api/DMediatR.IRemote.html": {
    "href": "api/DMediatR.IRemote.html",
    "title": "Interface IRemote | DMediatR",
    "keywords": "Interface IRemote Namespace DMediatR Assembly DMediatR.dll Inherit from this interface to add the SendRemote extension. public interface IRemote Extension Methods RemoteExtension.PublishRemote(IRemote, INotification, CancellationToken) RemoteExtension.SendRemote<TResponse>(IRemote, IRequest<TResponse>, CancellationToken)"
  },
  "api/DMediatR.IRequestExtension.html": {
    "href": "api/DMediatR.IRequestExtension.html",
    "title": "Class IRequestExtension | DMediatR",
    "keywords": "Class IRequestExtension Namespace DMediatR Assembly DMediatR.dll public static class IRequestExtension Inheritance object IRequestExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetResponseType(IBaseRequest) public static Type? GetResponseType(this IBaseRequest request) Parameters request IBaseRequest Returns Type"
  },
  "api/DMediatR.ISerializer.html": {
    "href": "api/DMediatR.ISerializer.html",
    "title": "Interface ISerializer | DMediatR",
    "keywords": "Interface ISerializer Namespace DMediatR Assembly DMediatR.dll Interface for injecting alternate serializer implementations. public interface ISerializer Methods Deserialize(Type, byte[]) object Deserialize(Type type, byte[] bytes) Parameters type Type bytes byte[] Returns object Deserialize<T>(byte[]) T Deserialize<T>(byte[] bytes) Parameters bytes byte[] Returns T Type Parameters T Deserialize<T>(Type, byte[]) T Deserialize<T>(Type type, byte[] bytes) Parameters type Type bytes byte[] Returns T Type Parameters T Serialize(object) byte[] Serialize(object obj) Parameters obj object Returns byte[]"
  },
  "api/DMediatR.IntermediateCertificateProvider.html": {
    "href": "api/DMediatR.IntermediateCertificateProvider.html",
    "title": "Class IntermediateCertificateProvider | DMediatR",
    "keywords": "Class IntermediateCertificateProvider Namespace DMediatR Assembly DMediatR.dll [Local(\"IntermediateCertifier\")] public class IntermediateCertificateProvider : ChainedCertificateProvider, IRequestHandler<IntermediateCertificateRequest, X509Certificate2>, INotificationHandler<RenewIntermediateCertificateNotification> Inheritance object CertificateProvider ChainedCertificateProvider IntermediateCertificateProvider Implements IRequestHandler<IntermediateCertificateRequest, X509Certificate2> INotificationHandler<RenewIntermediateCertificateNotification> Derived IntermediateCertificateProviderRemote Inherited Members ChainedCertificateProvider.RequestCertificate(ChainedCertificateRequest, CancellationToken) ChainedCertificateProvider.Generate(ChainedCertificateRequest, CancellationToken) CertificateProvider._hostOptions CertificateProvider._certOptions CertificateProvider._remotes CertificateProvider._mediator CertificateProvider._serializer CertificateProvider._grpcChannelProvider CertificateProvider._importExportCertificate CertificateProvider.Mediator CertificateProvider.Serializer CertificateProvider.ChannelPool CertificateProvider.Options CertificateProvider.Remotes CertificateProvider.RemoteName CertificateProvider.TryLoad(CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntermediateCertificateProvider(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate) public IntermediateCertificateProvider(CreateCertificatesClientServerAuth createCert, IOptions<HostOptions> hostOptions, IOptions<CertificateOptions> certOptions, IOptions<RemotesOptions> remotesOptions, IMediator mediator, ISerializer serializer, IGrpcChannelPool channel, ImportExportCertificate ioCert) Parameters createCert CreateCertificatesClientServerAuth hostOptions IOptions<HostOptions> certOptions IOptions<CertificateOptions> remotesOptions IOptions<RemotesOptions> mediator IMediator serializer ISerializer channel IGrpcChannelPool ioCert ImportExportCertificate Methods Handle(IntermediateCertificateRequest, CancellationToken) Handles a request public virtual Task<X509Certificate2> Handle(IntermediateCertificateRequest request, CancellationToken cancellationToken) Parameters request IntermediateCertificateRequest The request cancellationToken CancellationToken Cancellation token Returns Task<X509Certificate2> Response from the request"
  },
  "api/DMediatR.IntermediateCertificateProviderRemote.html": {
    "href": "api/DMediatR.IntermediateCertificateProviderRemote.html",
    "title": "Class IntermediateCertificateProviderRemote | DMediatR",
    "keywords": "Class IntermediateCertificateProviderRemote Namespace DMediatR Assembly DMediatR.dll [Remote(\"IntermediateCertifier\")] public class IntermediateCertificateProviderRemote : IntermediateCertificateProvider, IRequestHandler<IntermediateCertificateRequest, X509Certificate2>, INotificationHandler<RenewIntermediateCertificateNotification>, IRemote Inheritance object CertificateProvider ChainedCertificateProvider IntermediateCertificateProvider IntermediateCertificateProviderRemote Implements IRequestHandler<IntermediateCertificateRequest, X509Certificate2> INotificationHandler<RenewIntermediateCertificateNotification> IRemote Inherited Members ChainedCertificateProvider.RequestCertificate(ChainedCertificateRequest, CancellationToken) ChainedCertificateProvider.Generate(ChainedCertificateRequest, CancellationToken) CertificateProvider._hostOptions CertificateProvider._certOptions CertificateProvider._remotes CertificateProvider._mediator CertificateProvider._serializer CertificateProvider._grpcChannelProvider CertificateProvider._importExportCertificate CertificateProvider.Mediator CertificateProvider.Serializer CertificateProvider.ChannelPool CertificateProvider.Options CertificateProvider.Remotes CertificateProvider.RemoteName CertificateProvider.TryLoad(CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods RemoteExtension.PublishRemote(IRemote, INotification, CancellationToken) RemoteExtension.SendRemote<TResponse>(IRemote, IRequest<TResponse>, CancellationToken) Constructors IntermediateCertificateProviderRemote(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate) public IntermediateCertificateProviderRemote(CreateCertificatesClientServerAuth createCert, IOptions<HostOptions> hostOptions, IOptions<CertificateOptions> certOptions, IOptions<RemotesOptions> remotesOptions, IMediator mediator, ISerializer serializer, IGrpcChannelPool channel, ImportExportCertificate ioCert) Parameters createCert CreateCertificatesClientServerAuth hostOptions IOptions<HostOptions> certOptions IOptions<CertificateOptions> remotesOptions IOptions<RemotesOptions> mediator IMediator serializer ISerializer channel IGrpcChannelPool ioCert ImportExportCertificate Methods Handle(IntermediateCertificateRequest, CancellationToken) Handles a request public override Task<X509Certificate2> Handle(IntermediateCertificateRequest request, CancellationToken cancellationToken) Parameters request IntermediateCertificateRequest The request cancellationToken CancellationToken Cancellation token Returns Task<X509Certificate2> Response from the request"
  },
  "api/DMediatR.IntermediateCertificateRequest.html": {
    "href": "api/DMediatR.IntermediateCertificateRequest.html",
    "title": "Class IntermediateCertificateRequest | DMediatR",
    "keywords": "Class IntermediateCertificateRequest Namespace DMediatR Assembly DMediatR.dll public class IntermediateCertificateRequest : ChainedCertificateRequest, IRequest<X509Certificate2>, IBaseRequest Inheritance object CertificateRequest ChainedCertificateRequest IntermediateCertificateRequest Implements IRequest<X509Certificate2> IBaseRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IRequestExtension.GetResponseType(IBaseRequest) Properties ParentCertificateRequest public override CertificateRequest ParentCertificateRequest { get; } Property Value CertificateRequest"
  },
  "api/DMediatR.LocalAttribute.html": {
    "href": "api/DMediatR.LocalAttribute.html",
    "title": "Class LocalAttribute | DMediatR",
    "keywords": "Class LocalAttribute Namespace DMediatR Assembly DMediatR.dll Marks the handlers in this class as local double of a [Remote] class. [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public class LocalAttribute : Attribute Inheritance object Attribute LocalAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LocalAttribute(string) public LocalAttribute(string remoteName) Parameters remoteName string Methods RemoteName(Type) The reference name matching the remote double of the class. public static string? RemoteName(Type t) Parameters t Type Returns string"
  },
  "api/DMediatR.MemoryCacheGuidExtension.html": {
    "href": "api/DMediatR.MemoryCacheGuidExtension.html",
    "title": "Class MemoryCacheGuidExtension | DMediatR",
    "keywords": "Class MemoryCacheGuidExtension Namespace DMediatR Assembly DMediatR.dll public static class MemoryCacheGuidExtension Inheritance object MemoryCacheGuidExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HaveSeen(IMemoryCache, Guid) public static bool HaveSeen(this IMemoryCache cache, Guid guid) Parameters cache IMemoryCache guid Guid Returns bool"
  },
  "api/DMediatR.Ping.html": {
    "href": "api/DMediatR.Ping.html",
    "title": "Class Ping | DMediatR",
    "keywords": "Class Ping Namespace DMediatR Assembly DMediatR.dll Simple MediatR IRequest for diagnosis. public class Ping : IRequest<Pong>, IBaseRequest Inheritance object Ping Implements IRequest<Pong> IBaseRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Ping() public Ping() Ping(string) public Ping(string message) Parameters message string Properties Message public string? Message { get; set; } Property Value string"
  },
  "api/DMediatR.Pong.html": {
    "href": "api/DMediatR.Pong.html",
    "title": "Class Pong | DMediatR",
    "keywords": "Class Pong Namespace DMediatR Assembly DMediatR.dll Response to a Ping request. Echoes the Ping message and the ASPNETCORE_ENVIRONMENT of the responding Node if present. public class Pong Inheritance object Pong Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Message public string? Message { get; set; } Property Value string"
  },
  "api/DMediatR.RemoteAttribute.html": {
    "href": "api/DMediatR.RemoteAttribute.html",
    "title": "Class RemoteAttribute | DMediatR",
    "keywords": "Class RemoteAttribute Namespace DMediatR Assembly DMediatR.dll Marks the handlers in this class as calling a gRPC endpoint (as opposed to calling locally). [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public class RemoteAttribute : Attribute Inheritance object Attribute RemoteAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RemoteAttribute(string) public RemoteAttribute(string name) Parameters name string Methods Name(Type) The reference name to be used in the \"Remotes\" configuration section. public static string? Name(Type t) Parameters t Type Returns string"
  },
  "api/DMediatR.RemoteConfigExtension.html": {
    "href": "api/DMediatR.RemoteConfigExtension.html",
    "title": "Class RemoteConfigExtension | DMediatR",
    "keywords": "Class RemoteConfigExtension Namespace DMediatR Assembly DMediatR.dll public static class RemoteConfigExtension Inheritance object RemoteConfigExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SelectLocalRemote(IConfiguration, Type) public static bool SelectLocalRemote(this IConfiguration cfg, Type t) Parameters cfg IConfiguration t Type Returns bool"
  },
  "api/DMediatR.RemoteExtension.html": {
    "href": "api/DMediatR.RemoteExtension.html",
    "title": "Class RemoteExtension | DMediatR",
    "keywords": "Class RemoteExtension Namespace DMediatR Assembly DMediatR.dll IRemote extension methods for connecting to a Dto gRPC service from a MediatR handler. public static class RemoteExtension Inheritance object RemoteExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PublishRemote(IRemote, INotification, CancellationToken) Publish a MediatR INotification to a remote node. public static Task PublishRemote(this IRemote provider, INotification notification, CancellationToken cancellationToken) Parameters provider IRemote The class providing a MediatR handler notification INotification The MediatR INotification. cancellationToken CancellationToken Returns Task SendRemote<TResponse>(IRemote, IRequest<TResponse>, CancellationToken) Send a MediatR IRequest to a remote node and receive a TResponse. public static Task<TResponse> SendRemote<TResponse>(this IRemote provider, IRequest<TResponse> request, CancellationToken cancellationToken) Parameters provider IRemote The class providing a MediatR handler. request IRequest<TResponse> The MediatR IRequest. cancellationToken CancellationToken Returns Task<TResponse> The MediatR TResponse. Type Parameters TResponse"
  },
  "api/DMediatR.RemotesOptions.html": {
    "href": "api/DMediatR.RemotesOptions.html",
    "title": "Class RemotesOptions | DMediatR",
    "keywords": "Class RemotesOptions Namespace DMediatR Assembly DMediatR.dll Dictionary of HostOptions declaring the configured remotes for that DMediatR node. public sealed class RemotesOptions : Dictionary<string, HostOptions>, IDictionary<string, HostOptions>, ICollection<KeyValuePair<string, HostOptions>>, IReadOnlyDictionary<string, HostOptions>, IReadOnlyCollection<KeyValuePair<string, HostOptions>>, IEnumerable<KeyValuePair<string, HostOptions>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable Inheritance object Dictionary<string, HostOptions> RemotesOptions Implements IDictionary<string, HostOptions> ICollection<KeyValuePair<string, HostOptions>> IReadOnlyDictionary<string, HostOptions> IReadOnlyCollection<KeyValuePair<string, HostOptions>> IEnumerable<KeyValuePair<string, HostOptions>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable Inherited Members Dictionary<string, HostOptions>.Add(string, HostOptions) Dictionary<string, HostOptions>.Clear() Dictionary<string, HostOptions>.ContainsKey(string) Dictionary<string, HostOptions>.ContainsValue(HostOptions) Dictionary<string, HostOptions>.EnsureCapacity(int) Dictionary<string, HostOptions>.GetEnumerator() Dictionary<string, HostOptions>.OnDeserialization(object) Dictionary<string, HostOptions>.Remove(string) Dictionary<string, HostOptions>.Remove(string, out HostOptions) Dictionary<string, HostOptions>.TrimExcess() Dictionary<string, HostOptions>.TrimExcess(int) Dictionary<string, HostOptions>.TryAdd(string, HostOptions) Dictionary<string, HostOptions>.TryGetValue(string, out HostOptions) Dictionary<string, HostOptions>.Comparer Dictionary<string, HostOptions>.Count Dictionary<string, HostOptions>.this[string] Dictionary<string, HostOptions>.Keys Dictionary<string, HostOptions>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields SectionName public const string SectionName = \"Remotes\" Field Value string Properties ValidatedValues [ValidateEnumeratedItems] public IEnumerable<HostOptions> ValidatedValues { get; } Property Value IEnumerable<HostOptions>"
  },
  "api/DMediatR.RenewClientCertificateNotification.html": {
    "href": "api/DMediatR.RenewClientCertificateNotification.html",
    "title": "Class RenewClientCertificateNotification | DMediatR",
    "keywords": "Class RenewClientCertificateNotification Namespace DMediatR Assembly DMediatR.dll public class RenewClientCertificateNotification : RenewNotification, ICorrelatedNotification, INotification Inheritance object RenewNotification RenewClientCertificateNotification Implements ICorrelatedNotification INotification Inherited Members RenewNotification.CorrelationGuid RenewNotification.MaxLatency object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DMediatR.RenewIntermediateCertificateNotification.html": {
    "href": "api/DMediatR.RenewIntermediateCertificateNotification.html",
    "title": "Class RenewIntermediateCertificateNotification | DMediatR",
    "keywords": "Class RenewIntermediateCertificateNotification Namespace DMediatR Assembly DMediatR.dll public class RenewIntermediateCertificateNotification : RenewNotification, ICorrelatedNotification, INotification Inheritance object RenewNotification RenewIntermediateCertificateNotification Implements ICorrelatedNotification INotification Inherited Members RenewNotification.CorrelationGuid RenewNotification.MaxLatency object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DMediatR.RenewNotification.html": {
    "href": "api/DMediatR.RenewNotification.html",
    "title": "Class RenewNotification | DMediatR",
    "keywords": "Class RenewNotification Namespace DMediatR Assembly DMediatR.dll public abstract class RenewNotification : ICorrelatedNotification, INotification Inheritance object RenewNotification Implements ICorrelatedNotification INotification Derived RenewClientCertificateNotification RenewIntermediateCertificateNotification RenewRootCertificateNotification RenewServerCertificateNotification Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CorrelationGuid To be implemented as public Guid CorrelationGuid { get; init; } = Guid.NewGuid(); public Guid CorrelationGuid { get; init; } Property Value Guid MaxLatency Duration the CorrelationGuid should stay in the cache. Required to prevent it from indefinitely growing. Afterwards, received duplicate copies of a notifications can no more be correlated and thus ignored. Defaults to 1 day, but can be adjusted to specific workloads here. public static TimeSpan MaxLatency { get; set; } Property Value TimeSpan"
  },
  "api/DMediatR.RenewNotificationForwarder.html": {
    "href": "api/DMediatR.RenewNotificationForwarder.html",
    "title": "Class RenewNotificationForwarder | DMediatR",
    "keywords": "Class RenewNotificationForwarder Namespace DMediatR Assembly DMediatR.dll public class RenewNotificationForwarder : INotificationHandler<ICorrelatedNotification>, IRemote Inheritance object RenewNotificationForwarder Implements INotificationHandler<ICorrelatedNotification> IRemote Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods RemoteExtension.PublishRemote(IRemote, INotification, CancellationToken) RemoteExtension.SendRemote<TResponse>(IRemote, IRequest<TResponse>, CancellationToken) Constructors RenewNotificationForwarder(IMemoryCache, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool) public RenewNotificationForwarder(IMemoryCache cache, IOptions<HostOptions> hostOptions, IOptions<CertificateOptions> certOptions, IOptions<RemotesOptions> remotesOptions, IMediator mediator, ISerializer serializer, IGrpcChannelPool channel) Parameters cache IMemoryCache hostOptions IOptions<HostOptions> certOptions IOptions<CertificateOptions> remotesOptions IOptions<RemotesOptions> mediator IMediator serializer ISerializer channel IGrpcChannelPool Fields _grpcChannelProvider protected readonly IGrpcChannelPool _grpcChannelProvider Field Value IGrpcChannelPool Properties ChannelPool public IGrpcChannelPool ChannelPool { get; } Property Value IGrpcChannelPool Mediator public IMediator Mediator { get; } Property Value IMediator Options public CertificateOptions Options { get; } Property Value CertificateOptions Remotes public RemotesOptions Remotes { get; } Property Value RemotesOptions Serializer public ISerializer Serializer { get; } Property Value ISerializer Methods Handle(ICorrelatedNotification, CancellationToken) Distribute the notification to all connected remote nodes. public Task Handle(ICorrelatedNotification notification, CancellationToken cancellationToken) Parameters notification ICorrelatedNotification cancellationToken CancellationToken Returns Task"
  },
  "api/DMediatR.RenewRootCertificateNotification.html": {
    "href": "api/DMediatR.RenewRootCertificateNotification.html",
    "title": "Class RenewRootCertificateNotification | DMediatR",
    "keywords": "Class RenewRootCertificateNotification Namespace DMediatR Assembly DMediatR.dll public class RenewRootCertificateNotification : RenewNotification, ICorrelatedNotification, INotification Inheritance object RenewNotification RenewRootCertificateNotification Implements ICorrelatedNotification INotification Inherited Members RenewNotification.CorrelationGuid RenewNotification.MaxLatency object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DMediatR.RenewServerCertificateNotification.html": {
    "href": "api/DMediatR.RenewServerCertificateNotification.html",
    "title": "Class RenewServerCertificateNotification | DMediatR",
    "keywords": "Class RenewServerCertificateNotification Namespace DMediatR Assembly DMediatR.dll public class RenewServerCertificateNotification : RenewNotification, ICorrelatedNotification, INotification Inheritance object RenewNotification RenewServerCertificateNotification Implements ICorrelatedNotification INotification Inherited Members RenewNotification.CorrelationGuid RenewNotification.MaxLatency object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DMediatR.RootCertificateProvider.html": {
    "href": "api/DMediatR.RootCertificateProvider.html",
    "title": "Class RootCertificateProvider | DMediatR",
    "keywords": "Class RootCertificateProvider Namespace DMediatR Assembly DMediatR.dll [Local(\"RootCertifier\")] public class RootCertificateProvider : CertificateProvider, IRequestHandler<RootCertificateRequest, X509Certificate2>, INotificationHandler<RenewRootCertificateNotification> Inheritance object CertificateProvider RootCertificateProvider Implements IRequestHandler<RootCertificateRequest, X509Certificate2> INotificationHandler<RenewRootCertificateNotification> Derived RootCertificateProviderRemote Inherited Members CertificateProvider._hostOptions CertificateProvider._certOptions CertificateProvider._remotes CertificateProvider._mediator CertificateProvider._serializer CertificateProvider._grpcChannelProvider CertificateProvider._importExportCertificate CertificateProvider.Mediator CertificateProvider.Serializer CertificateProvider.ChannelPool CertificateProvider.Options CertificateProvider.Remotes CertificateProvider.RemoteName CertificateProvider.TryLoad(CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RootCertificateProvider(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate) public RootCertificateProvider(CreateCertificatesClientServerAuth createCert, IOptions<HostOptions> hostOptions, IOptions<CertificateOptions> certOptions, IOptions<RemotesOptions> remotesOptions, IMediator mediator, ISerializer serializer, IGrpcChannelPool channel, ImportExportCertificate ioCert) Parameters createCert CreateCertificatesClientServerAuth hostOptions IOptions<HostOptions> certOptions IOptions<CertificateOptions> remotesOptions IOptions<RemotesOptions> mediator IMediator serializer ISerializer channel IGrpcChannelPool ioCert ImportExportCertificate Methods Handle(RootCertificateRequest, CancellationToken) Handles a request public virtual Task<X509Certificate2> Handle(RootCertificateRequest request, CancellationToken cancellationToken) Parameters request RootCertificateRequest The request cancellationToken CancellationToken Cancellation token Returns Task<X509Certificate2> Response from the request RequestCertificate(RootCertificateRequest, CancellationToken) protected Task<X509Certificate2> RequestCertificate(RootCertificateRequest request, CancellationToken cancellationToken) Parameters request RootCertificateRequest cancellationToken CancellationToken Returns Task<X509Certificate2>"
  },
  "api/DMediatR.RootCertificateProviderRemote.html": {
    "href": "api/DMediatR.RootCertificateProviderRemote.html",
    "title": "Class RootCertificateProviderRemote | DMediatR",
    "keywords": "Class RootCertificateProviderRemote Namespace DMediatR Assembly DMediatR.dll [Remote(\"RootCertifier\")] public class RootCertificateProviderRemote : RootCertificateProvider, IRequestHandler<RootCertificateRequest, X509Certificate2>, INotificationHandler<RenewRootCertificateNotification>, IRemote Inheritance object CertificateProvider RootCertificateProvider RootCertificateProviderRemote Implements IRequestHandler<RootCertificateRequest, X509Certificate2> INotificationHandler<RenewRootCertificateNotification> IRemote Inherited Members RootCertificateProvider.RequestCertificate(RootCertificateRequest, CancellationToken) CertificateProvider._hostOptions CertificateProvider._certOptions CertificateProvider._remotes CertificateProvider._mediator CertificateProvider._serializer CertificateProvider._grpcChannelProvider CertificateProvider._importExportCertificate CertificateProvider.Mediator CertificateProvider.Serializer CertificateProvider.ChannelPool CertificateProvider.Options CertificateProvider.Remotes CertificateProvider.RemoteName CertificateProvider.TryLoad(CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods RemoteExtension.PublishRemote(IRemote, INotification, CancellationToken) RemoteExtension.SendRemote<TResponse>(IRemote, IRequest<TResponse>, CancellationToken) Constructors RootCertificateProviderRemote(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate) public RootCertificateProviderRemote(CreateCertificatesClientServerAuth createCert, IOptions<HostOptions> hostOptions, IOptions<CertificateOptions> certOptions, IOptions<RemotesOptions> remotesOptions, IMediator mediator, ISerializer serializer, IGrpcChannelPool channel, ImportExportCertificate ioCert) Parameters createCert CreateCertificatesClientServerAuth hostOptions IOptions<HostOptions> certOptions IOptions<CertificateOptions> remotesOptions IOptions<RemotesOptions> mediator IMediator serializer ISerializer channel IGrpcChannelPool ioCert ImportExportCertificate Methods Handle(RootCertificateRequest, CancellationToken) Handles a request public override Task<X509Certificate2> Handle(RootCertificateRequest request, CancellationToken cancellationToken) Parameters request RootCertificateRequest The request cancellationToken CancellationToken Cancellation token Returns Task<X509Certificate2> Response from the request"
  },
  "api/DMediatR.RootCertificateRequest.html": {
    "href": "api/DMediatR.RootCertificateRequest.html",
    "title": "Class RootCertificateRequest | DMediatR",
    "keywords": "Class RootCertificateRequest Namespace DMediatR Assembly DMediatR.dll public class RootCertificateRequest : CertificateRequest, IRequest<X509Certificate2>, IBaseRequest Inheritance object CertificateRequest RootCertificateRequest Implements IRequest<X509Certificate2> IBaseRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IRequestExtension.GetResponseType(IBaseRequest)"
  },
  "api/DMediatR.Serializer-1.html": {
    "href": "api/DMediatR.Serializer-1.html",
    "title": "Class Serializer<T> | DMediatR",
    "keywords": "Class Serializer<T> Namespace DMediatR Assembly DMediatR.dll Generic custom binary serializer. public class Serializer<T> : Serializer, ISerializer Type Parameters T The concrete type to serialize. Inheritance object Serializer Serializer<T> Implements ISerializer Inherited Members Serializer.Serialize(object) Serializer.Deserialize<T>(byte[]) Serializer.Deserialize<T>(Type, byte[]) Serializer.Deserialize(Type, byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Serializer(IServiceProvider) public Serializer(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Properties Type Type of the serialized object as key for services.AddKeyedSingleton(). public static Type Type { get; } Property Value Type Methods CheckType(Type) Throws an ArgumentException if the given object is not of type T. public void CheckType(Type givenType) Parameters givenType Type Exceptions ArgumentException"
  },
  "api/DMediatR.Serializer.html": {
    "href": "api/DMediatR.Serializer.html",
    "title": "Class Serializer | DMediatR",
    "keywords": "Class Serializer Namespace DMediatR Assembly DMediatR.dll Pluggable binary serializer for DMediatR using MessagePackSerializer.Typeless as default. public class Serializer : ISerializer Inheritance object Serializer Implements ISerializer Derived Serializer<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Serializer(IServiceProvider) public Serializer(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Methods Deserialize(Type, byte[]) public virtual object Deserialize(Type type, byte[] bytes) Parameters type Type bytes byte[] Returns object Deserialize<T>(byte[]) public virtual T Deserialize<T>(byte[] bytes) Parameters bytes byte[] Returns T Type Parameters T Deserialize<T>(Type, byte[]) public virtual T Deserialize<T>(Type type, byte[] bytes) Parameters type Type bytes byte[] Returns T Type Parameters T Serialize(object) public virtual byte[] Serialize(object obj) Parameters obj object Returns byte[]"
  },
  "api/DMediatR.ServerCertificateFileWatcher.html": {
    "href": "api/DMediatR.ServerCertificateFileWatcher.html",
    "title": "Class ServerCertificateFileWatcher | DMediatR",
    "keywords": "Class ServerCertificateFileWatcher Namespace DMediatR Assembly DMediatR.dll public class ServerCertificateFileWatcher : BackgroundService, IHostedService, IDisposable Inheritance object BackgroundService ServerCertificateFileWatcher Implements IHostedService IDisposable Inherited Members BackgroundService.Dispose() BackgroundService.StartAsync(CancellationToken) BackgroundService.StopAsync(CancellationToken) BackgroundService.ExecuteTask object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServerCertificateFileWatcher(ILogger<ServerCertificateFileWatcher>, IOptions<HostOptions>, ServerCertificateProvider, IHostApplicationLifetime) public ServerCertificateFileWatcher(ILogger<ServerCertificateFileWatcher> logger, IOptions<HostOptions> hostOptions, ServerCertificateProvider certificateProvider, IHostApplicationLifetime appLifetime) Parameters logger ILogger<ServerCertificateFileWatcher> hostOptions IOptions<HostOptions> certificateProvider ServerCertificateProvider appLifetime IHostApplicationLifetime Methods ExecuteAsync(CancellationToken) This method is called when the IHostedService starts. The implementation should return a task that represents the lifetime of the long running operation(s) being performed. protected override Task ExecuteAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task A Task that represents the long running operations. Remarks See Worker Services in .NET for implementation guidelines."
  },
  "api/DMediatR.ServerCertificateProvider.html": {
    "href": "api/DMediatR.ServerCertificateProvider.html",
    "title": "Class ServerCertificateProvider | DMediatR",
    "keywords": "Class ServerCertificateProvider Namespace DMediatR Assembly DMediatR.dll [Local(\"ServerCertifier\")] public class ServerCertificateProvider : ChainedCertificateProvider, IRequestHandler<ServerCertificateRequest, X509Certificate2>, INotificationHandler<RenewServerCertificateNotification> Inheritance object CertificateProvider ChainedCertificateProvider ServerCertificateProvider Implements IRequestHandler<ServerCertificateRequest, X509Certificate2> INotificationHandler<RenewServerCertificateNotification> Derived ServerCertificateProviderRemote Inherited Members ChainedCertificateProvider.RequestCertificate(ChainedCertificateRequest, CancellationToken) ChainedCertificateProvider.Generate(ChainedCertificateRequest, CancellationToken) CertificateProvider._hostOptions CertificateProvider._certOptions CertificateProvider._remotes CertificateProvider._mediator CertificateProvider._serializer CertificateProvider._grpcChannelProvider CertificateProvider._importExportCertificate CertificateProvider.Mediator CertificateProvider.Serializer CertificateProvider.ChannelPool CertificateProvider.Options CertificateProvider.Remotes CertificateProvider.RemoteName CertificateProvider.TryLoad(CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServerCertificateProvider(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate) public ServerCertificateProvider(CreateCertificatesClientServerAuth createCert, IOptions<HostOptions> hostOptions, IOptions<CertificateOptions> certOptions, IOptions<RemotesOptions> remotesOptions, IMediator mediator, ISerializer serializer, IGrpcChannelPool channel, ImportExportCertificate ioCert) Parameters createCert CreateCertificatesClientServerAuth hostOptions IOptions<HostOptions> certOptions IOptions<CertificateOptions> remotesOptions IOptions<RemotesOptions> mediator IMediator serializer ISerializer channel IGrpcChannelPool ioCert ImportExportCertificate Methods CertificateFilename(IConfiguration) public static string CertificateFilename(IConfiguration cfg) Parameters cfg IConfiguration Returns string Handle(ServerCertificateRequest, CancellationToken) Handles a request public virtual Task<X509Certificate2> Handle(ServerCertificateRequest request, CancellationToken cancellationToken) Parameters request ServerCertificateRequest The request cancellationToken CancellationToken Cancellation token Returns Task<X509Certificate2> Response from the request LoadCertificate(IConfiguration) Static method called during service configuration for obtaining the locally stored current server certificate public static X509Certificate2 LoadCertificate(IConfiguration cfg) Parameters cfg IConfiguration WebApplicationBuilder.Configuration Returns X509Certificate2 LoadCertificateOld(IConfiguration) Static method called during service configuration for obtaining the locally stored former server certificate public static X509Certificate2 LoadCertificateOld(IConfiguration cfg) Parameters cfg IConfiguration WebApplicationBuilder.Configuration Returns X509Certificate2 OldCertificateFilename(IConfiguration) public static string OldCertificateFilename(IConfiguration cfg) Parameters cfg IConfiguration Returns string"
  },
  "api/DMediatR.ServerCertificateProviderRemote.html": {
    "href": "api/DMediatR.ServerCertificateProviderRemote.html",
    "title": "Class ServerCertificateProviderRemote | DMediatR",
    "keywords": "Class ServerCertificateProviderRemote Namespace DMediatR Assembly DMediatR.dll [Remote(\"ServerCertifier\")] public class ServerCertificateProviderRemote : ServerCertificateProvider, IRequestHandler<ServerCertificateRequest, X509Certificate2>, INotificationHandler<RenewServerCertificateNotification>, IRemote Inheritance object CertificateProvider ChainedCertificateProvider ServerCertificateProvider ServerCertificateProviderRemote Implements IRequestHandler<ServerCertificateRequest, X509Certificate2> INotificationHandler<RenewServerCertificateNotification> IRemote Inherited Members ServerCertificateProvider.CertificateFilename(IConfiguration) ServerCertificateProvider.OldCertificateFilename(IConfiguration) ServerCertificateProvider.LoadCertificate(IConfiguration) ServerCertificateProvider.LoadCertificateOld(IConfiguration) ChainedCertificateProvider.RequestCertificate(ChainedCertificateRequest, CancellationToken) ChainedCertificateProvider.Generate(ChainedCertificateRequest, CancellationToken) CertificateProvider._hostOptions CertificateProvider._certOptions CertificateProvider._remotes CertificateProvider._mediator CertificateProvider._serializer CertificateProvider._grpcChannelProvider CertificateProvider._importExportCertificate CertificateProvider.Mediator CertificateProvider.Serializer CertificateProvider.ChannelPool CertificateProvider.Options CertificateProvider.Remotes CertificateProvider.RemoteName CertificateProvider.TryLoad(CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods RemoteExtension.PublishRemote(IRemote, INotification, CancellationToken) RemoteExtension.SendRemote<TResponse>(IRemote, IRequest<TResponse>, CancellationToken) Constructors ServerCertificateProviderRemote(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate) public ServerCertificateProviderRemote(CreateCertificatesClientServerAuth createCert, IOptions<HostOptions> hostOptions, IOptions<CertificateOptions> certOptions, IOptions<RemotesOptions> remotesOptions, IMediator mediator, ISerializer serializer, IGrpcChannelPool channel, ImportExportCertificate ioCert) Parameters createCert CreateCertificatesClientServerAuth hostOptions IOptions<HostOptions> certOptions IOptions<CertificateOptions> remotesOptions IOptions<RemotesOptions> mediator IMediator serializer ISerializer channel IGrpcChannelPool ioCert ImportExportCertificate Methods Handle(ServerCertificateRequest, CancellationToken) Handles a request public override Task<X509Certificate2> Handle(ServerCertificateRequest request, CancellationToken cancellationToken) Parameters request ServerCertificateRequest The request cancellationToken CancellationToken Cancellation token Returns Task<X509Certificate2> Response from the request"
  },
  "api/DMediatR.ServerCertificateRequest.html": {
    "href": "api/DMediatR.ServerCertificateRequest.html",
    "title": "Class ServerCertificateRequest | DMediatR",
    "keywords": "Class ServerCertificateRequest Namespace DMediatR Assembly DMediatR.dll public class ServerCertificateRequest : ChainedCertificateRequest, IRequest<X509Certificate2>, IBaseRequest Inheritance object CertificateRequest ChainedCertificateRequest ServerCertificateRequest Implements IRequest<X509Certificate2> IBaseRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IRequestExtension.GetResponseType(IBaseRequest) Properties ParentCertificateRequest public override IntermediateCertificateRequest ParentCertificateRequest { get; } Property Value IntermediateCertificateRequest"
  },
  "api/DMediatR.ServiceCollectionExtension.html": {
    "href": "api/DMediatR.ServiceCollectionExtension.html",
    "title": "Class ServiceCollectionExtension | DMediatR",
    "keywords": "Class ServiceCollectionExtension Namespace DMediatR Assembly DMediatR.dll public static class ServiceCollectionExtension Inheritance object ServiceCollectionExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDMediatR(IServiceCollection, IConfiguration, Action<MediatRServiceConfiguration>) Provides services.AddDMediatR() as a drop-in replacement for AddMediatR. public static IServiceCollection AddDMediatR(this IServiceCollection services, IConfiguration config, Action<MediatRServiceConfiguration> mediatrCfg) Parameters services IServiceCollection config IConfiguration mediatrCfg Action<MediatRServiceConfiguration> Returns IServiceCollection"
  },
  "api/DMediatR.ValidateCertificateOptions.html": {
    "href": "api/DMediatR.ValidateCertificateOptions.html",
    "title": "Class ValidateCertificateOptions | DMediatR",
    "keywords": "Class ValidateCertificateOptions Namespace DMediatR Assembly DMediatR.dll [OptionsValidator] public class ValidateCertificateOptions : IValidateOptions<CertificateOptions> Inheritance object ValidateCertificateOptions Implements IValidateOptions<CertificateOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Validate(string?, CertificateOptions) Validates a specific named options instance (or all when name is null). public ValidateOptionsResult Validate(string? name, CertificateOptions options) Parameters name string The name of the options instance being validated. options CertificateOptions The options instance. Returns ValidateOptionsResult Validation result."
  },
  "api/DMediatR.ValidateHostOptions.html": {
    "href": "api/DMediatR.ValidateHostOptions.html",
    "title": "Class ValidateHostOptions | DMediatR",
    "keywords": "Class ValidateHostOptions Namespace DMediatR Assembly DMediatR.dll [OptionsValidator] public class ValidateHostOptions : IValidateOptions<HostOptions> Inheritance object ValidateHostOptions Implements IValidateOptions<HostOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Validate(string?, HostOptions) Validates a specific named options instance (or all when name is null). public ValidateOptionsResult Validate(string? name, HostOptions options) Parameters name string The name of the options instance being validated. options HostOptions The options instance. Returns ValidateOptionsResult Validation result."
  },
  "api/DMediatR.ValidateRemotesOptions.html": {
    "href": "api/DMediatR.ValidateRemotesOptions.html",
    "title": "Class ValidateRemotesOptions | DMediatR",
    "keywords": "Class ValidateRemotesOptions Namespace DMediatR Assembly DMediatR.dll [OptionsValidator] public class ValidateRemotesOptions : IValidateOptions<RemotesOptions> Inheritance object ValidateRemotesOptions Implements IValidateOptions<RemotesOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Validate(string?, RemotesOptions) Validates a specific named options instance (or all when name is null). public ValidateOptionsResult Validate(string? name, RemotesOptions options) Parameters name string The name of the options instance being validated. options RemotesOptions The options instance. Returns ValidateOptionsResult Validation result."
  },
  "api/DMediatR.X509CertificateSerializer.html": {
    "href": "api/DMediatR.X509CertificateSerializer.html",
    "title": "Class X509CertificateSerializer | DMediatR",
    "keywords": "Class X509CertificateSerializer Namespace DMediatR Assembly DMediatR.dll public class X509CertificateSerializer : Serializer<X509Certificate2>, ISerializer Inheritance object Serializer Serializer<X509Certificate2> X509CertificateSerializer Implements ISerializer Inherited Members Serializer<X509Certificate2>.Type Serializer<X509Certificate2>.CheckType(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors X509CertificateSerializer(IServiceProvider, IOptions<CertificateOptions>) public X509CertificateSerializer(IServiceProvider serviceProvider, IOptions<CertificateOptions> options) Parameters serviceProvider IServiceProvider options IOptions<CertificateOptions> Methods Deserialize(Type, byte[]) public override object Deserialize(Type type, byte[] bytes) Parameters type Type bytes byte[] Returns object Deserialize<T>(byte[]) public override T Deserialize<T>(byte[] bytes) Parameters bytes byte[] Returns T Type Parameters T Serialize(object) public override byte[] Serialize(object obj) Parameters obj object Returns byte[]"
  },
  "api/DMediatR.html": {
    "href": "api/DMediatR.html",
    "title": "Namespace DMediatR | DMediatR",
    "keywords": "Namespace DMediatR Classes CertificateOptions X509 certificate specification, including the password. Certificates Utility to create a valid initial X509 certificate chain offline to be distributed to all gRPC nodes. Dto One data transfer object class for any type. DtoService Dto consumer to be used in the gRPC server. GrpcChannelPool Implements a cache for long-lived gRPC channels, one instance per address. GrpcServer Utility for creating a gRPC service WebApplicationBuilder and WebApplication in a DMediatR node. HostOptions Specification of a DMediatR node host. Also used for specifying the remotes in RemotesOptions. LocalAttribute Marks the handlers in this class as local double of a [Remote] class. Ping Simple MediatR IRequest for diagnosis. Pong Response to a Ping request. Echoes the Ping message and the ASPNETCORE_ENVIRONMENT of the responding Node if present. RemoteAttribute Marks the handlers in this class as calling a gRPC endpoint (as opposed to calling locally). RemoteExtension IRemote extension methods for connecting to a Dto gRPC service from a MediatR handler. RemotesOptions Dictionary of HostOptions declaring the configured remotes for that DMediatR node. Serializer Pluggable binary serializer for DMediatR using MessagePackSerializer.Typeless as default. Serializer<T> Generic custom binary serializer. ServiceCollectionExtension Interfaces ICorrelatedNotification Multiple DMediatR nodes can have cyclic dependencies or there might be indirect diamonds in the configured dependency graph. In such cases a single node receives and would forward the same Notification in multiple duplicate copies. To handle them only once as in a monolith correlate these remote Notifications with a Guid. IDtoService Code-first gRPC service for sending a MediatR IRequest to the remote IRequestHandler. IGrpcChannelPool Interface for injecting alternate gRPC channel pool implementations. IRemote Inherit from this interface to add the SendRemote extension. ISerializer Interface for injecting alternate serializer implementations. Enums GrpcPort Port resp. SSL certificate to use."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | DMediatR",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | DMediatR",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "DMediatR | DMediatR",
    "keywords": "DMediatR Distributed MediatR over gRPC with auto-renewing X509 client certificate TLS."
  }
}