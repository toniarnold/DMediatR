### YamlMime:XRefMap
sorted: true
references:
- uid: DMediatR
  name: DMediatR
  href: api/DMediatR.html
  commentId: N:DMediatR
  fullName: DMediatR
  nameWithType: DMediatR
- uid: DMediatR.CertificateOptions
  name: CertificateOptions
  href: api/DMediatR.CertificateOptions.html
  commentId: T:DMediatR.CertificateOptions
  fullName: DMediatR.CertificateOptions
  nameWithType: CertificateOptions
- uid: DMediatR.CertificateOptions.FilePath
  name: FilePath
  href: api/DMediatR.CertificateOptions.html#DMediatR_CertificateOptions_FilePath
  commentId: P:DMediatR.CertificateOptions.FilePath
  fullName: DMediatR.CertificateOptions.FilePath
  nameWithType: CertificateOptions.FilePath
- uid: DMediatR.CertificateOptions.FilePath*
  name: FilePath
  href: api/DMediatR.CertificateOptions.html#DMediatR_CertificateOptions_FilePath_
  commentId: Overload:DMediatR.CertificateOptions.FilePath
  isSpec: "True"
  fullName: DMediatR.CertificateOptions.FilePath
  nameWithType: CertificateOptions.FilePath
- uid: DMediatR.CertificateOptions.FilenamePrefix
  name: FilenamePrefix
  href: api/DMediatR.CertificateOptions.html#DMediatR_CertificateOptions_FilenamePrefix
  commentId: P:DMediatR.CertificateOptions.FilenamePrefix
  fullName: DMediatR.CertificateOptions.FilenamePrefix
  nameWithType: CertificateOptions.FilenamePrefix
- uid: DMediatR.CertificateOptions.FilenamePrefix*
  name: FilenamePrefix
  href: api/DMediatR.CertificateOptions.html#DMediatR_CertificateOptions_FilenamePrefix_
  commentId: Overload:DMediatR.CertificateOptions.FilenamePrefix
  isSpec: "True"
  fullName: DMediatR.CertificateOptions.FilenamePrefix
  nameWithType: CertificateOptions.FilenamePrefix
- uid: DMediatR.CertificateOptions.HostName
  name: HostName
  href: api/DMediatR.CertificateOptions.html#DMediatR_CertificateOptions_HostName
  commentId: P:DMediatR.CertificateOptions.HostName
  fullName: DMediatR.CertificateOptions.HostName
  nameWithType: CertificateOptions.HostName
- uid: DMediatR.CertificateOptions.HostName*
  name: HostName
  href: api/DMediatR.CertificateOptions.html#DMediatR_CertificateOptions_HostName_
  commentId: Overload:DMediatR.CertificateOptions.HostName
  isSpec: "True"
  fullName: DMediatR.CertificateOptions.HostName
  nameWithType: CertificateOptions.HostName
- uid: DMediatR.CertificateOptions.Password
  name: Password
  href: api/DMediatR.CertificateOptions.html#DMediatR_CertificateOptions_Password
  commentId: P:DMediatR.CertificateOptions.Password
  fullName: DMediatR.CertificateOptions.Password
  nameWithType: CertificateOptions.Password
- uid: DMediatR.CertificateOptions.Password*
  name: Password
  href: api/DMediatR.CertificateOptions.html#DMediatR_CertificateOptions_Password_
  commentId: Overload:DMediatR.CertificateOptions.Password
  isSpec: "True"
  fullName: DMediatR.CertificateOptions.Password
  nameWithType: CertificateOptions.Password
- uid: DMediatR.CertificateOptions.RenewBeforeExpirationDays
  name: RenewBeforeExpirationDays
  href: api/DMediatR.CertificateOptions.html#DMediatR_CertificateOptions_RenewBeforeExpirationDays
  commentId: P:DMediatR.CertificateOptions.RenewBeforeExpirationDays
  fullName: DMediatR.CertificateOptions.RenewBeforeExpirationDays
  nameWithType: CertificateOptions.RenewBeforeExpirationDays
- uid: DMediatR.CertificateOptions.RenewBeforeExpirationDays*
  name: RenewBeforeExpirationDays
  href: api/DMediatR.CertificateOptions.html#DMediatR_CertificateOptions_RenewBeforeExpirationDays_
  commentId: Overload:DMediatR.CertificateOptions.RenewBeforeExpirationDays
  isSpec: "True"
  fullName: DMediatR.CertificateOptions.RenewBeforeExpirationDays
  nameWithType: CertificateOptions.RenewBeforeExpirationDays
- uid: DMediatR.CertificateOptions.SectionName
  name: SectionName
  href: api/DMediatR.CertificateOptions.html#DMediatR_CertificateOptions_SectionName
  commentId: F:DMediatR.CertificateOptions.SectionName
  fullName: DMediatR.CertificateOptions.SectionName
  nameWithType: CertificateOptions.SectionName
- uid: DMediatR.CertificateOptions.ValidDays
  name: ValidDays
  href: api/DMediatR.CertificateOptions.html#DMediatR_CertificateOptions_ValidDays
  commentId: P:DMediatR.CertificateOptions.ValidDays
  fullName: DMediatR.CertificateOptions.ValidDays
  nameWithType: CertificateOptions.ValidDays
- uid: DMediatR.CertificateOptions.ValidDays*
  name: ValidDays
  href: api/DMediatR.CertificateOptions.html#DMediatR_CertificateOptions_ValidDays_
  commentId: Overload:DMediatR.CertificateOptions.ValidDays
  isSpec: "True"
  fullName: DMediatR.CertificateOptions.ValidDays
  nameWithType: CertificateOptions.ValidDays
- uid: DMediatR.CertificateProvider
  name: CertificateProvider
  href: api/DMediatR.CertificateProvider.html
  commentId: T:DMediatR.CertificateProvider
  fullName: DMediatR.CertificateProvider
  nameWithType: CertificateProvider
- uid: DMediatR.CertificateProvider.#ctor(Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name: CertificateProvider(IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider__ctor_Microsoft_Extensions_Options_IOptions_DMediatR_HostOptions__Microsoft_Extensions_Options_IOptions_DMediatR_CertificateOptions__Microsoft_Extensions_Options_IOptions_DMediatR_RemotesOptions__MediatR_IMediator_DMediatR_ISerializer_DMediatR_IGrpcChannelPool_CertificateManager_ImportExportCertificate_
  commentId: M:DMediatR.CertificateProvider.#ctor(Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name.vb: New(IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  fullName: DMediatR.CertificateProvider.CertificateProvider(Microsoft.Extensions.Options.IOptions<DMediatR.HostOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.CertificateOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.RemotesOptions>, MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  fullName.vb: DMediatR.CertificateProvider.New(Microsoft.Extensions.Options.IOptions(Of DMediatR.HostOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.CertificateOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.RemotesOptions), MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  nameWithType: CertificateProvider.CertificateProvider(IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  nameWithType.vb: CertificateProvider.New(IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
- uid: DMediatR.CertificateProvider.#ctor*
  name: CertificateProvider
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider__ctor_
  commentId: Overload:DMediatR.CertificateProvider.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.CertificateProvider.CertificateProvider
  fullName.vb: DMediatR.CertificateProvider.New
  nameWithType: CertificateProvider.CertificateProvider
  nameWithType.vb: CertificateProvider.New
- uid: DMediatR.CertificateProvider.ChannelPool
  name: ChannelPool
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider_ChannelPool
  commentId: P:DMediatR.CertificateProvider.ChannelPool
  fullName: DMediatR.CertificateProvider.ChannelPool
  nameWithType: CertificateProvider.ChannelPool
- uid: DMediatR.CertificateProvider.ChannelPool*
  name: ChannelPool
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider_ChannelPool_
  commentId: Overload:DMediatR.CertificateProvider.ChannelPool
  isSpec: "True"
  fullName: DMediatR.CertificateProvider.ChannelPool
  nameWithType: CertificateProvider.ChannelPool
- uid: DMediatR.CertificateProvider.Mediator
  name: Mediator
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider_Mediator
  commentId: P:DMediatR.CertificateProvider.Mediator
  fullName: DMediatR.CertificateProvider.Mediator
  nameWithType: CertificateProvider.Mediator
- uid: DMediatR.CertificateProvider.Mediator*
  name: Mediator
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider_Mediator_
  commentId: Overload:DMediatR.CertificateProvider.Mediator
  isSpec: "True"
  fullName: DMediatR.CertificateProvider.Mediator
  nameWithType: CertificateProvider.Mediator
- uid: DMediatR.CertificateProvider.Options
  name: Options
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider_Options
  commentId: P:DMediatR.CertificateProvider.Options
  fullName: DMediatR.CertificateProvider.Options
  nameWithType: CertificateProvider.Options
- uid: DMediatR.CertificateProvider.Options*
  name: Options
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider_Options_
  commentId: Overload:DMediatR.CertificateProvider.Options
  isSpec: "True"
  fullName: DMediatR.CertificateProvider.Options
  nameWithType: CertificateProvider.Options
- uid: DMediatR.CertificateProvider.RemoteName
  name: RemoteName
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider_RemoteName
  commentId: P:DMediatR.CertificateProvider.RemoteName
  fullName: DMediatR.CertificateProvider.RemoteName
  nameWithType: CertificateProvider.RemoteName
- uid: DMediatR.CertificateProvider.RemoteName*
  name: RemoteName
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider_RemoteName_
  commentId: Overload:DMediatR.CertificateProvider.RemoteName
  isSpec: "True"
  fullName: DMediatR.CertificateProvider.RemoteName
  nameWithType: CertificateProvider.RemoteName
- uid: DMediatR.CertificateProvider.Remotes
  name: Remotes
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider_Remotes
  commentId: P:DMediatR.CertificateProvider.Remotes
  fullName: DMediatR.CertificateProvider.Remotes
  nameWithType: CertificateProvider.Remotes
- uid: DMediatR.CertificateProvider.Remotes*
  name: Remotes
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider_Remotes_
  commentId: Overload:DMediatR.CertificateProvider.Remotes
  isSpec: "True"
  fullName: DMediatR.CertificateProvider.Remotes
  nameWithType: CertificateProvider.Remotes
- uid: DMediatR.CertificateProvider.Serializer
  name: Serializer
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider_Serializer
  commentId: P:DMediatR.CertificateProvider.Serializer
  fullName: DMediatR.CertificateProvider.Serializer
  nameWithType: CertificateProvider.Serializer
- uid: DMediatR.CertificateProvider.Serializer*
  name: Serializer
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider_Serializer_
  commentId: Overload:DMediatR.CertificateProvider.Serializer
  isSpec: "True"
  fullName: DMediatR.CertificateProvider.Serializer
  nameWithType: CertificateProvider.Serializer
- uid: DMediatR.CertificateProvider.TryLoad(System.Threading.CancellationToken)
  name: TryLoad(CancellationToken)
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider_TryLoad_System_Threading_CancellationToken_
  commentId: M:DMediatR.CertificateProvider.TryLoad(System.Threading.CancellationToken)
  fullName: DMediatR.CertificateProvider.TryLoad(System.Threading.CancellationToken)
  nameWithType: CertificateProvider.TryLoad(CancellationToken)
- uid: DMediatR.CertificateProvider.TryLoad*
  name: TryLoad
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider_TryLoad_
  commentId: Overload:DMediatR.CertificateProvider.TryLoad
  isSpec: "True"
  fullName: DMediatR.CertificateProvider.TryLoad
  nameWithType: CertificateProvider.TryLoad
- uid: DMediatR.CertificateProvider._certOptions
  name: _certOptions
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider__certOptions
  commentId: F:DMediatR.CertificateProvider._certOptions
  fullName: DMediatR.CertificateProvider._certOptions
  nameWithType: CertificateProvider._certOptions
- uid: DMediatR.CertificateProvider._grpcChannelProvider
  name: _grpcChannelProvider
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider__grpcChannelProvider
  commentId: F:DMediatR.CertificateProvider._grpcChannelProvider
  fullName: DMediatR.CertificateProvider._grpcChannelProvider
  nameWithType: CertificateProvider._grpcChannelProvider
- uid: DMediatR.CertificateProvider._hostOptions
  name: _hostOptions
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider__hostOptions
  commentId: F:DMediatR.CertificateProvider._hostOptions
  fullName: DMediatR.CertificateProvider._hostOptions
  nameWithType: CertificateProvider._hostOptions
- uid: DMediatR.CertificateProvider._importExportCertificate
  name: _importExportCertificate
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider__importExportCertificate
  commentId: F:DMediatR.CertificateProvider._importExportCertificate
  fullName: DMediatR.CertificateProvider._importExportCertificate
  nameWithType: CertificateProvider._importExportCertificate
- uid: DMediatR.CertificateProvider._mediator
  name: _mediator
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider__mediator
  commentId: F:DMediatR.CertificateProvider._mediator
  fullName: DMediatR.CertificateProvider._mediator
  nameWithType: CertificateProvider._mediator
- uid: DMediatR.CertificateProvider._remotes
  name: _remotes
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider__remotes
  commentId: F:DMediatR.CertificateProvider._remotes
  fullName: DMediatR.CertificateProvider._remotes
  nameWithType: CertificateProvider._remotes
- uid: DMediatR.CertificateProvider._serializer
  name: _serializer
  href: api/DMediatR.CertificateProvider.html#DMediatR_CertificateProvider__serializer
  commentId: F:DMediatR.CertificateProvider._serializer
  fullName: DMediatR.CertificateProvider._serializer
  nameWithType: CertificateProvider._serializer
- uid: DMediatR.CertificateRequest
  name: CertificateRequest
  href: api/DMediatR.CertificateRequest.html
  commentId: T:DMediatR.CertificateRequest
  fullName: DMediatR.CertificateRequest
  nameWithType: CertificateRequest
- uid: DMediatR.Certificates
  name: Certificates
  href: api/DMediatR.Certificates.html
  commentId: T:DMediatR.Certificates
  fullName: DMediatR.Certificates
  nameWithType: Certificates
- uid: DMediatR.Certificates.#ctor(System.IServiceProvider)
  name: Certificates(IServiceProvider)
  href: api/DMediatR.Certificates.html#DMediatR_Certificates__ctor_System_IServiceProvider_
  commentId: M:DMediatR.Certificates.#ctor(System.IServiceProvider)
  name.vb: New(IServiceProvider)
  fullName: DMediatR.Certificates.Certificates(System.IServiceProvider)
  fullName.vb: DMediatR.Certificates.New(System.IServiceProvider)
  nameWithType: Certificates.Certificates(IServiceProvider)
  nameWithType.vb: Certificates.New(IServiceProvider)
- uid: DMediatR.Certificates.#ctor*
  name: Certificates
  href: api/DMediatR.Certificates.html#DMediatR_Certificates__ctor_
  commentId: Overload:DMediatR.Certificates.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.Certificates.Certificates
  fullName.vb: DMediatR.Certificates.New
  nameWithType: Certificates.Certificates
  nameWithType.vb: Certificates.New
- uid: DMediatR.Certificates.SetUpInitialChain
  name: SetUpInitialChain()
  href: api/DMediatR.Certificates.html#DMediatR_Certificates_SetUpInitialChain
  commentId: M:DMediatR.Certificates.SetUpInitialChain
  fullName: DMediatR.Certificates.SetUpInitialChain()
  nameWithType: Certificates.SetUpInitialChain()
- uid: DMediatR.Certificates.SetUpInitialChain*
  name: SetUpInitialChain
  href: api/DMediatR.Certificates.html#DMediatR_Certificates_SetUpInitialChain_
  commentId: Overload:DMediatR.Certificates.SetUpInitialChain
  isSpec: "True"
  fullName: DMediatR.Certificates.SetUpInitialChain
  nameWithType: Certificates.SetUpInitialChain
- uid: DMediatR.Certificates.SetUpInitialChainAsync(System.Threading.CancellationToken)
  name: SetUpInitialChainAsync(CancellationToken)
  href: api/DMediatR.Certificates.html#DMediatR_Certificates_SetUpInitialChainAsync_System_Threading_CancellationToken_
  commentId: M:DMediatR.Certificates.SetUpInitialChainAsync(System.Threading.CancellationToken)
  fullName: DMediatR.Certificates.SetUpInitialChainAsync(System.Threading.CancellationToken)
  nameWithType: Certificates.SetUpInitialChainAsync(CancellationToken)
- uid: DMediatR.Certificates.SetUpInitialChainAsync*
  name: SetUpInitialChainAsync
  href: api/DMediatR.Certificates.html#DMediatR_Certificates_SetUpInitialChainAsync_
  commentId: Overload:DMediatR.Certificates.SetUpInitialChainAsync
  isSpec: "True"
  fullName: DMediatR.Certificates.SetUpInitialChainAsync
  nameWithType: Certificates.SetUpInitialChainAsync
- uid: DMediatR.ChainedCertificateProvider
  name: ChainedCertificateProvider
  href: api/DMediatR.ChainedCertificateProvider.html
  commentId: T:DMediatR.ChainedCertificateProvider
  fullName: DMediatR.ChainedCertificateProvider
  nameWithType: ChainedCertificateProvider
- uid: DMediatR.ChainedCertificateProvider.#ctor(Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name: ChainedCertificateProvider(IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  href: api/DMediatR.ChainedCertificateProvider.html#DMediatR_ChainedCertificateProvider__ctor_Microsoft_Extensions_Options_IOptions_DMediatR_HostOptions__Microsoft_Extensions_Options_IOptions_DMediatR_CertificateOptions__Microsoft_Extensions_Options_IOptions_DMediatR_RemotesOptions__MediatR_IMediator_DMediatR_ISerializer_DMediatR_IGrpcChannelPool_CertificateManager_ImportExportCertificate_
  commentId: M:DMediatR.ChainedCertificateProvider.#ctor(Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name.vb: New(IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  fullName: DMediatR.ChainedCertificateProvider.ChainedCertificateProvider(Microsoft.Extensions.Options.IOptions<DMediatR.HostOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.CertificateOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.RemotesOptions>, MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  fullName.vb: DMediatR.ChainedCertificateProvider.New(Microsoft.Extensions.Options.IOptions(Of DMediatR.HostOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.CertificateOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.RemotesOptions), MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  nameWithType: ChainedCertificateProvider.ChainedCertificateProvider(IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  nameWithType.vb: ChainedCertificateProvider.New(IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
- uid: DMediatR.ChainedCertificateProvider.#ctor*
  name: ChainedCertificateProvider
  href: api/DMediatR.ChainedCertificateProvider.html#DMediatR_ChainedCertificateProvider__ctor_
  commentId: Overload:DMediatR.ChainedCertificateProvider.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.ChainedCertificateProvider.ChainedCertificateProvider
  fullName.vb: DMediatR.ChainedCertificateProvider.New
  nameWithType: ChainedCertificateProvider.ChainedCertificateProvider
  nameWithType.vb: ChainedCertificateProvider.New
- uid: DMediatR.ChainedCertificateProvider.Generate(DMediatR.ChainedCertificateRequest,System.Threading.CancellationToken)
  name: Generate(ChainedCertificateRequest, CancellationToken)
  href: api/DMediatR.ChainedCertificateProvider.html#DMediatR_ChainedCertificateProvider_Generate_DMediatR_ChainedCertificateRequest_System_Threading_CancellationToken_
  commentId: M:DMediatR.ChainedCertificateProvider.Generate(DMediatR.ChainedCertificateRequest,System.Threading.CancellationToken)
  fullName: DMediatR.ChainedCertificateProvider.Generate(DMediatR.ChainedCertificateRequest, System.Threading.CancellationToken)
  nameWithType: ChainedCertificateProvider.Generate(ChainedCertificateRequest, CancellationToken)
- uid: DMediatR.ChainedCertificateProvider.Generate*
  name: Generate
  href: api/DMediatR.ChainedCertificateProvider.html#DMediatR_ChainedCertificateProvider_Generate_
  commentId: Overload:DMediatR.ChainedCertificateProvider.Generate
  isSpec: "True"
  fullName: DMediatR.ChainedCertificateProvider.Generate
  nameWithType: ChainedCertificateProvider.Generate
- uid: DMediatR.ChainedCertificateProvider.RequestCertificate(DMediatR.ChainedCertificateRequest,System.Threading.CancellationToken)
  name: RequestCertificate(ChainedCertificateRequest, CancellationToken)
  href: api/DMediatR.ChainedCertificateProvider.html#DMediatR_ChainedCertificateProvider_RequestCertificate_DMediatR_ChainedCertificateRequest_System_Threading_CancellationToken_
  commentId: M:DMediatR.ChainedCertificateProvider.RequestCertificate(DMediatR.ChainedCertificateRequest,System.Threading.CancellationToken)
  fullName: DMediatR.ChainedCertificateProvider.RequestCertificate(DMediatR.ChainedCertificateRequest, System.Threading.CancellationToken)
  nameWithType: ChainedCertificateProvider.RequestCertificate(ChainedCertificateRequest, CancellationToken)
- uid: DMediatR.ChainedCertificateProvider.RequestCertificate*
  name: RequestCertificate
  href: api/DMediatR.ChainedCertificateProvider.html#DMediatR_ChainedCertificateProvider_RequestCertificate_
  commentId: Overload:DMediatR.ChainedCertificateProvider.RequestCertificate
  isSpec: "True"
  fullName: DMediatR.ChainedCertificateProvider.RequestCertificate
  nameWithType: ChainedCertificateProvider.RequestCertificate
- uid: DMediatR.ChainedCertificateRequest
  name: ChainedCertificateRequest
  href: api/DMediatR.ChainedCertificateRequest.html
  commentId: T:DMediatR.ChainedCertificateRequest
  fullName: DMediatR.ChainedCertificateRequest
  nameWithType: ChainedCertificateRequest
- uid: DMediatR.ChainedCertificateRequest.ParentCertificateRequest
  name: ParentCertificateRequest
  href: api/DMediatR.ChainedCertificateRequest.html#DMediatR_ChainedCertificateRequest_ParentCertificateRequest
  commentId: P:DMediatR.ChainedCertificateRequest.ParentCertificateRequest
  fullName: DMediatR.ChainedCertificateRequest.ParentCertificateRequest
  nameWithType: ChainedCertificateRequest.ParentCertificateRequest
- uid: DMediatR.ChainedCertificateRequest.ParentCertificateRequest*
  name: ParentCertificateRequest
  href: api/DMediatR.ChainedCertificateRequest.html#DMediatR_ChainedCertificateRequest_ParentCertificateRequest_
  commentId: Overload:DMediatR.ChainedCertificateRequest.ParentCertificateRequest
  isSpec: "True"
  fullName: DMediatR.ChainedCertificateRequest.ParentCertificateRequest
  nameWithType: ChainedCertificateRequest.ParentCertificateRequest
- uid: DMediatR.ClientCertificateProvider
  name: ClientCertificateProvider
  href: api/DMediatR.ClientCertificateProvider.html
  commentId: T:DMediatR.ClientCertificateProvider
  fullName: DMediatR.ClientCertificateProvider
  nameWithType: ClientCertificateProvider
- uid: DMediatR.ClientCertificateProvider.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name: ClientCertificateProvider(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  href: api/DMediatR.ClientCertificateProvider.html#DMediatR_ClientCertificateProvider__ctor_CertificateManager_CreateCertificatesClientServerAuth_Microsoft_Extensions_Options_IOptions_DMediatR_HostOptions__Microsoft_Extensions_Options_IOptions_DMediatR_CertificateOptions__Microsoft_Extensions_Options_IOptions_DMediatR_RemotesOptions__MediatR_IMediator_DMediatR_ISerializer_DMediatR_IGrpcChannelPool_CertificateManager_ImportExportCertificate_
  commentId: M:DMediatR.ClientCertificateProvider.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name.vb: New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  fullName: DMediatR.ClientCertificateProvider.ClientCertificateProvider(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions<DMediatR.HostOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.CertificateOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.RemotesOptions>, MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  fullName.vb: DMediatR.ClientCertificateProvider.New(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions(Of DMediatR.HostOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.CertificateOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.RemotesOptions), MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  nameWithType: ClientCertificateProvider.ClientCertificateProvider(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  nameWithType.vb: ClientCertificateProvider.New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
- uid: DMediatR.ClientCertificateProvider.#ctor*
  name: ClientCertificateProvider
  href: api/DMediatR.ClientCertificateProvider.html#DMediatR_ClientCertificateProvider__ctor_
  commentId: Overload:DMediatR.ClientCertificateProvider.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.ClientCertificateProvider.ClientCertificateProvider
  fullName.vb: DMediatR.ClientCertificateProvider.New
  nameWithType: ClientCertificateProvider.ClientCertificateProvider
  nameWithType.vb: ClientCertificateProvider.New
- uid: DMediatR.ClientCertificateProvider.Handle(DMediatR.ClientCertificateRequest,System.Threading.CancellationToken)
  name: Handle(ClientCertificateRequest, CancellationToken)
  href: api/DMediatR.ClientCertificateProvider.html#DMediatR_ClientCertificateProvider_Handle_DMediatR_ClientCertificateRequest_System_Threading_CancellationToken_
  commentId: M:DMediatR.ClientCertificateProvider.Handle(DMediatR.ClientCertificateRequest,System.Threading.CancellationToken)
  fullName: DMediatR.ClientCertificateProvider.Handle(DMediatR.ClientCertificateRequest, System.Threading.CancellationToken)
  nameWithType: ClientCertificateProvider.Handle(ClientCertificateRequest, CancellationToken)
- uid: DMediatR.ClientCertificateProvider.Handle*
  name: Handle
  href: api/DMediatR.ClientCertificateProvider.html#DMediatR_ClientCertificateProvider_Handle_
  commentId: Overload:DMediatR.ClientCertificateProvider.Handle
  isSpec: "True"
  fullName: DMediatR.ClientCertificateProvider.Handle
  nameWithType: ClientCertificateProvider.Handle
- uid: DMediatR.ClientCertificateProviderRemote
  name: ClientCertificateProviderRemote
  href: api/DMediatR.ClientCertificateProviderRemote.html
  commentId: T:DMediatR.ClientCertificateProviderRemote
  fullName: DMediatR.ClientCertificateProviderRemote
  nameWithType: ClientCertificateProviderRemote
- uid: DMediatR.ClientCertificateProviderRemote.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name: ClientCertificateProviderRemote(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  href: api/DMediatR.ClientCertificateProviderRemote.html#DMediatR_ClientCertificateProviderRemote__ctor_CertificateManager_CreateCertificatesClientServerAuth_Microsoft_Extensions_Options_IOptions_DMediatR_HostOptions__Microsoft_Extensions_Options_IOptions_DMediatR_CertificateOptions__Microsoft_Extensions_Options_IOptions_DMediatR_RemotesOptions__MediatR_IMediator_DMediatR_ISerializer_DMediatR_IGrpcChannelPool_CertificateManager_ImportExportCertificate_
  commentId: M:DMediatR.ClientCertificateProviderRemote.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name.vb: New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  fullName: DMediatR.ClientCertificateProviderRemote.ClientCertificateProviderRemote(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions<DMediatR.HostOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.CertificateOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.RemotesOptions>, MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  fullName.vb: DMediatR.ClientCertificateProviderRemote.New(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions(Of DMediatR.HostOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.CertificateOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.RemotesOptions), MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  nameWithType: ClientCertificateProviderRemote.ClientCertificateProviderRemote(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  nameWithType.vb: ClientCertificateProviderRemote.New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
- uid: DMediatR.ClientCertificateProviderRemote.#ctor*
  name: ClientCertificateProviderRemote
  href: api/DMediatR.ClientCertificateProviderRemote.html#DMediatR_ClientCertificateProviderRemote__ctor_
  commentId: Overload:DMediatR.ClientCertificateProviderRemote.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.ClientCertificateProviderRemote.ClientCertificateProviderRemote
  fullName.vb: DMediatR.ClientCertificateProviderRemote.New
  nameWithType: ClientCertificateProviderRemote.ClientCertificateProviderRemote
  nameWithType.vb: ClientCertificateProviderRemote.New
- uid: DMediatR.ClientCertificateProviderRemote.Handle(DMediatR.ClientCertificateRequest,System.Threading.CancellationToken)
  name: Handle(ClientCertificateRequest, CancellationToken)
  href: api/DMediatR.ClientCertificateProviderRemote.html#DMediatR_ClientCertificateProviderRemote_Handle_DMediatR_ClientCertificateRequest_System_Threading_CancellationToken_
  commentId: M:DMediatR.ClientCertificateProviderRemote.Handle(DMediatR.ClientCertificateRequest,System.Threading.CancellationToken)
  fullName: DMediatR.ClientCertificateProviderRemote.Handle(DMediatR.ClientCertificateRequest, System.Threading.CancellationToken)
  nameWithType: ClientCertificateProviderRemote.Handle(ClientCertificateRequest, CancellationToken)
- uid: DMediatR.ClientCertificateProviderRemote.Handle*
  name: Handle
  href: api/DMediatR.ClientCertificateProviderRemote.html#DMediatR_ClientCertificateProviderRemote_Handle_
  commentId: Overload:DMediatR.ClientCertificateProviderRemote.Handle
  isSpec: "True"
  fullName: DMediatR.ClientCertificateProviderRemote.Handle
  nameWithType: ClientCertificateProviderRemote.Handle
- uid: DMediatR.ClientCertificateRequest
  name: ClientCertificateRequest
  href: api/DMediatR.ClientCertificateRequest.html
  commentId: T:DMediatR.ClientCertificateRequest
  fullName: DMediatR.ClientCertificateRequest
  nameWithType: ClientCertificateRequest
- uid: DMediatR.ClientCertificateRequest.ParentCertificateRequest
  name: ParentCertificateRequest
  href: api/DMediatR.ClientCertificateRequest.html#DMediatR_ClientCertificateRequest_ParentCertificateRequest
  commentId: P:DMediatR.ClientCertificateRequest.ParentCertificateRequest
  fullName: DMediatR.ClientCertificateRequest.ParentCertificateRequest
  nameWithType: ClientCertificateRequest.ParentCertificateRequest
- uid: DMediatR.ClientCertificateRequest.ParentCertificateRequest*
  name: ParentCertificateRequest
  href: api/DMediatR.ClientCertificateRequest.html#DMediatR_ClientCertificateRequest_ParentCertificateRequest_
  commentId: Overload:DMediatR.ClientCertificateRequest.ParentCertificateRequest
  isSpec: "True"
  fullName: DMediatR.ClientCertificateRequest.ParentCertificateRequest
  nameWithType: ClientCertificateRequest.ParentCertificateRequest
- uid: DMediatR.Dto
  name: Dto
  href: api/DMediatR.Dto.html
  commentId: T:DMediatR.Dto
  fullName: DMediatR.Dto
  nameWithType: Dto
- uid: DMediatR.Dto.Bytes
  name: Bytes
  href: api/DMediatR.Dto.html#DMediatR_Dto_Bytes
  commentId: P:DMediatR.Dto.Bytes
  fullName: DMediatR.Dto.Bytes
  nameWithType: Dto.Bytes
- uid: DMediatR.Dto.Bytes*
  name: Bytes
  href: api/DMediatR.Dto.html#DMediatR_Dto_Bytes_
  commentId: Overload:DMediatR.Dto.Bytes
  isSpec: "True"
  fullName: DMediatR.Dto.Bytes
  nameWithType: Dto.Bytes
- uid: DMediatR.Dto.Type
  name: Type
  href: api/DMediatR.Dto.html#DMediatR_Dto_Type
  commentId: P:DMediatR.Dto.Type
  fullName: DMediatR.Dto.Type
  nameWithType: Dto.Type
- uid: DMediatR.Dto.Type*
  name: Type
  href: api/DMediatR.Dto.html#DMediatR_Dto_Type_
  commentId: Overload:DMediatR.Dto.Type
  isSpec: "True"
  fullName: DMediatR.Dto.Type
  nameWithType: Dto.Type
- uid: DMediatR.DtoService
  name: DtoService
  href: api/DMediatR.DtoService.html
  commentId: T:DMediatR.DtoService
  fullName: DMediatR.DtoService
  nameWithType: DtoService
- uid: DMediatR.DtoService.#ctor(System.IServiceProvider,MediatR.IMediator,DMediatR.ISerializer)
  name: DtoService(IServiceProvider, IMediator, ISerializer)
  href: api/DMediatR.DtoService.html#DMediatR_DtoService__ctor_System_IServiceProvider_MediatR_IMediator_DMediatR_ISerializer_
  commentId: M:DMediatR.DtoService.#ctor(System.IServiceProvider,MediatR.IMediator,DMediatR.ISerializer)
  name.vb: New(IServiceProvider, IMediator, ISerializer)
  fullName: DMediatR.DtoService.DtoService(System.IServiceProvider, MediatR.IMediator, DMediatR.ISerializer)
  fullName.vb: DMediatR.DtoService.New(System.IServiceProvider, MediatR.IMediator, DMediatR.ISerializer)
  nameWithType: DtoService.DtoService(IServiceProvider, IMediator, ISerializer)
  nameWithType.vb: DtoService.New(IServiceProvider, IMediator, ISerializer)
- uid: DMediatR.DtoService.#ctor*
  name: DtoService
  href: api/DMediatR.DtoService.html#DMediatR_DtoService__ctor_
  commentId: Overload:DMediatR.DtoService.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.DtoService.DtoService
  fullName.vb: DMediatR.DtoService.New
  nameWithType: DtoService.DtoService
  nameWithType.vb: DtoService.New
- uid: DMediatR.DtoService.PublishAsync(DMediatR.Dto,ProtoBuf.Grpc.CallContext)
  name: PublishAsync(Dto, CallContext)
  href: api/DMediatR.DtoService.html#DMediatR_DtoService_PublishAsync_DMediatR_Dto_ProtoBuf_Grpc_CallContext_
  commentId: M:DMediatR.DtoService.PublishAsync(DMediatR.Dto,ProtoBuf.Grpc.CallContext)
  fullName: DMediatR.DtoService.PublishAsync(DMediatR.Dto, ProtoBuf.Grpc.CallContext)
  nameWithType: DtoService.PublishAsync(Dto, CallContext)
- uid: DMediatR.DtoService.PublishAsync*
  name: PublishAsync
  href: api/DMediatR.DtoService.html#DMediatR_DtoService_PublishAsync_
  commentId: Overload:DMediatR.DtoService.PublishAsync
  isSpec: "True"
  fullName: DMediatR.DtoService.PublishAsync
  nameWithType: DtoService.PublishAsync
- uid: DMediatR.DtoService.SendAsync(DMediatR.Dto,ProtoBuf.Grpc.CallContext)
  name: SendAsync(Dto, CallContext)
  href: api/DMediatR.DtoService.html#DMediatR_DtoService_SendAsync_DMediatR_Dto_ProtoBuf_Grpc_CallContext_
  commentId: M:DMediatR.DtoService.SendAsync(DMediatR.Dto,ProtoBuf.Grpc.CallContext)
  fullName: DMediatR.DtoService.SendAsync(DMediatR.Dto, ProtoBuf.Grpc.CallContext)
  nameWithType: DtoService.SendAsync(Dto, CallContext)
- uid: DMediatR.DtoService.SendAsync*
  name: SendAsync
  href: api/DMediatR.DtoService.html#DMediatR_DtoService_SendAsync_
  commentId: Overload:DMediatR.DtoService.SendAsync
  isSpec: "True"
  fullName: DMediatR.DtoService.SendAsync
  nameWithType: DtoService.SendAsync
- uid: DMediatR.GrpcChannelPool
  name: GrpcChannelPool
  href: api/DMediatR.GrpcChannelPool.html
  commentId: T:DMediatR.GrpcChannelPool
  fullName: DMediatR.GrpcChannelPool
  nameWithType: GrpcChannelPool
- uid: DMediatR.GrpcChannelPool.Dispose
  name: Dispose()
  href: api/DMediatR.GrpcChannelPool.html#DMediatR_GrpcChannelPool_Dispose
  commentId: M:DMediatR.GrpcChannelPool.Dispose
  fullName: DMediatR.GrpcChannelPool.Dispose()
  nameWithType: GrpcChannelPool.Dispose()
- uid: DMediatR.GrpcChannelPool.Dispose*
  name: Dispose
  href: api/DMediatR.GrpcChannelPool.html#DMediatR_GrpcChannelPool_Dispose_
  commentId: Overload:DMediatR.GrpcChannelPool.Dispose
  isSpec: "True"
  fullName: DMediatR.GrpcChannelPool.Dispose
  nameWithType: GrpcChannelPool.Dispose
- uid: DMediatR.GrpcChannelPool.ForAddress(System.String,System.Net.Http.HttpClientHandler)
  name: ForAddress(string, HttpClientHandler)
  href: api/DMediatR.GrpcChannelPool.html#DMediatR_GrpcChannelPool_ForAddress_System_String_System_Net_Http_HttpClientHandler_
  commentId: M:DMediatR.GrpcChannelPool.ForAddress(System.String,System.Net.Http.HttpClientHandler)
  name.vb: ForAddress(String, HttpClientHandler)
  fullName: DMediatR.GrpcChannelPool.ForAddress(string, System.Net.Http.HttpClientHandler)
  fullName.vb: DMediatR.GrpcChannelPool.ForAddress(String, System.Net.Http.HttpClientHandler)
  nameWithType: GrpcChannelPool.ForAddress(string, HttpClientHandler)
  nameWithType.vb: GrpcChannelPool.ForAddress(String, HttpClientHandler)
- uid: DMediatR.GrpcChannelPool.ForAddress*
  name: ForAddress
  href: api/DMediatR.GrpcChannelPool.html#DMediatR_GrpcChannelPool_ForAddress_
  commentId: Overload:DMediatR.GrpcChannelPool.ForAddress
  isSpec: "True"
  fullName: DMediatR.GrpcChannelPool.ForAddress
  nameWithType: GrpcChannelPool.ForAddress
- uid: DMediatR.GrpcPort
  name: GrpcPort
  href: api/DMediatR.GrpcPort.html
  commentId: T:DMediatR.GrpcPort
  fullName: DMediatR.GrpcPort
  nameWithType: GrpcPort
- uid: DMediatR.GrpcPort.UseDefault
  name: UseDefault
  href: api/DMediatR.GrpcPort.html#DMediatR_GrpcPort_UseDefault
  commentId: F:DMediatR.GrpcPort.UseDefault
  fullName: DMediatR.GrpcPort.UseDefault
  nameWithType: GrpcPort.UseDefault
- uid: DMediatR.GrpcPort.UseRenew
  name: UseRenew
  href: api/DMediatR.GrpcPort.html#DMediatR_GrpcPort_UseRenew
  commentId: F:DMediatR.GrpcPort.UseRenew
  fullName: DMediatR.GrpcPort.UseRenew
  nameWithType: GrpcPort.UseRenew
- uid: DMediatR.GrpcServer
  name: GrpcServer
  href: api/DMediatR.GrpcServer.html
  commentId: T:DMediatR.GrpcServer
  fullName: DMediatR.GrpcServer
  nameWithType: GrpcServer
- uid: DMediatR.GrpcServer.CreateWebApp(Microsoft.AspNetCore.Builder.WebApplicationBuilder,DMediatR.GrpcPort)
  name: CreateWebApp(WebApplicationBuilder, GrpcPort)
  href: api/DMediatR.GrpcServer.html#DMediatR_GrpcServer_CreateWebApp_Microsoft_AspNetCore_Builder_WebApplicationBuilder_DMediatR_GrpcPort_
  commentId: M:DMediatR.GrpcServer.CreateWebApp(Microsoft.AspNetCore.Builder.WebApplicationBuilder,DMediatR.GrpcPort)
  fullName: DMediatR.GrpcServer.CreateWebApp(Microsoft.AspNetCore.Builder.WebApplicationBuilder, DMediatR.GrpcPort)
  nameWithType: GrpcServer.CreateWebApp(WebApplicationBuilder, GrpcPort)
- uid: DMediatR.GrpcServer.CreateWebApp*
  name: CreateWebApp
  href: api/DMediatR.GrpcServer.html#DMediatR_GrpcServer_CreateWebApp_
  commentId: Overload:DMediatR.GrpcServer.CreateWebApp
  isSpec: "True"
  fullName: DMediatR.GrpcServer.CreateWebApp
  nameWithType: GrpcServer.CreateWebApp
- uid: DMediatR.GrpcServer.CreateWebAppBuilder(System.String[])
  name: CreateWebAppBuilder(string[])
  href: api/DMediatR.GrpcServer.html#DMediatR_GrpcServer_CreateWebAppBuilder_System_String___
  commentId: M:DMediatR.GrpcServer.CreateWebAppBuilder(System.String[])
  name.vb: CreateWebAppBuilder(String())
  fullName: DMediatR.GrpcServer.CreateWebAppBuilder(string[])
  fullName.vb: DMediatR.GrpcServer.CreateWebAppBuilder(String())
  nameWithType: GrpcServer.CreateWebAppBuilder(string[])
  nameWithType.vb: GrpcServer.CreateWebAppBuilder(String())
- uid: DMediatR.GrpcServer.CreateWebAppBuilder*
  name: CreateWebAppBuilder
  href: api/DMediatR.GrpcServer.html#DMediatR_GrpcServer_CreateWebAppBuilder_
  commentId: Overload:DMediatR.GrpcServer.CreateWebAppBuilder
  isSpec: "True"
  fullName: DMediatR.GrpcServer.CreateWebAppBuilder
  nameWithType: GrpcServer.CreateWebAppBuilder
- uid: DMediatR.GrpcServer.RunRestartWebAppAsync(System.String[],DMediatR.GrpcPort,System.Threading.CancellationToken)
  name: RunRestartWebAppAsync(string[], GrpcPort, CancellationToken)
  href: api/DMediatR.GrpcServer.html#DMediatR_GrpcServer_RunRestartWebAppAsync_System_String___DMediatR_GrpcPort_System_Threading_CancellationToken_
  commentId: M:DMediatR.GrpcServer.RunRestartWebAppAsync(System.String[],DMediatR.GrpcPort,System.Threading.CancellationToken)
  name.vb: RunRestartWebAppAsync(String(), GrpcPort, CancellationToken)
  fullName: DMediatR.GrpcServer.RunRestartWebAppAsync(string[], DMediatR.GrpcPort, System.Threading.CancellationToken)
  fullName.vb: DMediatR.GrpcServer.RunRestartWebAppAsync(String(), DMediatR.GrpcPort, System.Threading.CancellationToken)
  nameWithType: GrpcServer.RunRestartWebAppAsync(string[], GrpcPort, CancellationToken)
  nameWithType.vb: GrpcServer.RunRestartWebAppAsync(String(), GrpcPort, CancellationToken)
- uid: DMediatR.GrpcServer.RunRestartWebAppAsync*
  name: RunRestartWebAppAsync
  href: api/DMediatR.GrpcServer.html#DMediatR_GrpcServer_RunRestartWebAppAsync_
  commentId: Overload:DMediatR.GrpcServer.RunRestartWebAppAsync
  isSpec: "True"
  fullName: DMediatR.GrpcServer.RunRestartWebAppAsync
  nameWithType: GrpcServer.RunRestartWebAppAsync
- uid: DMediatR.HostOptions
  name: HostOptions
  href: api/DMediatR.HostOptions.html
  commentId: T:DMediatR.HostOptions
  fullName: DMediatR.HostOptions
  nameWithType: HostOptions
- uid: DMediatR.HostOptions.GrpcPort
  name: GrpcPort
  href: api/DMediatR.HostOptions.html#DMediatR_HostOptions_GrpcPort
  commentId: P:DMediatR.HostOptions.GrpcPort
  fullName: DMediatR.HostOptions.GrpcPort
  nameWithType: HostOptions.GrpcPort
- uid: DMediatR.HostOptions.GrpcPort*
  name: GrpcPort
  href: api/DMediatR.HostOptions.html#DMediatR_HostOptions_GrpcPort_
  commentId: Overload:DMediatR.HostOptions.GrpcPort
  isSpec: "True"
  fullName: DMediatR.HostOptions.GrpcPort
  nameWithType: HostOptions.GrpcPort
- uid: DMediatR.HostOptions.Host
  name: Host
  href: api/DMediatR.HostOptions.html#DMediatR_HostOptions_Host
  commentId: P:DMediatR.HostOptions.Host
  fullName: DMediatR.HostOptions.Host
  nameWithType: HostOptions.Host
- uid: DMediatR.HostOptions.Host*
  name: Host
  href: api/DMediatR.HostOptions.html#DMediatR_HostOptions_Host_
  commentId: Overload:DMediatR.HostOptions.Host
  isSpec: "True"
  fullName: DMediatR.HostOptions.Host
  nameWithType: HostOptions.Host
- uid: DMediatR.HostOptions.OldPort
  name: OldPort
  href: api/DMediatR.HostOptions.html#DMediatR_HostOptions_OldPort
  commentId: P:DMediatR.HostOptions.OldPort
  fullName: DMediatR.HostOptions.OldPort
  nameWithType: HostOptions.OldPort
- uid: DMediatR.HostOptions.OldPort*
  name: OldPort
  href: api/DMediatR.HostOptions.html#DMediatR_HostOptions_OldPort_
  commentId: Overload:DMediatR.HostOptions.OldPort
  isSpec: "True"
  fullName: DMediatR.HostOptions.OldPort
  nameWithType: HostOptions.OldPort
- uid: DMediatR.HostOptions.Port
  name: Port
  href: api/DMediatR.HostOptions.html#DMediatR_HostOptions_Port
  commentId: P:DMediatR.HostOptions.Port
  fullName: DMediatR.HostOptions.Port
  nameWithType: HostOptions.Port
- uid: DMediatR.HostOptions.Port*
  name: Port
  href: api/DMediatR.HostOptions.html#DMediatR_HostOptions_Port_
  commentId: Overload:DMediatR.HostOptions.Port
  isSpec: "True"
  fullName: DMediatR.HostOptions.Port
  nameWithType: HostOptions.Port
- uid: DMediatR.HostOptions.SectionName
  name: SectionName
  href: api/DMediatR.HostOptions.html#DMediatR_HostOptions_SectionName
  commentId: F:DMediatR.HostOptions.SectionName
  fullName: DMediatR.HostOptions.SectionName
  nameWithType: HostOptions.SectionName
- uid: DMediatR.ICorrelatedNotification
  name: ICorrelatedNotification
  href: api/DMediatR.ICorrelatedNotification.html
  commentId: T:DMediatR.ICorrelatedNotification
  fullName: DMediatR.ICorrelatedNotification
  nameWithType: ICorrelatedNotification
- uid: DMediatR.ICorrelatedNotification.CorrelationGuid
  name: CorrelationGuid
  href: api/DMediatR.ICorrelatedNotification.html#DMediatR_ICorrelatedNotification_CorrelationGuid
  commentId: P:DMediatR.ICorrelatedNotification.CorrelationGuid
  fullName: DMediatR.ICorrelatedNotification.CorrelationGuid
  nameWithType: ICorrelatedNotification.CorrelationGuid
- uid: DMediatR.ICorrelatedNotification.CorrelationGuid*
  name: CorrelationGuid
  href: api/DMediatR.ICorrelatedNotification.html#DMediatR_ICorrelatedNotification_CorrelationGuid_
  commentId: Overload:DMediatR.ICorrelatedNotification.CorrelationGuid
  isSpec: "True"
  fullName: DMediatR.ICorrelatedNotification.CorrelationGuid
  nameWithType: ICorrelatedNotification.CorrelationGuid
- uid: DMediatR.IDtoService
  name: IDtoService
  href: api/DMediatR.IDtoService.html
  commentId: T:DMediatR.IDtoService
  fullName: DMediatR.IDtoService
  nameWithType: IDtoService
- uid: DMediatR.IDtoService.PublishAsync(DMediatR.Dto,ProtoBuf.Grpc.CallContext)
  name: PublishAsync(Dto, CallContext)
  href: api/DMediatR.IDtoService.html#DMediatR_IDtoService_PublishAsync_DMediatR_Dto_ProtoBuf_Grpc_CallContext_
  commentId: M:DMediatR.IDtoService.PublishAsync(DMediatR.Dto,ProtoBuf.Grpc.CallContext)
  fullName: DMediatR.IDtoService.PublishAsync(DMediatR.Dto, ProtoBuf.Grpc.CallContext)
  nameWithType: IDtoService.PublishAsync(Dto, CallContext)
- uid: DMediatR.IDtoService.PublishAsync*
  name: PublishAsync
  href: api/DMediatR.IDtoService.html#DMediatR_IDtoService_PublishAsync_
  commentId: Overload:DMediatR.IDtoService.PublishAsync
  isSpec: "True"
  fullName: DMediatR.IDtoService.PublishAsync
  nameWithType: IDtoService.PublishAsync
- uid: DMediatR.IDtoService.SendAsync(DMediatR.Dto,ProtoBuf.Grpc.CallContext)
  name: SendAsync(Dto, CallContext)
  href: api/DMediatR.IDtoService.html#DMediatR_IDtoService_SendAsync_DMediatR_Dto_ProtoBuf_Grpc_CallContext_
  commentId: M:DMediatR.IDtoService.SendAsync(DMediatR.Dto,ProtoBuf.Grpc.CallContext)
  fullName: DMediatR.IDtoService.SendAsync(DMediatR.Dto, ProtoBuf.Grpc.CallContext)
  nameWithType: IDtoService.SendAsync(Dto, CallContext)
- uid: DMediatR.IDtoService.SendAsync*
  name: SendAsync
  href: api/DMediatR.IDtoService.html#DMediatR_IDtoService_SendAsync_
  commentId: Overload:DMediatR.IDtoService.SendAsync
  isSpec: "True"
  fullName: DMediatR.IDtoService.SendAsync
  nameWithType: IDtoService.SendAsync
- uid: DMediatR.IGrpcChannelPool
  name: IGrpcChannelPool
  href: api/DMediatR.IGrpcChannelPool.html
  commentId: T:DMediatR.IGrpcChannelPool
  fullName: DMediatR.IGrpcChannelPool
  nameWithType: IGrpcChannelPool
- uid: DMediatR.IGrpcChannelPool.ForAddress(System.String,System.Net.Http.HttpClientHandler)
  name: ForAddress(string, HttpClientHandler)
  href: api/DMediatR.IGrpcChannelPool.html#DMediatR_IGrpcChannelPool_ForAddress_System_String_System_Net_Http_HttpClientHandler_
  commentId: M:DMediatR.IGrpcChannelPool.ForAddress(System.String,System.Net.Http.HttpClientHandler)
  name.vb: ForAddress(String, HttpClientHandler)
  fullName: DMediatR.IGrpcChannelPool.ForAddress(string, System.Net.Http.HttpClientHandler)
  fullName.vb: DMediatR.IGrpcChannelPool.ForAddress(String, System.Net.Http.HttpClientHandler)
  nameWithType: IGrpcChannelPool.ForAddress(string, HttpClientHandler)
  nameWithType.vb: IGrpcChannelPool.ForAddress(String, HttpClientHandler)
- uid: DMediatR.IGrpcChannelPool.ForAddress*
  name: ForAddress
  href: api/DMediatR.IGrpcChannelPool.html#DMediatR_IGrpcChannelPool_ForAddress_
  commentId: Overload:DMediatR.IGrpcChannelPool.ForAddress
  isSpec: "True"
  fullName: DMediatR.IGrpcChannelPool.ForAddress
  nameWithType: IGrpcChannelPool.ForAddress
- uid: DMediatR.IRemote
  name: IRemote
  href: api/DMediatR.IRemote.html
  commentId: T:DMediatR.IRemote
  fullName: DMediatR.IRemote
  nameWithType: IRemote
- uid: DMediatR.IRequestExtension
  name: IRequestExtension
  href: api/DMediatR.IRequestExtension.html
  commentId: T:DMediatR.IRequestExtension
  fullName: DMediatR.IRequestExtension
  nameWithType: IRequestExtension
- uid: DMediatR.IRequestExtension.GetResponseType(MediatR.IBaseRequest)
  name: GetResponseType(IBaseRequest)
  href: api/DMediatR.IRequestExtension.html#DMediatR_IRequestExtension_GetResponseType_MediatR_IBaseRequest_
  commentId: M:DMediatR.IRequestExtension.GetResponseType(MediatR.IBaseRequest)
  fullName: DMediatR.IRequestExtension.GetResponseType(MediatR.IBaseRequest)
  nameWithType: IRequestExtension.GetResponseType(IBaseRequest)
- uid: DMediatR.IRequestExtension.GetResponseType*
  name: GetResponseType
  href: api/DMediatR.IRequestExtension.html#DMediatR_IRequestExtension_GetResponseType_
  commentId: Overload:DMediatR.IRequestExtension.GetResponseType
  isSpec: "True"
  fullName: DMediatR.IRequestExtension.GetResponseType
  nameWithType: IRequestExtension.GetResponseType
- uid: DMediatR.ISerializer
  name: ISerializer
  href: api/DMediatR.ISerializer.html
  commentId: T:DMediatR.ISerializer
  fullName: DMediatR.ISerializer
  nameWithType: ISerializer
- uid: DMediatR.ISerializer.Deserialize(System.Type,System.Byte[])
  name: Deserialize(Type, byte[])
  href: api/DMediatR.ISerializer.html#DMediatR_ISerializer_Deserialize_System_Type_System_Byte___
  commentId: M:DMediatR.ISerializer.Deserialize(System.Type,System.Byte[])
  name.vb: Deserialize(Type, Byte())
  fullName: DMediatR.ISerializer.Deserialize(System.Type, byte[])
  fullName.vb: DMediatR.ISerializer.Deserialize(System.Type, Byte())
  nameWithType: ISerializer.Deserialize(Type, byte[])
  nameWithType.vb: ISerializer.Deserialize(Type, Byte())
- uid: DMediatR.ISerializer.Deserialize*
  name: Deserialize
  href: api/DMediatR.ISerializer.html#DMediatR_ISerializer_Deserialize_
  commentId: Overload:DMediatR.ISerializer.Deserialize
  isSpec: "True"
  fullName: DMediatR.ISerializer.Deserialize
  nameWithType: ISerializer.Deserialize
- uid: DMediatR.ISerializer.Deserialize``1(System.Byte[])
  name: Deserialize<T>(byte[])
  href: api/DMediatR.ISerializer.html#DMediatR_ISerializer_Deserialize__1_System_Byte___
  commentId: M:DMediatR.ISerializer.Deserialize``1(System.Byte[])
  name.vb: Deserialize(Of T)(Byte())
  fullName: DMediatR.ISerializer.Deserialize<T>(byte[])
  fullName.vb: DMediatR.ISerializer.Deserialize(Of T)(Byte())
  nameWithType: ISerializer.Deserialize<T>(byte[])
  nameWithType.vb: ISerializer.Deserialize(Of T)(Byte())
- uid: DMediatR.ISerializer.Deserialize``1(System.Type,System.Byte[])
  name: Deserialize<T>(Type, byte[])
  href: api/DMediatR.ISerializer.html#DMediatR_ISerializer_Deserialize__1_System_Type_System_Byte___
  commentId: M:DMediatR.ISerializer.Deserialize``1(System.Type,System.Byte[])
  name.vb: Deserialize(Of T)(Type, Byte())
  fullName: DMediatR.ISerializer.Deserialize<T>(System.Type, byte[])
  fullName.vb: DMediatR.ISerializer.Deserialize(Of T)(System.Type, Byte())
  nameWithType: ISerializer.Deserialize<T>(Type, byte[])
  nameWithType.vb: ISerializer.Deserialize(Of T)(Type, Byte())
- uid: DMediatR.ISerializer.Serialize(System.Object)
  name: Serialize(object)
  href: api/DMediatR.ISerializer.html#DMediatR_ISerializer_Serialize_System_Object_
  commentId: M:DMediatR.ISerializer.Serialize(System.Object)
  name.vb: Serialize(Object)
  fullName: DMediatR.ISerializer.Serialize(object)
  fullName.vb: DMediatR.ISerializer.Serialize(Object)
  nameWithType: ISerializer.Serialize(object)
  nameWithType.vb: ISerializer.Serialize(Object)
- uid: DMediatR.ISerializer.Serialize*
  name: Serialize
  href: api/DMediatR.ISerializer.html#DMediatR_ISerializer_Serialize_
  commentId: Overload:DMediatR.ISerializer.Serialize
  isSpec: "True"
  fullName: DMediatR.ISerializer.Serialize
  nameWithType: ISerializer.Serialize
- uid: DMediatR.IntermediateCertificateProvider
  name: IntermediateCertificateProvider
  href: api/DMediatR.IntermediateCertificateProvider.html
  commentId: T:DMediatR.IntermediateCertificateProvider
  fullName: DMediatR.IntermediateCertificateProvider
  nameWithType: IntermediateCertificateProvider
- uid: DMediatR.IntermediateCertificateProvider.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name: IntermediateCertificateProvider(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  href: api/DMediatR.IntermediateCertificateProvider.html#DMediatR_IntermediateCertificateProvider__ctor_CertificateManager_CreateCertificatesClientServerAuth_Microsoft_Extensions_Options_IOptions_DMediatR_HostOptions__Microsoft_Extensions_Options_IOptions_DMediatR_CertificateOptions__Microsoft_Extensions_Options_IOptions_DMediatR_RemotesOptions__MediatR_IMediator_DMediatR_ISerializer_DMediatR_IGrpcChannelPool_CertificateManager_ImportExportCertificate_
  commentId: M:DMediatR.IntermediateCertificateProvider.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name.vb: New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  fullName: DMediatR.IntermediateCertificateProvider.IntermediateCertificateProvider(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions<DMediatR.HostOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.CertificateOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.RemotesOptions>, MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  fullName.vb: DMediatR.IntermediateCertificateProvider.New(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions(Of DMediatR.HostOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.CertificateOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.RemotesOptions), MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  nameWithType: IntermediateCertificateProvider.IntermediateCertificateProvider(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  nameWithType.vb: IntermediateCertificateProvider.New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
- uid: DMediatR.IntermediateCertificateProvider.#ctor*
  name: IntermediateCertificateProvider
  href: api/DMediatR.IntermediateCertificateProvider.html#DMediatR_IntermediateCertificateProvider__ctor_
  commentId: Overload:DMediatR.IntermediateCertificateProvider.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.IntermediateCertificateProvider.IntermediateCertificateProvider
  fullName.vb: DMediatR.IntermediateCertificateProvider.New
  nameWithType: IntermediateCertificateProvider.IntermediateCertificateProvider
  nameWithType.vb: IntermediateCertificateProvider.New
- uid: DMediatR.IntermediateCertificateProvider.Handle(DMediatR.IntermediateCertificateRequest,System.Threading.CancellationToken)
  name: Handle(IntermediateCertificateRequest, CancellationToken)
  href: api/DMediatR.IntermediateCertificateProvider.html#DMediatR_IntermediateCertificateProvider_Handle_DMediatR_IntermediateCertificateRequest_System_Threading_CancellationToken_
  commentId: M:DMediatR.IntermediateCertificateProvider.Handle(DMediatR.IntermediateCertificateRequest,System.Threading.CancellationToken)
  fullName: DMediatR.IntermediateCertificateProvider.Handle(DMediatR.IntermediateCertificateRequest, System.Threading.CancellationToken)
  nameWithType: IntermediateCertificateProvider.Handle(IntermediateCertificateRequest, CancellationToken)
- uid: DMediatR.IntermediateCertificateProvider.Handle*
  name: Handle
  href: api/DMediatR.IntermediateCertificateProvider.html#DMediatR_IntermediateCertificateProvider_Handle_
  commentId: Overload:DMediatR.IntermediateCertificateProvider.Handle
  isSpec: "True"
  fullName: DMediatR.IntermediateCertificateProvider.Handle
  nameWithType: IntermediateCertificateProvider.Handle
- uid: DMediatR.IntermediateCertificateProviderRemote
  name: IntermediateCertificateProviderRemote
  href: api/DMediatR.IntermediateCertificateProviderRemote.html
  commentId: T:DMediatR.IntermediateCertificateProviderRemote
  fullName: DMediatR.IntermediateCertificateProviderRemote
  nameWithType: IntermediateCertificateProviderRemote
- uid: DMediatR.IntermediateCertificateProviderRemote.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name: IntermediateCertificateProviderRemote(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  href: api/DMediatR.IntermediateCertificateProviderRemote.html#DMediatR_IntermediateCertificateProviderRemote__ctor_CertificateManager_CreateCertificatesClientServerAuth_Microsoft_Extensions_Options_IOptions_DMediatR_HostOptions__Microsoft_Extensions_Options_IOptions_DMediatR_CertificateOptions__Microsoft_Extensions_Options_IOptions_DMediatR_RemotesOptions__MediatR_IMediator_DMediatR_ISerializer_DMediatR_IGrpcChannelPool_CertificateManager_ImportExportCertificate_
  commentId: M:DMediatR.IntermediateCertificateProviderRemote.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name.vb: New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  fullName: DMediatR.IntermediateCertificateProviderRemote.IntermediateCertificateProviderRemote(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions<DMediatR.HostOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.CertificateOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.RemotesOptions>, MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  fullName.vb: DMediatR.IntermediateCertificateProviderRemote.New(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions(Of DMediatR.HostOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.CertificateOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.RemotesOptions), MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  nameWithType: IntermediateCertificateProviderRemote.IntermediateCertificateProviderRemote(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  nameWithType.vb: IntermediateCertificateProviderRemote.New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
- uid: DMediatR.IntermediateCertificateProviderRemote.#ctor*
  name: IntermediateCertificateProviderRemote
  href: api/DMediatR.IntermediateCertificateProviderRemote.html#DMediatR_IntermediateCertificateProviderRemote__ctor_
  commentId: Overload:DMediatR.IntermediateCertificateProviderRemote.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.IntermediateCertificateProviderRemote.IntermediateCertificateProviderRemote
  fullName.vb: DMediatR.IntermediateCertificateProviderRemote.New
  nameWithType: IntermediateCertificateProviderRemote.IntermediateCertificateProviderRemote
  nameWithType.vb: IntermediateCertificateProviderRemote.New
- uid: DMediatR.IntermediateCertificateProviderRemote.Handle(DMediatR.IntermediateCertificateRequest,System.Threading.CancellationToken)
  name: Handle(IntermediateCertificateRequest, CancellationToken)
  href: api/DMediatR.IntermediateCertificateProviderRemote.html#DMediatR_IntermediateCertificateProviderRemote_Handle_DMediatR_IntermediateCertificateRequest_System_Threading_CancellationToken_
  commentId: M:DMediatR.IntermediateCertificateProviderRemote.Handle(DMediatR.IntermediateCertificateRequest,System.Threading.CancellationToken)
  fullName: DMediatR.IntermediateCertificateProviderRemote.Handle(DMediatR.IntermediateCertificateRequest, System.Threading.CancellationToken)
  nameWithType: IntermediateCertificateProviderRemote.Handle(IntermediateCertificateRequest, CancellationToken)
- uid: DMediatR.IntermediateCertificateProviderRemote.Handle*
  name: Handle
  href: api/DMediatR.IntermediateCertificateProviderRemote.html#DMediatR_IntermediateCertificateProviderRemote_Handle_
  commentId: Overload:DMediatR.IntermediateCertificateProviderRemote.Handle
  isSpec: "True"
  fullName: DMediatR.IntermediateCertificateProviderRemote.Handle
  nameWithType: IntermediateCertificateProviderRemote.Handle
- uid: DMediatR.IntermediateCertificateRequest
  name: IntermediateCertificateRequest
  href: api/DMediatR.IntermediateCertificateRequest.html
  commentId: T:DMediatR.IntermediateCertificateRequest
  fullName: DMediatR.IntermediateCertificateRequest
  nameWithType: IntermediateCertificateRequest
- uid: DMediatR.IntermediateCertificateRequest.ParentCertificateRequest
  name: ParentCertificateRequest
  href: api/DMediatR.IntermediateCertificateRequest.html#DMediatR_IntermediateCertificateRequest_ParentCertificateRequest
  commentId: P:DMediatR.IntermediateCertificateRequest.ParentCertificateRequest
  fullName: DMediatR.IntermediateCertificateRequest.ParentCertificateRequest
  nameWithType: IntermediateCertificateRequest.ParentCertificateRequest
- uid: DMediatR.IntermediateCertificateRequest.ParentCertificateRequest*
  name: ParentCertificateRequest
  href: api/DMediatR.IntermediateCertificateRequest.html#DMediatR_IntermediateCertificateRequest_ParentCertificateRequest_
  commentId: Overload:DMediatR.IntermediateCertificateRequest.ParentCertificateRequest
  isSpec: "True"
  fullName: DMediatR.IntermediateCertificateRequest.ParentCertificateRequest
  nameWithType: IntermediateCertificateRequest.ParentCertificateRequest
- uid: DMediatR.LocalAttribute
  name: LocalAttribute
  href: api/DMediatR.LocalAttribute.html
  commentId: T:DMediatR.LocalAttribute
  fullName: DMediatR.LocalAttribute
  nameWithType: LocalAttribute
- uid: DMediatR.LocalAttribute.#ctor(System.String)
  name: LocalAttribute(string)
  href: api/DMediatR.LocalAttribute.html#DMediatR_LocalAttribute__ctor_System_String_
  commentId: M:DMediatR.LocalAttribute.#ctor(System.String)
  name.vb: New(String)
  fullName: DMediatR.LocalAttribute.LocalAttribute(string)
  fullName.vb: DMediatR.LocalAttribute.New(String)
  nameWithType: LocalAttribute.LocalAttribute(string)
  nameWithType.vb: LocalAttribute.New(String)
- uid: DMediatR.LocalAttribute.#ctor*
  name: LocalAttribute
  href: api/DMediatR.LocalAttribute.html#DMediatR_LocalAttribute__ctor_
  commentId: Overload:DMediatR.LocalAttribute.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.LocalAttribute.LocalAttribute
  fullName.vb: DMediatR.LocalAttribute.New
  nameWithType: LocalAttribute.LocalAttribute
  nameWithType.vb: LocalAttribute.New
- uid: DMediatR.LocalAttribute.RemoteName(System.Type)
  name: RemoteName(Type)
  href: api/DMediatR.LocalAttribute.html#DMediatR_LocalAttribute_RemoteName_System_Type_
  commentId: M:DMediatR.LocalAttribute.RemoteName(System.Type)
  fullName: DMediatR.LocalAttribute.RemoteName(System.Type)
  nameWithType: LocalAttribute.RemoteName(Type)
- uid: DMediatR.LocalAttribute.RemoteName*
  name: RemoteName
  href: api/DMediatR.LocalAttribute.html#DMediatR_LocalAttribute_RemoteName_
  commentId: Overload:DMediatR.LocalAttribute.RemoteName
  isSpec: "True"
  fullName: DMediatR.LocalAttribute.RemoteName
  nameWithType: LocalAttribute.RemoteName
- uid: DMediatR.MemoryCacheGuidExtension
  name: MemoryCacheGuidExtension
  href: api/DMediatR.MemoryCacheGuidExtension.html
  commentId: T:DMediatR.MemoryCacheGuidExtension
  fullName: DMediatR.MemoryCacheGuidExtension
  nameWithType: MemoryCacheGuidExtension
- uid: DMediatR.MemoryCacheGuidExtension.HaveSeen(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Guid)
  name: HaveSeen(IMemoryCache, Guid)
  href: api/DMediatR.MemoryCacheGuidExtension.html#DMediatR_MemoryCacheGuidExtension_HaveSeen_Microsoft_Extensions_Caching_Memory_IMemoryCache_System_Guid_
  commentId: M:DMediatR.MemoryCacheGuidExtension.HaveSeen(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Guid)
  fullName: DMediatR.MemoryCacheGuidExtension.HaveSeen(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Guid)
  nameWithType: MemoryCacheGuidExtension.HaveSeen(IMemoryCache, Guid)
- uid: DMediatR.MemoryCacheGuidExtension.HaveSeen*
  name: HaveSeen
  href: api/DMediatR.MemoryCacheGuidExtension.html#DMediatR_MemoryCacheGuidExtension_HaveSeen_
  commentId: Overload:DMediatR.MemoryCacheGuidExtension.HaveSeen
  isSpec: "True"
  fullName: DMediatR.MemoryCacheGuidExtension.HaveSeen
  nameWithType: MemoryCacheGuidExtension.HaveSeen
- uid: DMediatR.RemoteAttribute
  name: RemoteAttribute
  href: api/DMediatR.RemoteAttribute.html
  commentId: T:DMediatR.RemoteAttribute
  fullName: DMediatR.RemoteAttribute
  nameWithType: RemoteAttribute
- uid: DMediatR.RemoteAttribute.#ctor(System.String)
  name: RemoteAttribute(string)
  href: api/DMediatR.RemoteAttribute.html#DMediatR_RemoteAttribute__ctor_System_String_
  commentId: M:DMediatR.RemoteAttribute.#ctor(System.String)
  name.vb: New(String)
  fullName: DMediatR.RemoteAttribute.RemoteAttribute(string)
  fullName.vb: DMediatR.RemoteAttribute.New(String)
  nameWithType: RemoteAttribute.RemoteAttribute(string)
  nameWithType.vb: RemoteAttribute.New(String)
- uid: DMediatR.RemoteAttribute.#ctor*
  name: RemoteAttribute
  href: api/DMediatR.RemoteAttribute.html#DMediatR_RemoteAttribute__ctor_
  commentId: Overload:DMediatR.RemoteAttribute.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.RemoteAttribute.RemoteAttribute
  fullName.vb: DMediatR.RemoteAttribute.New
  nameWithType: RemoteAttribute.RemoteAttribute
  nameWithType.vb: RemoteAttribute.New
- uid: DMediatR.RemoteAttribute.Name(System.Type)
  name: Name(Type)
  href: api/DMediatR.RemoteAttribute.html#DMediatR_RemoteAttribute_Name_System_Type_
  commentId: M:DMediatR.RemoteAttribute.Name(System.Type)
  fullName: DMediatR.RemoteAttribute.Name(System.Type)
  nameWithType: RemoteAttribute.Name(Type)
- uid: DMediatR.RemoteAttribute.Name*
  name: Name
  href: api/DMediatR.RemoteAttribute.html#DMediatR_RemoteAttribute_Name_
  commentId: Overload:DMediatR.RemoteAttribute.Name
  isSpec: "True"
  fullName: DMediatR.RemoteAttribute.Name
  nameWithType: RemoteAttribute.Name
- uid: DMediatR.RemoteConfigExtension
  name: RemoteConfigExtension
  href: api/DMediatR.RemoteConfigExtension.html
  commentId: T:DMediatR.RemoteConfigExtension
  fullName: DMediatR.RemoteConfigExtension
  nameWithType: RemoteConfigExtension
- uid: DMediatR.RemoteConfigExtension.SelectLocalRemote(Microsoft.Extensions.Configuration.IConfiguration,System.Type)
  name: SelectLocalRemote(IConfiguration, Type)
  href: api/DMediatR.RemoteConfigExtension.html#DMediatR_RemoteConfigExtension_SelectLocalRemote_Microsoft_Extensions_Configuration_IConfiguration_System_Type_
  commentId: M:DMediatR.RemoteConfigExtension.SelectLocalRemote(Microsoft.Extensions.Configuration.IConfiguration,System.Type)
  fullName: DMediatR.RemoteConfigExtension.SelectLocalRemote(Microsoft.Extensions.Configuration.IConfiguration, System.Type)
  nameWithType: RemoteConfigExtension.SelectLocalRemote(IConfiguration, Type)
- uid: DMediatR.RemoteConfigExtension.SelectLocalRemote*
  name: SelectLocalRemote
  href: api/DMediatR.RemoteConfigExtension.html#DMediatR_RemoteConfigExtension_SelectLocalRemote_
  commentId: Overload:DMediatR.RemoteConfigExtension.SelectLocalRemote
  isSpec: "True"
  fullName: DMediatR.RemoteConfigExtension.SelectLocalRemote
  nameWithType: RemoteConfigExtension.SelectLocalRemote
- uid: DMediatR.RemoteExtension
  name: RemoteExtension
  href: api/DMediatR.RemoteExtension.html
  commentId: T:DMediatR.RemoteExtension
  fullName: DMediatR.RemoteExtension
  nameWithType: RemoteExtension
- uid: DMediatR.RemoteExtension.PublishRemote(DMediatR.IRemote,MediatR.INotification,System.Threading.CancellationToken)
  name: PublishRemote(IRemote, INotification, CancellationToken)
  href: api/DMediatR.RemoteExtension.html#DMediatR_RemoteExtension_PublishRemote_DMediatR_IRemote_MediatR_INotification_System_Threading_CancellationToken_
  commentId: M:DMediatR.RemoteExtension.PublishRemote(DMediatR.IRemote,MediatR.INotification,System.Threading.CancellationToken)
  fullName: DMediatR.RemoteExtension.PublishRemote(DMediatR.IRemote, MediatR.INotification, System.Threading.CancellationToken)
  nameWithType: RemoteExtension.PublishRemote(IRemote, INotification, CancellationToken)
- uid: DMediatR.RemoteExtension.PublishRemote*
  name: PublishRemote
  href: api/DMediatR.RemoteExtension.html#DMediatR_RemoteExtension_PublishRemote_
  commentId: Overload:DMediatR.RemoteExtension.PublishRemote
  isSpec: "True"
  fullName: DMediatR.RemoteExtension.PublishRemote
  nameWithType: RemoteExtension.PublishRemote
- uid: DMediatR.RemoteExtension.SendRemote*
  name: SendRemote
  href: api/DMediatR.RemoteExtension.html#DMediatR_RemoteExtension_SendRemote_
  commentId: Overload:DMediatR.RemoteExtension.SendRemote
  isSpec: "True"
  fullName: DMediatR.RemoteExtension.SendRemote
  nameWithType: RemoteExtension.SendRemote
- uid: DMediatR.RemoteExtension.SendRemote``1(DMediatR.IRemote,MediatR.IRequest{``0},System.Threading.CancellationToken)
  name: SendRemote<TResponse>(IRemote, IRequest<TResponse>, CancellationToken)
  href: api/DMediatR.RemoteExtension.html#DMediatR_RemoteExtension_SendRemote__1_DMediatR_IRemote_MediatR_IRequest___0__System_Threading_CancellationToken_
  commentId: M:DMediatR.RemoteExtension.SendRemote``1(DMediatR.IRemote,MediatR.IRequest{``0},System.Threading.CancellationToken)
  name.vb: SendRemote(Of TResponse)(IRemote, IRequest(Of TResponse), CancellationToken)
  fullName: DMediatR.RemoteExtension.SendRemote<TResponse>(DMediatR.IRemote, MediatR.IRequest<TResponse>, System.Threading.CancellationToken)
  fullName.vb: DMediatR.RemoteExtension.SendRemote(Of TResponse)(DMediatR.IRemote, MediatR.IRequest(Of TResponse), System.Threading.CancellationToken)
  nameWithType: RemoteExtension.SendRemote<TResponse>(IRemote, IRequest<TResponse>, CancellationToken)
  nameWithType.vb: RemoteExtension.SendRemote(Of TResponse)(IRemote, IRequest(Of TResponse), CancellationToken)
- uid: DMediatR.RemotesOptions
  name: RemotesOptions
  href: api/DMediatR.RemotesOptions.html
  commentId: T:DMediatR.RemotesOptions
  fullName: DMediatR.RemotesOptions
  nameWithType: RemotesOptions
- uid: DMediatR.RemotesOptions.SectionName
  name: SectionName
  href: api/DMediatR.RemotesOptions.html#DMediatR_RemotesOptions_SectionName
  commentId: F:DMediatR.RemotesOptions.SectionName
  fullName: DMediatR.RemotesOptions.SectionName
  nameWithType: RemotesOptions.SectionName
- uid: DMediatR.RemotesOptions.ValidatedValues
  name: ValidatedValues
  href: api/DMediatR.RemotesOptions.html#DMediatR_RemotesOptions_ValidatedValues
  commentId: P:DMediatR.RemotesOptions.ValidatedValues
  fullName: DMediatR.RemotesOptions.ValidatedValues
  nameWithType: RemotesOptions.ValidatedValues
- uid: DMediatR.RemotesOptions.ValidatedValues*
  name: ValidatedValues
  href: api/DMediatR.RemotesOptions.html#DMediatR_RemotesOptions_ValidatedValues_
  commentId: Overload:DMediatR.RemotesOptions.ValidatedValues
  isSpec: "True"
  fullName: DMediatR.RemotesOptions.ValidatedValues
  nameWithType: RemotesOptions.ValidatedValues
- uid: DMediatR.RenewClientCertificateNotification
  name: RenewClientCertificateNotification
  href: api/DMediatR.RenewClientCertificateNotification.html
  commentId: T:DMediatR.RenewClientCertificateNotification
  fullName: DMediatR.RenewClientCertificateNotification
  nameWithType: RenewClientCertificateNotification
- uid: DMediatR.RenewIntermediateCertificateNotification
  name: RenewIntermediateCertificateNotification
  href: api/DMediatR.RenewIntermediateCertificateNotification.html
  commentId: T:DMediatR.RenewIntermediateCertificateNotification
  fullName: DMediatR.RenewIntermediateCertificateNotification
  nameWithType: RenewIntermediateCertificateNotification
- uid: DMediatR.RenewNotification
  name: RenewNotification
  href: api/DMediatR.RenewNotification.html
  commentId: T:DMediatR.RenewNotification
  fullName: DMediatR.RenewNotification
  nameWithType: RenewNotification
- uid: DMediatR.RenewNotification.CorrelationGuid
  name: CorrelationGuid
  href: api/DMediatR.RenewNotification.html#DMediatR_RenewNotification_CorrelationGuid
  commentId: P:DMediatR.RenewNotification.CorrelationGuid
  fullName: DMediatR.RenewNotification.CorrelationGuid
  nameWithType: RenewNotification.CorrelationGuid
- uid: DMediatR.RenewNotification.CorrelationGuid*
  name: CorrelationGuid
  href: api/DMediatR.RenewNotification.html#DMediatR_RenewNotification_CorrelationGuid_
  commentId: Overload:DMediatR.RenewNotification.CorrelationGuid
  isSpec: "True"
  fullName: DMediatR.RenewNotification.CorrelationGuid
  nameWithType: RenewNotification.CorrelationGuid
- uid: DMediatR.RenewNotification.MaxLatency
  name: MaxLatency
  href: api/DMediatR.RenewNotification.html#DMediatR_RenewNotification_MaxLatency
  commentId: P:DMediatR.RenewNotification.MaxLatency
  fullName: DMediatR.RenewNotification.MaxLatency
  nameWithType: RenewNotification.MaxLatency
- uid: DMediatR.RenewNotification.MaxLatency*
  name: MaxLatency
  href: api/DMediatR.RenewNotification.html#DMediatR_RenewNotification_MaxLatency_
  commentId: Overload:DMediatR.RenewNotification.MaxLatency
  isSpec: "True"
  fullName: DMediatR.RenewNotification.MaxLatency
  nameWithType: RenewNotification.MaxLatency
- uid: DMediatR.RenewNotificationForwarder
  name: RenewNotificationForwarder
  href: api/DMediatR.RenewNotificationForwarder.html
  commentId: T:DMediatR.RenewNotificationForwarder
  fullName: DMediatR.RenewNotificationForwarder
  nameWithType: RenewNotificationForwarder
- uid: DMediatR.RenewNotificationForwarder.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool)
  name: RenewNotificationForwarder(IMemoryCache, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool)
  href: api/DMediatR.RenewNotificationForwarder.html#DMediatR_RenewNotificationForwarder__ctor_Microsoft_Extensions_Caching_Memory_IMemoryCache_Microsoft_Extensions_Options_IOptions_DMediatR_HostOptions__Microsoft_Extensions_Options_IOptions_DMediatR_CertificateOptions__Microsoft_Extensions_Options_IOptions_DMediatR_RemotesOptions__MediatR_IMediator_DMediatR_ISerializer_DMediatR_IGrpcChannelPool_
  commentId: M:DMediatR.RenewNotificationForwarder.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool)
  name.vb: New(IMemoryCache, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool)
  fullName: DMediatR.RenewNotificationForwarder.RenewNotificationForwarder(Microsoft.Extensions.Caching.Memory.IMemoryCache, Microsoft.Extensions.Options.IOptions<DMediatR.HostOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.CertificateOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.RemotesOptions>, MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool)
  fullName.vb: DMediatR.RenewNotificationForwarder.New(Microsoft.Extensions.Caching.Memory.IMemoryCache, Microsoft.Extensions.Options.IOptions(Of DMediatR.HostOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.CertificateOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.RemotesOptions), MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool)
  nameWithType: RenewNotificationForwarder.RenewNotificationForwarder(IMemoryCache, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool)
  nameWithType.vb: RenewNotificationForwarder.New(IMemoryCache, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool)
- uid: DMediatR.RenewNotificationForwarder.#ctor*
  name: RenewNotificationForwarder
  href: api/DMediatR.RenewNotificationForwarder.html#DMediatR_RenewNotificationForwarder__ctor_
  commentId: Overload:DMediatR.RenewNotificationForwarder.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.RenewNotificationForwarder.RenewNotificationForwarder
  fullName.vb: DMediatR.RenewNotificationForwarder.New
  nameWithType: RenewNotificationForwarder.RenewNotificationForwarder
  nameWithType.vb: RenewNotificationForwarder.New
- uid: DMediatR.RenewNotificationForwarder.ChannelPool
  name: ChannelPool
  href: api/DMediatR.RenewNotificationForwarder.html#DMediatR_RenewNotificationForwarder_ChannelPool
  commentId: P:DMediatR.RenewNotificationForwarder.ChannelPool
  fullName: DMediatR.RenewNotificationForwarder.ChannelPool
  nameWithType: RenewNotificationForwarder.ChannelPool
- uid: DMediatR.RenewNotificationForwarder.ChannelPool*
  name: ChannelPool
  href: api/DMediatR.RenewNotificationForwarder.html#DMediatR_RenewNotificationForwarder_ChannelPool_
  commentId: Overload:DMediatR.RenewNotificationForwarder.ChannelPool
  isSpec: "True"
  fullName: DMediatR.RenewNotificationForwarder.ChannelPool
  nameWithType: RenewNotificationForwarder.ChannelPool
- uid: DMediatR.RenewNotificationForwarder.Handle(DMediatR.ICorrelatedNotification,System.Threading.CancellationToken)
  name: Handle(ICorrelatedNotification, CancellationToken)
  href: api/DMediatR.RenewNotificationForwarder.html#DMediatR_RenewNotificationForwarder_Handle_DMediatR_ICorrelatedNotification_System_Threading_CancellationToken_
  commentId: M:DMediatR.RenewNotificationForwarder.Handle(DMediatR.ICorrelatedNotification,System.Threading.CancellationToken)
  fullName: DMediatR.RenewNotificationForwarder.Handle(DMediatR.ICorrelatedNotification, System.Threading.CancellationToken)
  nameWithType: RenewNotificationForwarder.Handle(ICorrelatedNotification, CancellationToken)
- uid: DMediatR.RenewNotificationForwarder.Handle*
  name: Handle
  href: api/DMediatR.RenewNotificationForwarder.html#DMediatR_RenewNotificationForwarder_Handle_
  commentId: Overload:DMediatR.RenewNotificationForwarder.Handle
  isSpec: "True"
  fullName: DMediatR.RenewNotificationForwarder.Handle
  nameWithType: RenewNotificationForwarder.Handle
- uid: DMediatR.RenewNotificationForwarder.Mediator
  name: Mediator
  href: api/DMediatR.RenewNotificationForwarder.html#DMediatR_RenewNotificationForwarder_Mediator
  commentId: P:DMediatR.RenewNotificationForwarder.Mediator
  fullName: DMediatR.RenewNotificationForwarder.Mediator
  nameWithType: RenewNotificationForwarder.Mediator
- uid: DMediatR.RenewNotificationForwarder.Mediator*
  name: Mediator
  href: api/DMediatR.RenewNotificationForwarder.html#DMediatR_RenewNotificationForwarder_Mediator_
  commentId: Overload:DMediatR.RenewNotificationForwarder.Mediator
  isSpec: "True"
  fullName: DMediatR.RenewNotificationForwarder.Mediator
  nameWithType: RenewNotificationForwarder.Mediator
- uid: DMediatR.RenewNotificationForwarder.Options
  name: Options
  href: api/DMediatR.RenewNotificationForwarder.html#DMediatR_RenewNotificationForwarder_Options
  commentId: P:DMediatR.RenewNotificationForwarder.Options
  fullName: DMediatR.RenewNotificationForwarder.Options
  nameWithType: RenewNotificationForwarder.Options
- uid: DMediatR.RenewNotificationForwarder.Options*
  name: Options
  href: api/DMediatR.RenewNotificationForwarder.html#DMediatR_RenewNotificationForwarder_Options_
  commentId: Overload:DMediatR.RenewNotificationForwarder.Options
  isSpec: "True"
  fullName: DMediatR.RenewNotificationForwarder.Options
  nameWithType: RenewNotificationForwarder.Options
- uid: DMediatR.RenewNotificationForwarder.Remotes
  name: Remotes
  href: api/DMediatR.RenewNotificationForwarder.html#DMediatR_RenewNotificationForwarder_Remotes
  commentId: P:DMediatR.RenewNotificationForwarder.Remotes
  fullName: DMediatR.RenewNotificationForwarder.Remotes
  nameWithType: RenewNotificationForwarder.Remotes
- uid: DMediatR.RenewNotificationForwarder.Remotes*
  name: Remotes
  href: api/DMediatR.RenewNotificationForwarder.html#DMediatR_RenewNotificationForwarder_Remotes_
  commentId: Overload:DMediatR.RenewNotificationForwarder.Remotes
  isSpec: "True"
  fullName: DMediatR.RenewNotificationForwarder.Remotes
  nameWithType: RenewNotificationForwarder.Remotes
- uid: DMediatR.RenewNotificationForwarder.Serializer
  name: Serializer
  href: api/DMediatR.RenewNotificationForwarder.html#DMediatR_RenewNotificationForwarder_Serializer
  commentId: P:DMediatR.RenewNotificationForwarder.Serializer
  fullName: DMediatR.RenewNotificationForwarder.Serializer
  nameWithType: RenewNotificationForwarder.Serializer
- uid: DMediatR.RenewNotificationForwarder.Serializer*
  name: Serializer
  href: api/DMediatR.RenewNotificationForwarder.html#DMediatR_RenewNotificationForwarder_Serializer_
  commentId: Overload:DMediatR.RenewNotificationForwarder.Serializer
  isSpec: "True"
  fullName: DMediatR.RenewNotificationForwarder.Serializer
  nameWithType: RenewNotificationForwarder.Serializer
- uid: DMediatR.RenewNotificationForwarder._grpcChannelProvider
  name: _grpcChannelProvider
  href: api/DMediatR.RenewNotificationForwarder.html#DMediatR_RenewNotificationForwarder__grpcChannelProvider
  commentId: F:DMediatR.RenewNotificationForwarder._grpcChannelProvider
  fullName: DMediatR.RenewNotificationForwarder._grpcChannelProvider
  nameWithType: RenewNotificationForwarder._grpcChannelProvider
- uid: DMediatR.RenewRootCertificateNotification
  name: RenewRootCertificateNotification
  href: api/DMediatR.RenewRootCertificateNotification.html
  commentId: T:DMediatR.RenewRootCertificateNotification
  fullName: DMediatR.RenewRootCertificateNotification
  nameWithType: RenewRootCertificateNotification
- uid: DMediatR.RenewServerCertificateNotification
  name: RenewServerCertificateNotification
  href: api/DMediatR.RenewServerCertificateNotification.html
  commentId: T:DMediatR.RenewServerCertificateNotification
  fullName: DMediatR.RenewServerCertificateNotification
  nameWithType: RenewServerCertificateNotification
- uid: DMediatR.RootCertificateProvider
  name: RootCertificateProvider
  href: api/DMediatR.RootCertificateProvider.html
  commentId: T:DMediatR.RootCertificateProvider
  fullName: DMediatR.RootCertificateProvider
  nameWithType: RootCertificateProvider
- uid: DMediatR.RootCertificateProvider.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name: RootCertificateProvider(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  href: api/DMediatR.RootCertificateProvider.html#DMediatR_RootCertificateProvider__ctor_CertificateManager_CreateCertificatesClientServerAuth_Microsoft_Extensions_Options_IOptions_DMediatR_HostOptions__Microsoft_Extensions_Options_IOptions_DMediatR_CertificateOptions__Microsoft_Extensions_Options_IOptions_DMediatR_RemotesOptions__MediatR_IMediator_DMediatR_ISerializer_DMediatR_IGrpcChannelPool_CertificateManager_ImportExportCertificate_
  commentId: M:DMediatR.RootCertificateProvider.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name.vb: New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  fullName: DMediatR.RootCertificateProvider.RootCertificateProvider(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions<DMediatR.HostOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.CertificateOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.RemotesOptions>, MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  fullName.vb: DMediatR.RootCertificateProvider.New(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions(Of DMediatR.HostOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.CertificateOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.RemotesOptions), MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  nameWithType: RootCertificateProvider.RootCertificateProvider(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  nameWithType.vb: RootCertificateProvider.New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
- uid: DMediatR.RootCertificateProvider.#ctor*
  name: RootCertificateProvider
  href: api/DMediatR.RootCertificateProvider.html#DMediatR_RootCertificateProvider__ctor_
  commentId: Overload:DMediatR.RootCertificateProvider.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.RootCertificateProvider.RootCertificateProvider
  fullName.vb: DMediatR.RootCertificateProvider.New
  nameWithType: RootCertificateProvider.RootCertificateProvider
  nameWithType.vb: RootCertificateProvider.New
- uid: DMediatR.RootCertificateProvider.Handle(DMediatR.RootCertificateRequest,System.Threading.CancellationToken)
  name: Handle(RootCertificateRequest, CancellationToken)
  href: api/DMediatR.RootCertificateProvider.html#DMediatR_RootCertificateProvider_Handle_DMediatR_RootCertificateRequest_System_Threading_CancellationToken_
  commentId: M:DMediatR.RootCertificateProvider.Handle(DMediatR.RootCertificateRequest,System.Threading.CancellationToken)
  fullName: DMediatR.RootCertificateProvider.Handle(DMediatR.RootCertificateRequest, System.Threading.CancellationToken)
  nameWithType: RootCertificateProvider.Handle(RootCertificateRequest, CancellationToken)
- uid: DMediatR.RootCertificateProvider.Handle*
  name: Handle
  href: api/DMediatR.RootCertificateProvider.html#DMediatR_RootCertificateProvider_Handle_
  commentId: Overload:DMediatR.RootCertificateProvider.Handle
  isSpec: "True"
  fullName: DMediatR.RootCertificateProvider.Handle
  nameWithType: RootCertificateProvider.Handle
- uid: DMediatR.RootCertificateProvider.RequestCertificate(DMediatR.RootCertificateRequest,System.Threading.CancellationToken)
  name: RequestCertificate(RootCertificateRequest, CancellationToken)
  href: api/DMediatR.RootCertificateProvider.html#DMediatR_RootCertificateProvider_RequestCertificate_DMediatR_RootCertificateRequest_System_Threading_CancellationToken_
  commentId: M:DMediatR.RootCertificateProvider.RequestCertificate(DMediatR.RootCertificateRequest,System.Threading.CancellationToken)
  fullName: DMediatR.RootCertificateProvider.RequestCertificate(DMediatR.RootCertificateRequest, System.Threading.CancellationToken)
  nameWithType: RootCertificateProvider.RequestCertificate(RootCertificateRequest, CancellationToken)
- uid: DMediatR.RootCertificateProvider.RequestCertificate*
  name: RequestCertificate
  href: api/DMediatR.RootCertificateProvider.html#DMediatR_RootCertificateProvider_RequestCertificate_
  commentId: Overload:DMediatR.RootCertificateProvider.RequestCertificate
  isSpec: "True"
  fullName: DMediatR.RootCertificateProvider.RequestCertificate
  nameWithType: RootCertificateProvider.RequestCertificate
- uid: DMediatR.RootCertificateProviderRemote
  name: RootCertificateProviderRemote
  href: api/DMediatR.RootCertificateProviderRemote.html
  commentId: T:DMediatR.RootCertificateProviderRemote
  fullName: DMediatR.RootCertificateProviderRemote
  nameWithType: RootCertificateProviderRemote
- uid: DMediatR.RootCertificateProviderRemote.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name: RootCertificateProviderRemote(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  href: api/DMediatR.RootCertificateProviderRemote.html#DMediatR_RootCertificateProviderRemote__ctor_CertificateManager_CreateCertificatesClientServerAuth_Microsoft_Extensions_Options_IOptions_DMediatR_HostOptions__Microsoft_Extensions_Options_IOptions_DMediatR_CertificateOptions__Microsoft_Extensions_Options_IOptions_DMediatR_RemotesOptions__MediatR_IMediator_DMediatR_ISerializer_DMediatR_IGrpcChannelPool_CertificateManager_ImportExportCertificate_
  commentId: M:DMediatR.RootCertificateProviderRemote.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name.vb: New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  fullName: DMediatR.RootCertificateProviderRemote.RootCertificateProviderRemote(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions<DMediatR.HostOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.CertificateOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.RemotesOptions>, MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  fullName.vb: DMediatR.RootCertificateProviderRemote.New(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions(Of DMediatR.HostOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.CertificateOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.RemotesOptions), MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  nameWithType: RootCertificateProviderRemote.RootCertificateProviderRemote(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  nameWithType.vb: RootCertificateProviderRemote.New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
- uid: DMediatR.RootCertificateProviderRemote.#ctor*
  name: RootCertificateProviderRemote
  href: api/DMediatR.RootCertificateProviderRemote.html#DMediatR_RootCertificateProviderRemote__ctor_
  commentId: Overload:DMediatR.RootCertificateProviderRemote.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.RootCertificateProviderRemote.RootCertificateProviderRemote
  fullName.vb: DMediatR.RootCertificateProviderRemote.New
  nameWithType: RootCertificateProviderRemote.RootCertificateProviderRemote
  nameWithType.vb: RootCertificateProviderRemote.New
- uid: DMediatR.RootCertificateProviderRemote.Handle(DMediatR.RootCertificateRequest,System.Threading.CancellationToken)
  name: Handle(RootCertificateRequest, CancellationToken)
  href: api/DMediatR.RootCertificateProviderRemote.html#DMediatR_RootCertificateProviderRemote_Handle_DMediatR_RootCertificateRequest_System_Threading_CancellationToken_
  commentId: M:DMediatR.RootCertificateProviderRemote.Handle(DMediatR.RootCertificateRequest,System.Threading.CancellationToken)
  fullName: DMediatR.RootCertificateProviderRemote.Handle(DMediatR.RootCertificateRequest, System.Threading.CancellationToken)
  nameWithType: RootCertificateProviderRemote.Handle(RootCertificateRequest, CancellationToken)
- uid: DMediatR.RootCertificateProviderRemote.Handle*
  name: Handle
  href: api/DMediatR.RootCertificateProviderRemote.html#DMediatR_RootCertificateProviderRemote_Handle_
  commentId: Overload:DMediatR.RootCertificateProviderRemote.Handle
  isSpec: "True"
  fullName: DMediatR.RootCertificateProviderRemote.Handle
  nameWithType: RootCertificateProviderRemote.Handle
- uid: DMediatR.RootCertificateRequest
  name: RootCertificateRequest
  href: api/DMediatR.RootCertificateRequest.html
  commentId: T:DMediatR.RootCertificateRequest
  fullName: DMediatR.RootCertificateRequest
  nameWithType: RootCertificateRequest
- uid: DMediatR.Serializer
  name: Serializer
  href: api/DMediatR.Serializer.html
  commentId: T:DMediatR.Serializer
  fullName: DMediatR.Serializer
  nameWithType: Serializer
- uid: DMediatR.Serializer.#ctor(System.IServiceProvider)
  name: Serializer(IServiceProvider)
  href: api/DMediatR.Serializer.html#DMediatR_Serializer__ctor_System_IServiceProvider_
  commentId: M:DMediatR.Serializer.#ctor(System.IServiceProvider)
  name.vb: New(IServiceProvider)
  fullName: DMediatR.Serializer.Serializer(System.IServiceProvider)
  fullName.vb: DMediatR.Serializer.New(System.IServiceProvider)
  nameWithType: Serializer.Serializer(IServiceProvider)
  nameWithType.vb: Serializer.New(IServiceProvider)
- uid: DMediatR.Serializer.#ctor*
  name: Serializer
  href: api/DMediatR.Serializer.html#DMediatR_Serializer__ctor_
  commentId: Overload:DMediatR.Serializer.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.Serializer.Serializer
  fullName.vb: DMediatR.Serializer.New
  nameWithType: Serializer.Serializer
  nameWithType.vb: Serializer.New
- uid: DMediatR.Serializer.Deserialize(System.Type,System.Byte[])
  name: Deserialize(Type, byte[])
  href: api/DMediatR.Serializer.html#DMediatR_Serializer_Deserialize_System_Type_System_Byte___
  commentId: M:DMediatR.Serializer.Deserialize(System.Type,System.Byte[])
  name.vb: Deserialize(Type, Byte())
  fullName: DMediatR.Serializer.Deserialize(System.Type, byte[])
  fullName.vb: DMediatR.Serializer.Deserialize(System.Type, Byte())
  nameWithType: Serializer.Deserialize(Type, byte[])
  nameWithType.vb: Serializer.Deserialize(Type, Byte())
- uid: DMediatR.Serializer.Deserialize*
  name: Deserialize
  href: api/DMediatR.Serializer.html#DMediatR_Serializer_Deserialize_
  commentId: Overload:DMediatR.Serializer.Deserialize
  isSpec: "True"
  fullName: DMediatR.Serializer.Deserialize
  nameWithType: Serializer.Deserialize
- uid: DMediatR.Serializer.Deserialize``1(System.Byte[])
  name: Deserialize<T>(byte[])
  href: api/DMediatR.Serializer.html#DMediatR_Serializer_Deserialize__1_System_Byte___
  commentId: M:DMediatR.Serializer.Deserialize``1(System.Byte[])
  name.vb: Deserialize(Of T)(Byte())
  fullName: DMediatR.Serializer.Deserialize<T>(byte[])
  fullName.vb: DMediatR.Serializer.Deserialize(Of T)(Byte())
  nameWithType: Serializer.Deserialize<T>(byte[])
  nameWithType.vb: Serializer.Deserialize(Of T)(Byte())
- uid: DMediatR.Serializer.Deserialize``1(System.Type,System.Byte[])
  name: Deserialize<T>(Type, byte[])
  href: api/DMediatR.Serializer.html#DMediatR_Serializer_Deserialize__1_System_Type_System_Byte___
  commentId: M:DMediatR.Serializer.Deserialize``1(System.Type,System.Byte[])
  name.vb: Deserialize(Of T)(Type, Byte())
  fullName: DMediatR.Serializer.Deserialize<T>(System.Type, byte[])
  fullName.vb: DMediatR.Serializer.Deserialize(Of T)(System.Type, Byte())
  nameWithType: Serializer.Deserialize<T>(Type, byte[])
  nameWithType.vb: Serializer.Deserialize(Of T)(Type, Byte())
- uid: DMediatR.Serializer.Serialize(System.Object)
  name: Serialize(object)
  href: api/DMediatR.Serializer.html#DMediatR_Serializer_Serialize_System_Object_
  commentId: M:DMediatR.Serializer.Serialize(System.Object)
  name.vb: Serialize(Object)
  fullName: DMediatR.Serializer.Serialize(object)
  fullName.vb: DMediatR.Serializer.Serialize(Object)
  nameWithType: Serializer.Serialize(object)
  nameWithType.vb: Serializer.Serialize(Object)
- uid: DMediatR.Serializer.Serialize*
  name: Serialize
  href: api/DMediatR.Serializer.html#DMediatR_Serializer_Serialize_
  commentId: Overload:DMediatR.Serializer.Serialize
  isSpec: "True"
  fullName: DMediatR.Serializer.Serialize
  nameWithType: Serializer.Serialize
- uid: DMediatR.Serializer`1
  name: Serializer<T>
  href: api/DMediatR.Serializer-1.html
  commentId: T:DMediatR.Serializer`1
  name.vb: Serializer(Of T)
  fullName: DMediatR.Serializer<T>
  fullName.vb: DMediatR.Serializer(Of T)
  nameWithType: Serializer<T>
  nameWithType.vb: Serializer(Of T)
- uid: DMediatR.Serializer`1.#ctor(System.IServiceProvider)
  name: Serializer(IServiceProvider)
  href: api/DMediatR.Serializer-1.html#DMediatR_Serializer_1__ctor_System_IServiceProvider_
  commentId: M:DMediatR.Serializer`1.#ctor(System.IServiceProvider)
  name.vb: New(IServiceProvider)
  fullName: DMediatR.Serializer<T>.Serializer(System.IServiceProvider)
  fullName.vb: DMediatR.Serializer(Of T).New(System.IServiceProvider)
  nameWithType: Serializer<T>.Serializer(IServiceProvider)
  nameWithType.vb: Serializer(Of T).New(IServiceProvider)
- uid: DMediatR.Serializer`1.#ctor*
  name: Serializer
  href: api/DMediatR.Serializer-1.html#DMediatR_Serializer_1__ctor_
  commentId: Overload:DMediatR.Serializer`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.Serializer<T>.Serializer
  fullName.vb: DMediatR.Serializer(Of T).New
  nameWithType: Serializer<T>.Serializer
  nameWithType.vb: Serializer(Of T).New
- uid: DMediatR.Serializer`1.CheckType(System.Type)
  name: CheckType(Type)
  href: api/DMediatR.Serializer-1.html#DMediatR_Serializer_1_CheckType_System_Type_
  commentId: M:DMediatR.Serializer`1.CheckType(System.Type)
  fullName: DMediatR.Serializer<T>.CheckType(System.Type)
  fullName.vb: DMediatR.Serializer(Of T).CheckType(System.Type)
  nameWithType: Serializer<T>.CheckType(Type)
  nameWithType.vb: Serializer(Of T).CheckType(Type)
- uid: DMediatR.Serializer`1.CheckType*
  name: CheckType
  href: api/DMediatR.Serializer-1.html#DMediatR_Serializer_1_CheckType_
  commentId: Overload:DMediatR.Serializer`1.CheckType
  isSpec: "True"
  fullName: DMediatR.Serializer<T>.CheckType
  fullName.vb: DMediatR.Serializer(Of T).CheckType
  nameWithType: Serializer<T>.CheckType
  nameWithType.vb: Serializer(Of T).CheckType
- uid: DMediatR.Serializer`1.Type
  name: Type
  href: api/DMediatR.Serializer-1.html#DMediatR_Serializer_1_Type
  commentId: P:DMediatR.Serializer`1.Type
  fullName: DMediatR.Serializer<T>.Type
  fullName.vb: DMediatR.Serializer(Of T).Type
  nameWithType: Serializer<T>.Type
  nameWithType.vb: Serializer(Of T).Type
- uid: DMediatR.Serializer`1.Type*
  name: Type
  href: api/DMediatR.Serializer-1.html#DMediatR_Serializer_1_Type_
  commentId: Overload:DMediatR.Serializer`1.Type
  isSpec: "True"
  fullName: DMediatR.Serializer<T>.Type
  fullName.vb: DMediatR.Serializer(Of T).Type
  nameWithType: Serializer<T>.Type
  nameWithType.vb: Serializer(Of T).Type
- uid: DMediatR.ServerCertificateFileWatcher
  name: ServerCertificateFileWatcher
  href: api/DMediatR.ServerCertificateFileWatcher.html
  commentId: T:DMediatR.ServerCertificateFileWatcher
  fullName: DMediatR.ServerCertificateFileWatcher
  nameWithType: ServerCertificateFileWatcher
- uid: DMediatR.ServerCertificateFileWatcher.#ctor(Microsoft.Extensions.Logging.ILogger{DMediatR.ServerCertificateFileWatcher},Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},DMediatR.ServerCertificateProvider,Microsoft.Extensions.Hosting.IHostApplicationLifetime)
  name: ServerCertificateFileWatcher(ILogger<ServerCertificateFileWatcher>, IOptions<HostOptions>, ServerCertificateProvider, IHostApplicationLifetime)
  href: api/DMediatR.ServerCertificateFileWatcher.html#DMediatR_ServerCertificateFileWatcher__ctor_Microsoft_Extensions_Logging_ILogger_DMediatR_ServerCertificateFileWatcher__Microsoft_Extensions_Options_IOptions_DMediatR_HostOptions__DMediatR_ServerCertificateProvider_Microsoft_Extensions_Hosting_IHostApplicationLifetime_
  commentId: M:DMediatR.ServerCertificateFileWatcher.#ctor(Microsoft.Extensions.Logging.ILogger{DMediatR.ServerCertificateFileWatcher},Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},DMediatR.ServerCertificateProvider,Microsoft.Extensions.Hosting.IHostApplicationLifetime)
  name.vb: New(ILogger(Of ServerCertificateFileWatcher), IOptions(Of HostOptions), ServerCertificateProvider, IHostApplicationLifetime)
  fullName: DMediatR.ServerCertificateFileWatcher.ServerCertificateFileWatcher(Microsoft.Extensions.Logging.ILogger<DMediatR.ServerCertificateFileWatcher>, Microsoft.Extensions.Options.IOptions<DMediatR.HostOptions>, DMediatR.ServerCertificateProvider, Microsoft.Extensions.Hosting.IHostApplicationLifetime)
  fullName.vb: DMediatR.ServerCertificateFileWatcher.New(Microsoft.Extensions.Logging.ILogger(Of DMediatR.ServerCertificateFileWatcher), Microsoft.Extensions.Options.IOptions(Of DMediatR.HostOptions), DMediatR.ServerCertificateProvider, Microsoft.Extensions.Hosting.IHostApplicationLifetime)
  nameWithType: ServerCertificateFileWatcher.ServerCertificateFileWatcher(ILogger<ServerCertificateFileWatcher>, IOptions<HostOptions>, ServerCertificateProvider, IHostApplicationLifetime)
  nameWithType.vb: ServerCertificateFileWatcher.New(ILogger(Of ServerCertificateFileWatcher), IOptions(Of HostOptions), ServerCertificateProvider, IHostApplicationLifetime)
- uid: DMediatR.ServerCertificateFileWatcher.#ctor*
  name: ServerCertificateFileWatcher
  href: api/DMediatR.ServerCertificateFileWatcher.html#DMediatR_ServerCertificateFileWatcher__ctor_
  commentId: Overload:DMediatR.ServerCertificateFileWatcher.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.ServerCertificateFileWatcher.ServerCertificateFileWatcher
  fullName.vb: DMediatR.ServerCertificateFileWatcher.New
  nameWithType: ServerCertificateFileWatcher.ServerCertificateFileWatcher
  nameWithType.vb: ServerCertificateFileWatcher.New
- uid: DMediatR.ServerCertificateFileWatcher.ExecuteAsync(System.Threading.CancellationToken)
  name: ExecuteAsync(CancellationToken)
  href: api/DMediatR.ServerCertificateFileWatcher.html#DMediatR_ServerCertificateFileWatcher_ExecuteAsync_System_Threading_CancellationToken_
  commentId: M:DMediatR.ServerCertificateFileWatcher.ExecuteAsync(System.Threading.CancellationToken)
  fullName: DMediatR.ServerCertificateFileWatcher.ExecuteAsync(System.Threading.CancellationToken)
  nameWithType: ServerCertificateFileWatcher.ExecuteAsync(CancellationToken)
- uid: DMediatR.ServerCertificateFileWatcher.ExecuteAsync*
  name: ExecuteAsync
  href: api/DMediatR.ServerCertificateFileWatcher.html#DMediatR_ServerCertificateFileWatcher_ExecuteAsync_
  commentId: Overload:DMediatR.ServerCertificateFileWatcher.ExecuteAsync
  isSpec: "True"
  fullName: DMediatR.ServerCertificateFileWatcher.ExecuteAsync
  nameWithType: ServerCertificateFileWatcher.ExecuteAsync
- uid: DMediatR.ServerCertificateProvider
  name: ServerCertificateProvider
  href: api/DMediatR.ServerCertificateProvider.html
  commentId: T:DMediatR.ServerCertificateProvider
  fullName: DMediatR.ServerCertificateProvider
  nameWithType: ServerCertificateProvider
- uid: DMediatR.ServerCertificateProvider.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name: ServerCertificateProvider(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  href: api/DMediatR.ServerCertificateProvider.html#DMediatR_ServerCertificateProvider__ctor_CertificateManager_CreateCertificatesClientServerAuth_Microsoft_Extensions_Options_IOptions_DMediatR_HostOptions__Microsoft_Extensions_Options_IOptions_DMediatR_CertificateOptions__Microsoft_Extensions_Options_IOptions_DMediatR_RemotesOptions__MediatR_IMediator_DMediatR_ISerializer_DMediatR_IGrpcChannelPool_CertificateManager_ImportExportCertificate_
  commentId: M:DMediatR.ServerCertificateProvider.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name.vb: New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  fullName: DMediatR.ServerCertificateProvider.ServerCertificateProvider(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions<DMediatR.HostOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.CertificateOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.RemotesOptions>, MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  fullName.vb: DMediatR.ServerCertificateProvider.New(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions(Of DMediatR.HostOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.CertificateOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.RemotesOptions), MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  nameWithType: ServerCertificateProvider.ServerCertificateProvider(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  nameWithType.vb: ServerCertificateProvider.New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
- uid: DMediatR.ServerCertificateProvider.#ctor*
  name: ServerCertificateProvider
  href: api/DMediatR.ServerCertificateProvider.html#DMediatR_ServerCertificateProvider__ctor_
  commentId: Overload:DMediatR.ServerCertificateProvider.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.ServerCertificateProvider.ServerCertificateProvider
  fullName.vb: DMediatR.ServerCertificateProvider.New
  nameWithType: ServerCertificateProvider.ServerCertificateProvider
  nameWithType.vb: ServerCertificateProvider.New
- uid: DMediatR.ServerCertificateProvider.CertificateFilename(Microsoft.Extensions.Configuration.IConfiguration)
  name: CertificateFilename(IConfiguration)
  href: api/DMediatR.ServerCertificateProvider.html#DMediatR_ServerCertificateProvider_CertificateFilename_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:DMediatR.ServerCertificateProvider.CertificateFilename(Microsoft.Extensions.Configuration.IConfiguration)
  fullName: DMediatR.ServerCertificateProvider.CertificateFilename(Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: ServerCertificateProvider.CertificateFilename(IConfiguration)
- uid: DMediatR.ServerCertificateProvider.CertificateFilename*
  name: CertificateFilename
  href: api/DMediatR.ServerCertificateProvider.html#DMediatR_ServerCertificateProvider_CertificateFilename_
  commentId: Overload:DMediatR.ServerCertificateProvider.CertificateFilename
  isSpec: "True"
  fullName: DMediatR.ServerCertificateProvider.CertificateFilename
  nameWithType: ServerCertificateProvider.CertificateFilename
- uid: DMediatR.ServerCertificateProvider.Handle(DMediatR.ServerCertificateRequest,System.Threading.CancellationToken)
  name: Handle(ServerCertificateRequest, CancellationToken)
  href: api/DMediatR.ServerCertificateProvider.html#DMediatR_ServerCertificateProvider_Handle_DMediatR_ServerCertificateRequest_System_Threading_CancellationToken_
  commentId: M:DMediatR.ServerCertificateProvider.Handle(DMediatR.ServerCertificateRequest,System.Threading.CancellationToken)
  fullName: DMediatR.ServerCertificateProvider.Handle(DMediatR.ServerCertificateRequest, System.Threading.CancellationToken)
  nameWithType: ServerCertificateProvider.Handle(ServerCertificateRequest, CancellationToken)
- uid: DMediatR.ServerCertificateProvider.Handle*
  name: Handle
  href: api/DMediatR.ServerCertificateProvider.html#DMediatR_ServerCertificateProvider_Handle_
  commentId: Overload:DMediatR.ServerCertificateProvider.Handle
  isSpec: "True"
  fullName: DMediatR.ServerCertificateProvider.Handle
  nameWithType: ServerCertificateProvider.Handle
- uid: DMediatR.ServerCertificateProvider.LoadCertificate(Microsoft.Extensions.Configuration.IConfiguration)
  name: LoadCertificate(IConfiguration)
  href: api/DMediatR.ServerCertificateProvider.html#DMediatR_ServerCertificateProvider_LoadCertificate_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:DMediatR.ServerCertificateProvider.LoadCertificate(Microsoft.Extensions.Configuration.IConfiguration)
  fullName: DMediatR.ServerCertificateProvider.LoadCertificate(Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: ServerCertificateProvider.LoadCertificate(IConfiguration)
- uid: DMediatR.ServerCertificateProvider.LoadCertificate*
  name: LoadCertificate
  href: api/DMediatR.ServerCertificateProvider.html#DMediatR_ServerCertificateProvider_LoadCertificate_
  commentId: Overload:DMediatR.ServerCertificateProvider.LoadCertificate
  isSpec: "True"
  fullName: DMediatR.ServerCertificateProvider.LoadCertificate
  nameWithType: ServerCertificateProvider.LoadCertificate
- uid: DMediatR.ServerCertificateProvider.LoadCertificateOld(Microsoft.Extensions.Configuration.IConfiguration)
  name: LoadCertificateOld(IConfiguration)
  href: api/DMediatR.ServerCertificateProvider.html#DMediatR_ServerCertificateProvider_LoadCertificateOld_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:DMediatR.ServerCertificateProvider.LoadCertificateOld(Microsoft.Extensions.Configuration.IConfiguration)
  fullName: DMediatR.ServerCertificateProvider.LoadCertificateOld(Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: ServerCertificateProvider.LoadCertificateOld(IConfiguration)
- uid: DMediatR.ServerCertificateProvider.LoadCertificateOld*
  name: LoadCertificateOld
  href: api/DMediatR.ServerCertificateProvider.html#DMediatR_ServerCertificateProvider_LoadCertificateOld_
  commentId: Overload:DMediatR.ServerCertificateProvider.LoadCertificateOld
  isSpec: "True"
  fullName: DMediatR.ServerCertificateProvider.LoadCertificateOld
  nameWithType: ServerCertificateProvider.LoadCertificateOld
- uid: DMediatR.ServerCertificateProvider.OldCertificateFilename(Microsoft.Extensions.Configuration.IConfiguration)
  name: OldCertificateFilename(IConfiguration)
  href: api/DMediatR.ServerCertificateProvider.html#DMediatR_ServerCertificateProvider_OldCertificateFilename_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:DMediatR.ServerCertificateProvider.OldCertificateFilename(Microsoft.Extensions.Configuration.IConfiguration)
  fullName: DMediatR.ServerCertificateProvider.OldCertificateFilename(Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: ServerCertificateProvider.OldCertificateFilename(IConfiguration)
- uid: DMediatR.ServerCertificateProvider.OldCertificateFilename*
  name: OldCertificateFilename
  href: api/DMediatR.ServerCertificateProvider.html#DMediatR_ServerCertificateProvider_OldCertificateFilename_
  commentId: Overload:DMediatR.ServerCertificateProvider.OldCertificateFilename
  isSpec: "True"
  fullName: DMediatR.ServerCertificateProvider.OldCertificateFilename
  nameWithType: ServerCertificateProvider.OldCertificateFilename
- uid: DMediatR.ServerCertificateProviderRemote
  name: ServerCertificateProviderRemote
  href: api/DMediatR.ServerCertificateProviderRemote.html
  commentId: T:DMediatR.ServerCertificateProviderRemote
  fullName: DMediatR.ServerCertificateProviderRemote
  nameWithType: ServerCertificateProviderRemote
- uid: DMediatR.ServerCertificateProviderRemote.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name: ServerCertificateProviderRemote(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  href: api/DMediatR.ServerCertificateProviderRemote.html#DMediatR_ServerCertificateProviderRemote__ctor_CertificateManager_CreateCertificatesClientServerAuth_Microsoft_Extensions_Options_IOptions_DMediatR_HostOptions__Microsoft_Extensions_Options_IOptions_DMediatR_CertificateOptions__Microsoft_Extensions_Options_IOptions_DMediatR_RemotesOptions__MediatR_IMediator_DMediatR_ISerializer_DMediatR_IGrpcChannelPool_CertificateManager_ImportExportCertificate_
  commentId: M:DMediatR.ServerCertificateProviderRemote.#ctor(CertificateManager.CreateCertificatesClientServerAuth,Microsoft.Extensions.Options.IOptions{DMediatR.HostOptions},Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions},Microsoft.Extensions.Options.IOptions{DMediatR.RemotesOptions},MediatR.IMediator,DMediatR.ISerializer,DMediatR.IGrpcChannelPool,CertificateManager.ImportExportCertificate)
  name.vb: New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  fullName: DMediatR.ServerCertificateProviderRemote.ServerCertificateProviderRemote(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions<DMediatR.HostOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.CertificateOptions>, Microsoft.Extensions.Options.IOptions<DMediatR.RemotesOptions>, MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  fullName.vb: DMediatR.ServerCertificateProviderRemote.New(CertificateManager.CreateCertificatesClientServerAuth, Microsoft.Extensions.Options.IOptions(Of DMediatR.HostOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.CertificateOptions), Microsoft.Extensions.Options.IOptions(Of DMediatR.RemotesOptions), MediatR.IMediator, DMediatR.ISerializer, DMediatR.IGrpcChannelPool, CertificateManager.ImportExportCertificate)
  nameWithType: ServerCertificateProviderRemote.ServerCertificateProviderRemote(CreateCertificatesClientServerAuth, IOptions<HostOptions>, IOptions<CertificateOptions>, IOptions<RemotesOptions>, IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
  nameWithType.vb: ServerCertificateProviderRemote.New(CreateCertificatesClientServerAuth, IOptions(Of HostOptions), IOptions(Of CertificateOptions), IOptions(Of RemotesOptions), IMediator, ISerializer, IGrpcChannelPool, ImportExportCertificate)
- uid: DMediatR.ServerCertificateProviderRemote.#ctor*
  name: ServerCertificateProviderRemote
  href: api/DMediatR.ServerCertificateProviderRemote.html#DMediatR_ServerCertificateProviderRemote__ctor_
  commentId: Overload:DMediatR.ServerCertificateProviderRemote.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.ServerCertificateProviderRemote.ServerCertificateProviderRemote
  fullName.vb: DMediatR.ServerCertificateProviderRemote.New
  nameWithType: ServerCertificateProviderRemote.ServerCertificateProviderRemote
  nameWithType.vb: ServerCertificateProviderRemote.New
- uid: DMediatR.ServerCertificateProviderRemote.Handle(DMediatR.ServerCertificateRequest,System.Threading.CancellationToken)
  name: Handle(ServerCertificateRequest, CancellationToken)
  href: api/DMediatR.ServerCertificateProviderRemote.html#DMediatR_ServerCertificateProviderRemote_Handle_DMediatR_ServerCertificateRequest_System_Threading_CancellationToken_
  commentId: M:DMediatR.ServerCertificateProviderRemote.Handle(DMediatR.ServerCertificateRequest,System.Threading.CancellationToken)
  fullName: DMediatR.ServerCertificateProviderRemote.Handle(DMediatR.ServerCertificateRequest, System.Threading.CancellationToken)
  nameWithType: ServerCertificateProviderRemote.Handle(ServerCertificateRequest, CancellationToken)
- uid: DMediatR.ServerCertificateProviderRemote.Handle*
  name: Handle
  href: api/DMediatR.ServerCertificateProviderRemote.html#DMediatR_ServerCertificateProviderRemote_Handle_
  commentId: Overload:DMediatR.ServerCertificateProviderRemote.Handle
  isSpec: "True"
  fullName: DMediatR.ServerCertificateProviderRemote.Handle
  nameWithType: ServerCertificateProviderRemote.Handle
- uid: DMediatR.ServerCertificateRequest
  name: ServerCertificateRequest
  href: api/DMediatR.ServerCertificateRequest.html
  commentId: T:DMediatR.ServerCertificateRequest
  fullName: DMediatR.ServerCertificateRequest
  nameWithType: ServerCertificateRequest
- uid: DMediatR.ServerCertificateRequest.ParentCertificateRequest
  name: ParentCertificateRequest
  href: api/DMediatR.ServerCertificateRequest.html#DMediatR_ServerCertificateRequest_ParentCertificateRequest
  commentId: P:DMediatR.ServerCertificateRequest.ParentCertificateRequest
  fullName: DMediatR.ServerCertificateRequest.ParentCertificateRequest
  nameWithType: ServerCertificateRequest.ParentCertificateRequest
- uid: DMediatR.ServerCertificateRequest.ParentCertificateRequest*
  name: ParentCertificateRequest
  href: api/DMediatR.ServerCertificateRequest.html#DMediatR_ServerCertificateRequest_ParentCertificateRequest_
  commentId: Overload:DMediatR.ServerCertificateRequest.ParentCertificateRequest
  isSpec: "True"
  fullName: DMediatR.ServerCertificateRequest.ParentCertificateRequest
  nameWithType: ServerCertificateRequest.ParentCertificateRequest
- uid: DMediatR.ServiceCollectionExtension
  name: ServiceCollectionExtension
  href: api/DMediatR.ServiceCollectionExtension.html
  commentId: T:DMediatR.ServiceCollectionExtension
  fullName: DMediatR.ServiceCollectionExtension
  nameWithType: ServiceCollectionExtension
- uid: DMediatR.ServiceCollectionExtension.AddDMediatR(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.DependencyInjection.MediatRServiceConfiguration})
  name: AddDMediatR(IServiceCollection, IConfiguration, Action<MediatRServiceConfiguration>)
  href: api/DMediatR.ServiceCollectionExtension.html#DMediatR_ServiceCollectionExtension_AddDMediatR_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_System_Action_Microsoft_Extensions_DependencyInjection_MediatRServiceConfiguration__
  commentId: M:DMediatR.ServiceCollectionExtension.AddDMediatR(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.DependencyInjection.MediatRServiceConfiguration})
  name.vb: AddDMediatR(IServiceCollection, IConfiguration, Action(Of MediatRServiceConfiguration))
  fullName: DMediatR.ServiceCollectionExtension.AddDMediatR(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Action<Microsoft.Extensions.DependencyInjection.MediatRServiceConfiguration>)
  fullName.vb: DMediatR.ServiceCollectionExtension.AddDMediatR(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Action(Of Microsoft.Extensions.DependencyInjection.MediatRServiceConfiguration))
  nameWithType: ServiceCollectionExtension.AddDMediatR(IServiceCollection, IConfiguration, Action<MediatRServiceConfiguration>)
  nameWithType.vb: ServiceCollectionExtension.AddDMediatR(IServiceCollection, IConfiguration, Action(Of MediatRServiceConfiguration))
- uid: DMediatR.ServiceCollectionExtension.AddDMediatR*
  name: AddDMediatR
  href: api/DMediatR.ServiceCollectionExtension.html#DMediatR_ServiceCollectionExtension_AddDMediatR_
  commentId: Overload:DMediatR.ServiceCollectionExtension.AddDMediatR
  isSpec: "True"
  fullName: DMediatR.ServiceCollectionExtension.AddDMediatR
  nameWithType: ServiceCollectionExtension.AddDMediatR
- uid: DMediatR.ValidateCertificateOptions
  name: ValidateCertificateOptions
  href: api/DMediatR.ValidateCertificateOptions.html
  commentId: T:DMediatR.ValidateCertificateOptions
  fullName: DMediatR.ValidateCertificateOptions
  nameWithType: ValidateCertificateOptions
- uid: DMediatR.ValidateCertificateOptions.Validate(System.String,DMediatR.CertificateOptions)
  name: Validate(string?, CertificateOptions)
  href: api/DMediatR.ValidateCertificateOptions.html#DMediatR_ValidateCertificateOptions_Validate_System_String_DMediatR_CertificateOptions_
  commentId: M:DMediatR.ValidateCertificateOptions.Validate(System.String,DMediatR.CertificateOptions)
  name.vb: Validate(String, CertificateOptions)
  fullName: DMediatR.ValidateCertificateOptions.Validate(string?, DMediatR.CertificateOptions)
  fullName.vb: DMediatR.ValidateCertificateOptions.Validate(String, DMediatR.CertificateOptions)
  nameWithType: ValidateCertificateOptions.Validate(string?, CertificateOptions)
  nameWithType.vb: ValidateCertificateOptions.Validate(String, CertificateOptions)
- uid: DMediatR.ValidateCertificateOptions.Validate*
  name: Validate
  href: api/DMediatR.ValidateCertificateOptions.html#DMediatR_ValidateCertificateOptions_Validate_
  commentId: Overload:DMediatR.ValidateCertificateOptions.Validate
  isSpec: "True"
  fullName: DMediatR.ValidateCertificateOptions.Validate
  nameWithType: ValidateCertificateOptions.Validate
- uid: DMediatR.ValidateHostOptions
  name: ValidateHostOptions
  href: api/DMediatR.ValidateHostOptions.html
  commentId: T:DMediatR.ValidateHostOptions
  fullName: DMediatR.ValidateHostOptions
  nameWithType: ValidateHostOptions
- uid: DMediatR.ValidateHostOptions.Validate(System.String,DMediatR.HostOptions)
  name: Validate(string?, HostOptions)
  href: api/DMediatR.ValidateHostOptions.html#DMediatR_ValidateHostOptions_Validate_System_String_DMediatR_HostOptions_
  commentId: M:DMediatR.ValidateHostOptions.Validate(System.String,DMediatR.HostOptions)
  name.vb: Validate(String, HostOptions)
  fullName: DMediatR.ValidateHostOptions.Validate(string?, DMediatR.HostOptions)
  fullName.vb: DMediatR.ValidateHostOptions.Validate(String, DMediatR.HostOptions)
  nameWithType: ValidateHostOptions.Validate(string?, HostOptions)
  nameWithType.vb: ValidateHostOptions.Validate(String, HostOptions)
- uid: DMediatR.ValidateHostOptions.Validate*
  name: Validate
  href: api/DMediatR.ValidateHostOptions.html#DMediatR_ValidateHostOptions_Validate_
  commentId: Overload:DMediatR.ValidateHostOptions.Validate
  isSpec: "True"
  fullName: DMediatR.ValidateHostOptions.Validate
  nameWithType: ValidateHostOptions.Validate
- uid: DMediatR.ValidateRemotesOptions
  name: ValidateRemotesOptions
  href: api/DMediatR.ValidateRemotesOptions.html
  commentId: T:DMediatR.ValidateRemotesOptions
  fullName: DMediatR.ValidateRemotesOptions
  nameWithType: ValidateRemotesOptions
- uid: DMediatR.ValidateRemotesOptions.Validate(System.String,DMediatR.RemotesOptions)
  name: Validate(string?, RemotesOptions)
  href: api/DMediatR.ValidateRemotesOptions.html#DMediatR_ValidateRemotesOptions_Validate_System_String_DMediatR_RemotesOptions_
  commentId: M:DMediatR.ValidateRemotesOptions.Validate(System.String,DMediatR.RemotesOptions)
  name.vb: Validate(String, RemotesOptions)
  fullName: DMediatR.ValidateRemotesOptions.Validate(string?, DMediatR.RemotesOptions)
  fullName.vb: DMediatR.ValidateRemotesOptions.Validate(String, DMediatR.RemotesOptions)
  nameWithType: ValidateRemotesOptions.Validate(string?, RemotesOptions)
  nameWithType.vb: ValidateRemotesOptions.Validate(String, RemotesOptions)
- uid: DMediatR.ValidateRemotesOptions.Validate*
  name: Validate
  href: api/DMediatR.ValidateRemotesOptions.html#DMediatR_ValidateRemotesOptions_Validate_
  commentId: Overload:DMediatR.ValidateRemotesOptions.Validate
  isSpec: "True"
  fullName: DMediatR.ValidateRemotesOptions.Validate
  nameWithType: ValidateRemotesOptions.Validate
- uid: DMediatR.X509CertificateSerializer
  name: X509CertificateSerializer
  href: api/DMediatR.X509CertificateSerializer.html
  commentId: T:DMediatR.X509CertificateSerializer
  fullName: DMediatR.X509CertificateSerializer
  nameWithType: X509CertificateSerializer
- uid: DMediatR.X509CertificateSerializer.#ctor(System.IServiceProvider,Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions})
  name: X509CertificateSerializer(IServiceProvider, IOptions<CertificateOptions>)
  href: api/DMediatR.X509CertificateSerializer.html#DMediatR_X509CertificateSerializer__ctor_System_IServiceProvider_Microsoft_Extensions_Options_IOptions_DMediatR_CertificateOptions__
  commentId: M:DMediatR.X509CertificateSerializer.#ctor(System.IServiceProvider,Microsoft.Extensions.Options.IOptions{DMediatR.CertificateOptions})
  name.vb: New(IServiceProvider, IOptions(Of CertificateOptions))
  fullName: DMediatR.X509CertificateSerializer.X509CertificateSerializer(System.IServiceProvider, Microsoft.Extensions.Options.IOptions<DMediatR.CertificateOptions>)
  fullName.vb: DMediatR.X509CertificateSerializer.New(System.IServiceProvider, Microsoft.Extensions.Options.IOptions(Of DMediatR.CertificateOptions))
  nameWithType: X509CertificateSerializer.X509CertificateSerializer(IServiceProvider, IOptions<CertificateOptions>)
  nameWithType.vb: X509CertificateSerializer.New(IServiceProvider, IOptions(Of CertificateOptions))
- uid: DMediatR.X509CertificateSerializer.#ctor*
  name: X509CertificateSerializer
  href: api/DMediatR.X509CertificateSerializer.html#DMediatR_X509CertificateSerializer__ctor_
  commentId: Overload:DMediatR.X509CertificateSerializer.#ctor
  isSpec: "True"
  name.vb: New
  fullName: DMediatR.X509CertificateSerializer.X509CertificateSerializer
  fullName.vb: DMediatR.X509CertificateSerializer.New
  nameWithType: X509CertificateSerializer.X509CertificateSerializer
  nameWithType.vb: X509CertificateSerializer.New
- uid: DMediatR.X509CertificateSerializer.Deserialize(System.Type,System.Byte[])
  name: Deserialize(Type, byte[])
  href: api/DMediatR.X509CertificateSerializer.html#DMediatR_X509CertificateSerializer_Deserialize_System_Type_System_Byte___
  commentId: M:DMediatR.X509CertificateSerializer.Deserialize(System.Type,System.Byte[])
  name.vb: Deserialize(Type, Byte())
  fullName: DMediatR.X509CertificateSerializer.Deserialize(System.Type, byte[])
  fullName.vb: DMediatR.X509CertificateSerializer.Deserialize(System.Type, Byte())
  nameWithType: X509CertificateSerializer.Deserialize(Type, byte[])
  nameWithType.vb: X509CertificateSerializer.Deserialize(Type, Byte())
- uid: DMediatR.X509CertificateSerializer.Deserialize*
  name: Deserialize
  href: api/DMediatR.X509CertificateSerializer.html#DMediatR_X509CertificateSerializer_Deserialize_
  commentId: Overload:DMediatR.X509CertificateSerializer.Deserialize
  isSpec: "True"
  fullName: DMediatR.X509CertificateSerializer.Deserialize
  nameWithType: X509CertificateSerializer.Deserialize
- uid: DMediatR.X509CertificateSerializer.Deserialize``1(System.Byte[])
  name: Deserialize<T>(byte[])
  href: api/DMediatR.X509CertificateSerializer.html#DMediatR_X509CertificateSerializer_Deserialize__1_System_Byte___
  commentId: M:DMediatR.X509CertificateSerializer.Deserialize``1(System.Byte[])
  name.vb: Deserialize(Of T)(Byte())
  fullName: DMediatR.X509CertificateSerializer.Deserialize<T>(byte[])
  fullName.vb: DMediatR.X509CertificateSerializer.Deserialize(Of T)(Byte())
  nameWithType: X509CertificateSerializer.Deserialize<T>(byte[])
  nameWithType.vb: X509CertificateSerializer.Deserialize(Of T)(Byte())
- uid: DMediatR.X509CertificateSerializer.Serialize(System.Object)
  name: Serialize(object)
  href: api/DMediatR.X509CertificateSerializer.html#DMediatR_X509CertificateSerializer_Serialize_System_Object_
  commentId: M:DMediatR.X509CertificateSerializer.Serialize(System.Object)
  name.vb: Serialize(Object)
  fullName: DMediatR.X509CertificateSerializer.Serialize(object)
  fullName.vb: DMediatR.X509CertificateSerializer.Serialize(Object)
  nameWithType: X509CertificateSerializer.Serialize(object)
  nameWithType.vb: X509CertificateSerializer.Serialize(Object)
- uid: DMediatR.X509CertificateSerializer.Serialize*
  name: Serialize
  href: api/DMediatR.X509CertificateSerializer.html#DMediatR_X509CertificateSerializer_Serialize_
  commentId: Overload:DMediatR.X509CertificateSerializer.Serialize
  isSpec: "True"
  fullName: DMediatR.X509CertificateSerializer.Serialize
  nameWithType: X509CertificateSerializer.Serialize
